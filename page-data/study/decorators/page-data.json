{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/decorators/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"89a26e16-167a-5b54-9778-8874d5f4c03c","excerpt":"decorator의 사용방법과 closure의 개념, decorator에 인자가 있을 경우 decorator 자체에서 함수를 받는 게 아니라 다른 인자를 받을 경우, 함수를 받는 함수를 그 안에 만들어 주어야 한다. 함수를 꼭 또 한번 써야하나? decorator 함수 자체가 closer를 이용한 중첩 함수이고 그 틀이 정해져 있다.  아래의 내용처럼 함수 하나를 안쓰면, decorator의 형태가 아니게 된다.","html":"<p>\n<div style=\"background-color:PowderBlue\">\ndecorator함수의 parameter에 name을 넣어주면, f\"Hello, {name}\" 과 같이 결과값이 나오도록 decorator 함수 구현하기\n</div>\n<h3 id=\"decorator의-사용방법과-closure의-개념-decorator에-인자가-있을-경우\" style=\"position:relative;\"><a href=\"#decorator%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95%EA%B3%BC-closure%EC%9D%98-%EA%B0%9C%EB%85%90-decorator%EC%97%90-%EC%9D%B8%EC%9E%90%EA%B0%80-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0\" aria-label=\"decorator의 사용방법과 closure의 개념 decorator에 인자가 있을 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>decorator의 사용방법과 closure의 개념, decorator에 인자가 있을 경우</h3>\n<ul>\n<li>decorator 자체에서 함수를 받는 게 아니라 다른 인자를 받을 경우, 함수를 받는 함수를 그 안에 만들어 주어야 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">name_decorator</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">third</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> name\n        <span class=\"token keyword\">return</span> third\n    <span class=\"token keyword\">return</span> hello\n\n\n<span class=\"token decorator annotation punctuation\">@name_decorator</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, \"</span></code></pre></div>\n<h3 id=\"함수를-꼭-또-한번-써야하나\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%A5%BC-%EA%BC%AD-%EB%98%90-%ED%95%9C%EB%B2%88-%EC%8D%A8%EC%95%BC%ED%95%98%EB%82%98\" aria-label=\"함수를 꼭 또 한번 써야하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수를 꼭 또 한번 써야하나?</h3>\n<ul>\n<li>decorator 함수 자체가 closer를 이용한 중첩 함수이고 그 틀이 정해져 있다. <br>\n아래의 내용처럼 함수 하나를 안쓰면, decorator의 형태가 아니게 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#TypeError: 'str' object is not callable</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">name_decorator</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#def third():</span>\n                <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> name\n        <span class=\"token comment\">#return third</span>\n    <span class=\"token keyword\">return</span> hello</code></pre></div>","frontmatter":{"title":"[Python] Decorators","date":"February 08, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/study/decorators/","previous":{"fields":{"slug":"/study/list_tuple_set/"},"frontmatter":{"title":"[Python] list, tuple, set","category":"python","draft":false}},"next":{"fields":{"slug":"/study/class/"},"frontmatter":{"title":"[Python] Class","category":"python","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/endpoint_3/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"c953e9eb-d080-53c6-9dc9-0a69b7ff5f2d","excerpt":"app을 만들고 프로젝트에 연결까지 시켰다. 이제 app의 기능을 구현할 차례다.  : 테이블 생성. data를 담을 주머니를 만든다.  : 로직. 데이터 넣고 저장하고 보내고 등등 데이터랑 일한다.  : request를 받으면 연결연결해서, 이걸 처리할 수 있는 endpoint까지 보낸다. models.py에서 class, table 만들기 class명은 단수로, 첫글자는 대문자로 정한다. table명은 복수로, 소문자를 사용한다. auto_now_add…","html":"<p>\n<p>app을 만들고 프로젝트에 연결까지 시켰다.<br>\n이제 app의 기능을 구현할 차례다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[App 만드는 순서]\nmodels.py ⇒ views.py ⇒ urls.py</code></pre></div>\n<ul>\n<li><code class=\"language-text\">models.py</code> : 테이블 생성. data를 담을 주머니를 만든다.</li>\n<li><code class=\"language-text\">views.py</code> : 로직. 데이터 넣고 저장하고 보내고 등등 데이터랑 일한다.</li>\n<li><code class=\"language-text\">urls.py</code> : request를 받으면 연결연결해서, 이걸 처리할 수 있는 endpoint까지 보낸다.</li>\n</ul>\n<h2 id=\"modelspy에서-class-table-만들기\" style=\"position:relative;\"><a href=\"#modelspy%EC%97%90%EC%84%9C-class-table-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"modelspy에서 class table 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>models.py에서 class, table 만들기</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#app_name/models.py</span>\n\nfrom django.db <span class=\"token function\">import</span> models\n\nclass User<span class=\"token punctuation\">(</span>models.Model<span class=\"token punctuation\">)</span>:\n    name       <span class=\"token operator\">=</span> models.CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    email      <span class=\"token operator\">=</span> models.CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    phone      <span class=\"token operator\">=</span> models.CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n    password   <span class=\"token operator\">=</span> models.CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n    created_at <span class=\"token operator\">=</span> models.DataTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> True<span class=\"token punctuation\">)</span>\n    updated_at <span class=\"token operator\">=</span> models.DateTimeField<span class=\"token punctuation\">(</span>auto_now <span class=\"token operator\">=</span> True<span class=\"token punctuation\">)</span>\n    \n    class Meta:\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'users'</span>   <span class=\"token comment\">#없어도 상관없는. 편리함을 위해 테이블 이름을 정해주는 역할</span></code></pre></div>\n<ul>\n<li>class명은 단수로, 첫글자는 대문자로 정한다.<br>\ntable명은 복수로, 소문자를 사용한다.</li>\n<li>auto_now_add는 최초로 추가되었을 때만 시간이 입력된다.<br>\nauto_now는 내용이 변경될 때마다 시간이 입력된다.</li>\n<li>\n<p>class Meta 는 meta 데이터로, 옵션값이다. 여기에서의 역할은 그냥 테이블 이름만 정해준다.<br>\n테이블 이름을 정해주지 않으면 장고에서 자동으로 app_app과 같은 형식으로 지정한다.</p>\n<p>Meta data : 대량의 정보 가운데에서 찾고 있는 정보를 효율적으로 찾아내서 이용하기 위해 일정한 규칙에 따라 콘텐츠에 대하여 부여되는 데이터이다. 어떤 데이터 즉 구조화된 정보를 분석, 분류하고 <strong>부가적 정보를 추가하기 위해 그 데이터 뒤에 함께 따라가는 정보</strong>를 말한다.</p>\n</li>\n<li>coding convention: 가독성을 위해서 data들을 줄맞춤 해준다.</li>\n</ul>\n<p>****만약에 모델 클래스에 id라는 걸 사용하면 어찌되나?<br>\n****Meta에 db_table이라는 단어도 딱 저렇게 사용해야되나?</p>\n<h2 id=\"makemigrations-migrate\" style=\"position:relative;\"><a href=\"#makemigrations-migrate\" aria-label=\"makemigrations migrate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>makemigrations, migrate</h2>\n<ul>\n<li>models.py의 내용을 수정했다면 무조건 migrate를 해줘야 적용이 된다. 거기까지 해야 테이블이 만들어진다.</li>\n<li>makemigrations는 일단 이렇게 만들 것이라고 미리 보여주는 것. 테이블을 생성하려면 꼭 migrate까지 해줘야한다.</li>\n<li>app의 이름을 넣어주는 것이 좋다. 다 완성된 게 아닌데 전체를 해버리면 에러가 날 수도 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python manage.py makemigrations <span class=\"token punctuation\">(</span>app_name<span class=\"token punctuation\">)</span>\n\nMigrations <span class=\"token keyword\">for</span> <span class=\"token string\">'user'</span><span class=\"token builtin class-name\">:</span>\n    user/migrations/0001_initial.py\n    - Create model Userlcd</code></pre></div>\n<ul>\n<li>\n<p>여기에서 migration이 어떻게 만들어졌는지 자세히 보고 싶다면, 위에 나온 경로를 열면 된다.</p>\n<ul>\n<li>열어보면, fields에 내가 넣지 않은 정보 ‘id’가 있는 걸 확인할 수 있다.<br>\n여기서 id는 고유의 primary key를 말하는데, 이건 django에서 자동으로 생성해준다.</li>\n<li>database에 있는 data를 삭제해도 primary key는 바뀌지 않고, 삭제된 data의 primary key에 새로운 data가 들어가지는 않는다. data가 쌓이면 그냥 primary key가 늘어 난다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> user/migrations/0001_initial.py\n\n<span class=\"token comment\"># Generated by Django 3.0.3 on 2020-02-07 04:56</span>\n\nfrom django.db <span class=\"token function\">import</span> migrations, models\n\n\nclass Migration<span class=\"token punctuation\">(</span>migrations.Migration<span class=\"token punctuation\">)</span>:\n\n    initial <span class=\"token operator\">=</span> True\n\n    dependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">]</span>\n\n    operations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        migrations.CreateModel<span class=\"token punctuation\">(</span>\n            <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">'User'</span>,\n            <span class=\"token assign-left variable\">fields</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span>, models.AutoField<span class=\"token punctuation\">(</span>auto_created<span class=\"token operator\">=</span>True, <span class=\"token assign-left variable\">primary_key</span><span class=\"token operator\">=</span>True, <span class=\"token assign-left variable\">serialize</span><span class=\"token operator\">=</span>False, <span class=\"token assign-left variable\">verbose_name</span><span class=\"token operator\">=</span><span class=\"token string\">'ID'</span><span class=\"token punctuation\">))</span>,\n                <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span>, models.CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">))</span>,\n                <span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span>, models.CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">))</span>,\n                <span class=\"token punctuation\">(</span><span class=\"token string\">'phone'</span>, models.CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">))</span>,\n                <span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span>, models.CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">))</span>,\n                <span class=\"token punctuation\">(</span><span class=\"token string\">'created_at'</span>, models.DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span>True<span class=\"token punctuation\">))</span>,\n                <span class=\"token punctuation\">(</span><span class=\"token string\">'updated_at'</span>, models.DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span>True<span class=\"token punctuation\">))</span>,\n            <span class=\"token punctuation\">]</span>,\n            <span class=\"token assign-left variable\">options</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'db_table'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'users'</span>,\n            <span class=\"token punctuation\">}</span>,\n        <span class=\"token punctuation\">)</span>,\n    <span class=\"token punctuation\">]</span></code></pre></div>\n<p>****python manage.py sqlmigrate account 0001  #번호 정할 수 있음. 이거랑 python manage.py migrate랑 뭐가 다른가?</p>\n<ul>\n<li>\n<p>makemigrations는 되어 있지만 아직 migrate 안 된 것들을 볼 수 있다.<br>\nmigrate까지 완료되면 [X] 라고 표시된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python manage.py showmigrations\n\ncontenttypes\n    <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 0001_initial\n    <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 0002_remove_content_type_name\nsessions\n    <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 0001_initial\nuser\n    <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 0001_initial</code></pre></div>\n</li>\n<li>\n<p>migrate까지 완료하면 table이 만들어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python manage.py migrate <span class=\"token punctuation\">(</span>app_name<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">sqlite3 db.sqlite3</code> ⇒ <code class=\"language-text\">.tables</code> : table이 잘 생성됐는지 확인한다.<br>\n(sqlite3은 django에서 기본으로 제공하는 database)</p>\n<p>table에 내가 만든 users가 생겼다.<br>\n나머지 3개는 django가 필요해서 만든 table들이며, django가 만든 것들은 앞에 ‘django’라고 붙는다.</p>\n<p>sqlite3를 끝내려면 <code class=\"language-text\">ctrl + d</code> (ctrl + c는 break)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sqlite3 db.sqlite3 \n\nSQLite version <span class=\"token number\">3.31</span>.1 <span class=\"token number\">2020</span>-01-27 <span class=\"token number\">19</span>:55:54\nEnter <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> usage hints.\nsqlite<span class=\"token operator\">></span> **.tables**\ndjango_content_type  django_session     \ndjango_migrations    **users**</code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[Django] Create Endpoint(3); sign-up, log-in, comments","date":"February 14, 2020","category":"django","thumbnail":null}}},"pageContext":{"slug":"/study/endpoint_3/","previous":{"fields":{"slug":"/study/endpoint_2/"},"frontmatter":{"title":"[Django] Create Endpoint(2); sign-up, log-in, comments","category":"django","draft":false}},"next":{"fields":{"slug":"/study/endpoint_4/"},"frontmatter":{"title":"[Django] Create Endpoint(4); sign-up, log-in, comments","category":"django","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
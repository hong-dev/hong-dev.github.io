{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/longest_word/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"b79d3809-660d-5487-aa69-a178751ccf1f","excerpt":"My Solution 앞뒤 단어의 길이를 비교해서 더 큰 쪽을 longest_word가 되도록 하면서 for문을 돌렸다. 그리고 마지막에 longest_word를 return하는 방식으로 풀었다. for문 안에 if가 들어 갈 수 밖에 없는 구조가 되었다. Model Solution for문을 돌리면서 단어의 길이와 단어 내용을 tuple로 묶어서 list에 append했다. 그 뒤 sort()로 오름차순 정렬을 한 뒤에 맨 뒤에 있는 tuple 단어를 return 했다. for…","html":"<p>\n<div style=\"background-color:PowderBlue\">\n주어진 리스트안에 있는 단어중 가장 긴 단어를 찾을수 있도록 함수를 작성하라.\n</div>\n<h3 id=\"my-solution\" style=\"position:relative;\"><a href=\"#my-solution\" aria-label=\"my solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Solution</h3>\n<ul>\n<li>앞뒤 단어의 길이를 비교해서 더 큰 쪽을 longest_word가 되도록 하면서 for문을 돌렸다.<br>\n그리고 마지막에 longest_word를 return하는 방식으로 풀었다.</li>\n<li>for문 안에 if가 들어 갈 수 밖에 없는 구조가 되었다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_longest_word</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            longest_word <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            longest_word <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> longest_word</code></pre></div>\n<h3 id=\"model-solution\" style=\"position:relative;\"><a href=\"#model-solution\" aria-label=\"model solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model Solution</h3>\n<ul>\n<li>for문을 돌리면서 단어의 길이와 단어 내용을 tuple로 묶어서 list에 append했다.<br>\n그 뒤 sort()로 오름차순 정렬을 한 뒤에 맨 뒤에 있는 tuple 단어를 return 했다.</li>\n<li>for문 한번으로 처리하였고, 코드의 길이도 짧고 한줄한줄이 늘어지지 않는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#model solution</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">find_longest_word</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    word_len <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n        word_len<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    word_len<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> word_len<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"listsort\" style=\"position:relative;\"><a href=\"#listsort\" aria-label=\"listsort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>list.sort()</em></h3>\n<ul>\n<li>오름차순 및 내림차순으로 정렬하는 method이다. default는 오름차순</li>\n<li>따로 변수에 넣지 않는 이상, 실행을 하면 원본 list 자체가 정렬이 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">list_name<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">#오름차순</span>\n\nlist_name<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#내림차순</span></code></pre></div>\n<p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Reference;\nwecode 2주차 python exam replit</code></pre></div>","frontmatter":{"title":"[Python] find longest word","date":"February 13, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/study/longest_word/","previous":{"fields":{"slug":"/study/virtual_environment/"},"frontmatter":{"title":"Virtual Environment (가상환경)","category":"django","draft":false}},"next":{"fields":{"slug":"/study/settings/"},"frontmatter":{"title":"[Django] App(1); 초기세팅","category":"django","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/exception_handling/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"6920a49f-a388-5832-9f25-338330c4a3a0","excerpt":"의도하지 않은 error가 발생하는 상황 exception이 발생하면, 발생한 코드 위치에서 곧바로 프로그램이 종료된다. 그다음 코드들이 실행되지 않는다. exception handling; try-except 방법을 쓰면 exception이 발생해도, 프로그램을 종료하지 않고 다른 로직을 실행한 후 프로그램이 계속 실행되게 할 수 있다. try-except-(else)-finally : exception이 발생하지 않고 정상 작동 되었을 때 실행된다. : exception…","html":"<p>\n<ul>\n<li>의도하지 않은 error가 발생하는 상황</li>\n<li>exception이 발생하면, 발생한 코드 위치에서 곧바로 프로그램이 종료된다. 그다음 코드들이 실행되지 않는다.</li>\n<li>exception handling; try-except 방법을 쓰면 exception이 발생해도, 프로그램을 종료하지 않고 다른 로직을 실행한 후 프로그램이 계속 실행되게 할 수 있다.</li>\n</ul>\n<h2 id=\"try-except-else-finally\" style=\"position:relative;\"><a href=\"#try-except-else-finally\" aria-label=\"try except else finally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try-except-(else)-finally</h2>\n<ul>\n<li><code class=\"language-text\">try</code>: exception이 발생하지 않고 정상 작동 되었을 때 실행된다.</li>\n<li><code class=\"language-text\">except &lt;error></code>: exception이 발생하면 실행된다.</li>\n<li><code class=\"language-text\">except Exception (as e)</code>: 위의 except에서 말한 error가 아닌 다른 종류의 exception이 발생했을 때 실행된다. as를 사용해서 해당 exception의 객체를 받아서 정보를 더 얻을 수 있다.</li>\n<li><code class=\"language-text\">else</code>: exception이 발생하지 않았을 때 실행된다.</li>\n<li><code class=\"language-text\">finally</code>: exception 발생 여부와 상관없이 무조건 실행된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">division</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>                    <span class=\"token comment\">#정상 작동시</span>\n        div1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">/</span> num2\n    <span class=\"token keyword\">except</span> TypeError<span class=\"token punctuation\">:</span>       <span class=\"token comment\">#typeerror 발생시</span>\n        div1 <span class=\"token operator\">=</span> <span class=\"token string\">\"TypeError\"</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>  <span class=\"token comment\">#다른 exception 발생시</span>\n        div1 <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"TypeError가 아닌 다른 Exception 발생 ==> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>                   <span class=\"token comment\">#정상 작동시(try가 실행되었을 때)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exception이 발생하지 않았습니다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> div1</code></pre></div>","frontmatter":{"title":"[Python] Exception handling: try-except","date":"February 12, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/study/exception_handling/","previous":{"fields":{"slug":"/study/import_modules/"},"frontmatter":{"title":"[Python] How Import statement finds Modules & Packages","category":"python","draft":false}},"next":{"fields":{"slug":"/study/virtual_environment/"},"frontmatter":{"title":"Virtual Environment (가상환경)","category":"django","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
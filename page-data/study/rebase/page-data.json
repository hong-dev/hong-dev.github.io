{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/rebase/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"ec5ac7c8-c809-5a9e-aec9-51b7bb275efd","excerpt":"git을 통해 작업할 때 중간중간 add와 commit을 하게 되는데, 여러 개의 commit을 날린 후 push를 하면 그동안의 모든 commit들이 남는다. commit 뿐만 아니라 push 할 때 conflict 수정하고 다시 날리는 merge commit 또한 남아서 commit 및 버전 관리가 복잡해진다. 이를 방지하기 위해서 push를 할 때에는 기존의 commit들을 하나로 합친 후에 push를 한다. git rebase rebase는 나의 현재 branch의 base…","html":"<ul>\n<li>git을 통해 작업할 때 중간중간 add와 commit을 하게 되는데, 여러 개의 commit을 날린 후 push를 하면 그동안의 모든 commit들이 남는다.<br>\ncommit 뿐만 아니라 push 할 때 conflict 수정하고 다시 날리는 merge commit 또한 남아서 commit 및 버전 관리가 복잡해진다.</li>\n<li>이를 방지하기 위해서 push를 할 때에는 기존의 commit들을 하나로 합친 후에 push를 한다.</li>\n</ul>\n<h3 id=\"git-rebase\" style=\"position:relative;\"><a href=\"#git-rebase\" aria-label=\"git rebase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git rebase</h3>\n<ul>\n<li>rebase는 나의 현재 branch의 base를 최신으로 만든다는 의미로, base가 최신이기 때문에 push를 할 때의 conflict는 없게 된다.</li>\n</ul>\n<p>\n<ol>\n<li>내 branch에서 rebase 하기 전에 master를 최신으로 만들어준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master\n\n<span class=\"token function\">git</span> pull origin master</code></pre></div>\n<ol start=\"2\">\n<li>branch로 돌아와서 rebase를 해준다.\nrebase 하기 전에 이미 add와 commit이 완료되어 있어야 한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout branch\n\n<span class=\"token function\">git</span> rebase -i master</code></pre></div>\n<ol start=\"3\">\n<li>\n<p>commit 목록 중에 제일 윗줄만 남기고 나머지는 squash 혹은 s로 바꾸어준다.</p>\n<p>\n</li>\n<li><code class=\"language-text\">:wq</code> 하고 나오면 commit message 수정할 수 있는 창이 뜨는데, 정성스러운 commit message만 남기고 나머지는 삭제한다.<br>\n*tip: 중간중간 남기는 commit은 ’<code class=\"language-text\">wip</code>‘(work in process)으로만 간단히 남겨도 된다.</li>\n</ol>\n<p>\n<ol start=\"5\">\n<li>역시 <code class=\"language-text\">:wp</code>로 나와서 successfully rebase 되었다는 메세지가 남겨져 있으면 성공!</li>\n</ol>\n<p>\n<ol start=\"6\">\n<li>git에 push 명령어를 날린다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin branch</code></pre></div>\n<ul>\n<li>\n<p>만약에 이미 PR이 올라가 있는 상태에서 rebase를 했을 경우에는, git 입장에서 base가 달라졌다고 생각하여 다른 branch로 인식하여 reject를 해버린다. 이 경우에는 force 명령어를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin branch --force</code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"git rebase","date":"March 13, 2020","category":"commands","thumbnail":null}}},"pageContext":{"slug":"/study/rebase/","previous":{"fields":{"slug":"/study/structure/"},"frontmatter":{"title":"Data Structure 자료구조","category":"concepts","draft":false}},"next":{"fields":{"slug":"/study/flow/"},"frontmatter":{"title":"git flow","category":"concepts","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
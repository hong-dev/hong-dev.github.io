{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/instagram_review/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"4b3b2bfb-ed70-5b33-a6e3-7ae03e99b735","excerpt":"1. App 분리 Account(User정보)랑 Comment랑 app을 분리해야 한다. App을 분리하면 문제가 생겼을 때 빨리 찾을 수 있다. App 분리는 어떤 기준으로 하는 게 좋을지 처음에 잘 생각하는 것이 좋다. 레거시(Legacy)를 개선할 때 이런 식의 app 분리 작업이 진짜 많다. 2. jsonresponse jsonresponse({“message”:\"\"})는 user의 화면에 띄우는 것이 아니라 front에게 보내주는 것이다. 보안을 위해서라도 message…","html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">회원가입, 로그인, 댓글 View 작성하기</code></pre></div>\n<h3 id=\"1-app-분리\" style=\"position:relative;\"><a href=\"#1-app-%EB%B6%84%EB%A6%AC\" aria-label=\"1 app 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. App 분리</h3>\n<ul>\n<li>Account(User정보)랑 Comment랑 app을 분리해야 한다.<br>\nApp을 분리하면 문제가 생겼을 때 빨리 찾을 수 있다.<br>\nApp 분리는 어떤 기준으로 하는 게 좋을지 처음에 잘 생각하는 것이 좋다.<br>\n레거시(Legacy)를 개선할 때 이런 식의 app 분리 작업이 진짜 많다.</li>\n</ul>\n<h3 id=\"2-jsonresponse\" style=\"position:relative;\"><a href=\"#2-jsonresponse\" aria-label=\"2 jsonresponse permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. jsonresponse</h3>\n<ul>\n<li>jsonresponse({“message”:\"\"})는 user의 화면에 띄우는 것이 아니라 front에게 보내주는 것이다.<br>\n보안을 위해서라도 message는 웬만하면 보내지 않는 것이 좋다.</li>\n<li>message를 보낼 때는, 대문자<em>연결 로 보내주는 것이 좋다. USER</em>DOES<em>NOT</em>EXIST 이런식으로. 그래야 프론트에서 읽기 좋겠지?</li>\n<li>jsonresponse는 body에 데이터를 넣어서 보내는 것이고, httpresponse는 body에 데이터가 없고, header에 데이터(status)를 넣어서 보내준다.</li>\n</ul>\n<h3 id=\"3-sign-up-으로-했으면-log-in-보다는-sign-in\" style=\"position:relative;\"><a href=\"#3-sign-up-%EC%9C%BC%EB%A1%9C-%ED%96%88%EC%9C%BC%EB%A9%B4-log-in-%EB%B3%B4%EB%8B%A4%EB%8A%94-sign-in\" aria-label=\"3 sign up 으로 했으면 log in 보다는 sign in permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. sign-up 으로 했으면, log-in 보다는 sign-in</h3>\n<h3 id=\"4-class-based-view--function-based-view\" style=\"position:relative;\"><a href=\"#4-class-based-view--function-based-view\" aria-label=\"4 class based view  function based view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. class based view / function based view</h3>\n<ul>\n<li>class based view : class 걸어 놓고, get, post 이런 거 해놓고, as_view만 쓰면 다 알아서 해준다.</li>\n<li>function based view(함수형 뷰) : 다 수동이다. 어떻게 get인지 post인지 체크해서 실행시키는 것 모두 다 개발자가 해야한다.</li>\n</ul>\n<h3 id=\"5-secure-coding\" style=\"position:relative;\"><a href=\"#5-secure-coding\" aria-label=\"5 secure coding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Secure coding</h3>\n<ul>\n<li>endpoint가 거기서 거기지 라는 생각은 오산!</li>\n<li>검증을 잘해야 하고, 검증을 잘 할수록 보안장비를 싼 것으로 쓸 수 있다.</li>\n<li>secure coding은 계속 해야하는 것</li>\n</ul>\n<h3 id=\"6-key-error\" style=\"position:relative;\"><a href=\"#6-key-error\" aria-label=\"6 key error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. KEY ERROR</h3>\n<ul>\n<li>key들이 잘 넘어왔나 아닌가를 체크하는 것으로, 항상 따라다녀야 하는 검증이다.</li>\n<li>try-exception으로 처리한다.</li>\n</ul>\n<h3 id=\"7-import-작성-방법\" style=\"position:relative;\"><a href=\"#7-import-%EC%9E%91%EC%84%B1-%EB%B0%A9%EB%B2%95\" aria-label=\"7 import 작성 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. import 작성 방법</h3>\n<ul>\n<li>적는 순서: 기본 패키지 ⇒ 내가 만든 것 ⇒ 장고에서 가져오는 것</li>\n<li>import만 적는 것은, 웬만하면 콤마를 쓰지말고 한줄한줄 import 하게 한다.</li>\n</ul>\n<h3 id=\"8-convention\" style=\"position:relative;\"><a href=\"#8-convention\" aria-label=\"8 convention permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. Convention</h3>\n<ul>\n<li>가독성을 위해 띄어쓰기를 맞춰준다.</li>\n</ul>\n<h3 id=\"9-db에-있는-지-체크\" style=\"position:relative;\"><a href=\"#9-db%EC%97%90-%EC%9E%88%EB%8A%94-%EC%A7%80-%EC%B2%B4%ED%81%AC\" aria-label=\"9 db에 있는 지 체크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. DB에 있는 지 체크</h3>\n<ul>\n<li>db의 전체 data를 하나하나 for문으로 돌린다는 건 매우매우 불필요한 작업</li>\n<li><code class=\"language-text\">exists()</code> 라는 좋은 함수가 있다!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> Account<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>email <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                user <span class=\"token operator\">=</span> Account<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>email<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">==</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#비번 틀림</span>\n            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#없는 계정</span>\n        <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"INVALID_KEYS\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#입력값X</span></code></pre></div>\n<h3 id=\"10-코드-생략하기\" style=\"position:relative;\"><a href=\"#10-%EC%BD%94%EB%93%9C-%EC%83%9D%EB%9E%B5%ED%95%98%EA%B8%B0\" aria-label=\"10 코드 생략하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10. 코드 생략하기</h3>\n<ul>\n<li>줄일 수 있는 코드는 줄이자.</li>\n<li>else 같은 경우는 굳이 없어도 될 때가 많으니 잘 생각하고 넣자.<br>\n코드를 작성할 때, <strong>이게 어떤 의미가 있는지 꼭 필요한 것인지</strong>를 생각하자!</li>\n</ul>\n<h3 id=\"11-filter의-andor\" style=\"position:relative;\"><a href=\"#11-filter%EC%9D%98-andor\" aria-label=\"11 filter의 andor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11. filter()의 and/or</h3>\n<ul>\n<li>name, email, phone 중에 하나로 로그인 가능하도록 구현하기</li>\n<li><code class=\"language-text\">User.objects.filter(name=\"aaa\")</code> 의 방식으로 진행할 때, 콤마(<code class=\"language-text\">,</code>)는 and를 의미한다.</li>\n<li>filter() 함수에서 or를 사용하려면 <code class=\"language-text\">Q</code>를 쓸 수 있다.<br>\nQ를 쓸려면 미리 import 해야한다.</li>\n<li>user_data는 dictionary로 넘어온다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Q\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user_data  <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n\n        user_name  <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        user_email <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        user_phone <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>user_name<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>Q<span class=\"token punctuation\">(</span>email<span class=\"token operator\">=</span>user_email<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>Q<span class=\"token punctuation\">(</span>phone<span class=\"token operator\">=</span>user_phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>user_name<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>Q<span class=\"token punctuation\">(</span>email<span class=\"token operator\">=</span>user_email<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>Q<span class=\"token punctuation\">(</span>phone<span class=\"token operator\">=</span>user_phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"12-migrate-오류\" style=\"position:relative;\"><a href=\"#12-migrate-%EC%98%A4%EB%A5%98\" aria-label=\"12 migrate 오류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12. migrate 오류</h3>\n<ul>\n<li>\n<p>app 분리를 하고 migrate를 했는데, 이미 있는 table이라는 에러가 나왔다.</p>\n<p>원인은, 기존의 app에서 만들었던 table이 있는데, 새로운 app에서 같은 table을 만들려고 하니 이미 있다는 에러가 나온 것.</p>\n</li>\n<li>\n<p>아래의 방법으로 initial migration을 이미 진행한 것처럼 fake 처리하여 진행했더니 성공이다.</p>\n<p>근데 문제는, 기존 app에서 만들었던 db 내용이 사라졌다는 것.<br>\n그냥 옮겨올 수 있을 줄 알았는데, 기존 app의 테이블을 delete 하고 새로운 app의 table이 만들어지고 db가 비어진 채로 생성되었다..</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python manage.py migrate --fake-initial</code></pre></div>\n<p>참조: <a href=\"https://yuda.dev/216\">[Django] Django 마이그레이션 초기화하기</a></p>\n<hr>\n<h3 id=\"회원가입-및-로그인-view-수정-완료\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%B0%8F-%EB%A1%9C%EA%B7%B8%EC%9D%B8-view-%EC%88%98%EC%A0%95-%EC%99%84%EB%A3%8C\" aria-label=\"회원가입 및 로그인 view 수정 완료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 및 로그인 view 수정 완료</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># user/views.py</span>\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http  <span class=\"token keyword\">import</span> HttpResponse<span class=\"token punctuation\">,</span> JsonResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Q\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        User<span class=\"token punctuation\">(</span>\n            name     <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            email    <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            phone    <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            password <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user_data <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        users     <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> user <span class=\"token keyword\">in</span> user_data<span class=\"token punctuation\">:</span>\n            users<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'name'</span>     <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'email'</span>    <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'phone'</span>    <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">,</span> \n                <span class=\"token string\">'password'</span> <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>password\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">:</span>users<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user_data  <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n\n        user_name  <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        user_email <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        user_phone <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>user_name<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>Q<span class=\"token punctuation\">(</span>email<span class=\"token operator\">=</span>user_email<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>Q<span class=\"token punctuation\">(</span>phone<span class=\"token operator\">=</span>user_phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>user_name<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>Q<span class=\"token punctuation\">(</span>email<span class=\"token operator\">=</span>user_email<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>Q<span class=\"token punctuation\">(</span>phone<span class=\"token operator\">=</span>user_phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"INVALID_KEYS\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"comment-view-수정-완료\" style=\"position:relative;\"><a href=\"#comment-view-%EC%88%98%EC%A0%95-%EC%99%84%EB%A3%8C\" aria-label=\"comment view 수정 완료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comment view 수정 완료</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># comment/views.py</span>\n\n<span class=\"token keyword\">import</span> json\n    \n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models     <span class=\"token keyword\">import</span> Comment\n<span class=\"token keyword\">from</span> user<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http  <span class=\"token keyword\">import</span> HttpResponse<span class=\"token punctuation\">,</span> JsonResponse\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user_data   <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                Comment<span class=\"token punctuation\">(</span>\n                    name    <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    comment <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'comment'</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        comment_data <span class=\"token operator\">=</span> Comment<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'comments'</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>comment_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"[Django] westagram views.py code review","date":"February 18, 2020","category":"django","thumbnail":null}}},"pageContext":{"slug":"/study/instagram_review/","previous":{"fields":{"slug":"/study/http/"},"frontmatter":{"title":"[Web] HTTP","category":"concepts","draft":false}},"next":{"fields":{"slug":"/study/codekata_4/"},"frontmatter":{"title":"[CodeKata] 4","category":"algorithm","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/class_method_attribute/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"c15ac5ba-287d-5be7-bb49-c2c89165c850","excerpt":"delete method는 정상 작동하는데, 나머지 method들이 계속 에러가 났다. 문제는, dictionary에 해당 요소가 없어서 None이 return 되어야 하는데, 내 코드에서는 자꾸 유효한 값이 return되는 것이다. delete가 잘 작동되는데 요소가 안 사라지고 남아있을 수가 있나? 알고보니 delete가 문제가 아니라 insert였던 것. 값이 안 사라진 게 아니라 아예 들어가지를 않았던 것이다. 이걸 왜 생각을 전혀 못 했는지.. dictionary의 총 size…","html":"<p>\n<div style=\"background-color:PowderBlue\">\nClass에 data들을 insert, select, update, delete하는 method 만들기\n</div>\n<ul>\n<li>delete method는 정상 작동하는데, 나머지 method들이 계속 에러가 났다.<br>\n문제는, dictionary에 해당 요소가 없어서 None이 return 되어야 하는데, 내 코드에서는 자꾸 유효한 값이 return되는 것이다.<br>\ndelete가 잘 작동되는데 요소가 안 사라지고 남아있을 수가 있나?<br>\n알고보니 delete가 문제가 아니라 insert였던 것. 값이 안 사라진 게 아니라 아예 들어가지를 않았던 것이다. 이걸 왜 생각을 전혀 못 했는지..</li>\n<li>dictionary의 총 size가 Database class의 size 속성보다 크면 더이상 새로운 값들이 못들어온다.<br>\n그래서 말 그대로 len(Database.dict_data) > self.size 라고 적었는데, 생각해보면 두 개의 size가 같아도 더이상 못들어온다.</li>\n</ul>\n<h5 id=\"해당-상황이-발생할-수-있는-모든-경우의-수를-생각하자\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EB%8B%B9-%EC%83%81%ED%99%A9%EC%9D%B4-%EB%B0%9C%EC%83%9D%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%AA%A8%EB%93%A0-%EA%B2%BD%EC%9A%B0%EC%9D%98-%EC%88%98%EB%A5%BC-%EC%83%9D%EA%B0%81%ED%95%98%EC%9E%90\" aria-label=\"해당 상황이 발생할 수 있는 모든 경우의 수를 생각하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해당 상황이 발생할 수 있는 모든 경우의 수를 생각하자!!</h5>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n\n    dict_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">#1)생각해보니 이건 완전 잘못된 선택이었다.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>Database<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>  <span class=\"token comment\">#요녀석이 문제였다. 크거나 같을 때.</span>\n            <span class=\"token keyword\">pass</span>  <span class=\"token comment\">#2)웬만하면 pass를 안쓰고 뒤집어 생각하자.</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            Database<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> field <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> Database<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> Database<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> field <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> Database<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            Database<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> field <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> Database<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">del</span> Database<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span></code></pre></div>\n<p>\n<p><strong>Model solution과 비교했을 때, 내 코드의 문제점과 좀 더 깔끔한 코드를 위해 정리를 해보자면:</strong></p>\n<ol>\n<li>\n<p>data를 모아두는 dictionary(dict_data)를 어디에다가 넣어야 하나 고민을 했었다.<br>\nclass 밖인가(global scope), class 안인가, __init__ 안에 attribute로 넣을까. class 안에 일반 변수로 넣어두었는데, 지금 쓰면서 생각해보니까 완전 잘못 짚었다.</p>\n<p>dict_data는 모든 class의 instance가 공유한다. 즉, instance가 하나라면 dict_data를 독점하겠지만, 여러 개의 instance가 있다면 각각의 instance에서 method를 실행하면 같은 dict_data의 요소들이 움직인다. 아주 큰 에러다.</p>\n</li>\n</ol>\n<p><strong>각각의 instance가 고유한 dictionary를 가지기 위해서는, instance가 생성될 때 자동으로 넘겨받는 __init__ 속성에 self.dict_data 형태로 입력한다.</strong></p>\n<ol start=\"2\">\n<li>문자 그대로 적용하다보니, 아무것도 발생하지 않을 때는 pass를 전부 적어주었다.<br>\n사실 pass가 들어가게 if-else를 사용하지말고, else에 들어갈 조건을 if에 적기만 하면 된다.</li>\n</ol>\n<p><strong>문자 그대로 코드를 옮기는 게 중요한 게 아니라, 쓸모없는 코드가 있지는 않은지 생각하고 또 생각하자!</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#정리된 코드</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>dict_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value           \n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> field <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> field <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value         \n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> field <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>dict_data<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">]</span></code></pre></div>","frontmatter":{"title":"[Python] Class method, attribute 만들기","date":"February 10, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/study/class_method_attribute/","previous":{"fields":{"slug":"/study/class/"},"frontmatter":{"title":"[Python] Class","category":"python","draft":false}},"next":{"fields":{"slug":"/study/codekata_1/"},"frontmatter":{"title":"[CodeKata] 1","category":"algorithm","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
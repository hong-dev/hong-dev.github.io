{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/list_element_delete/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"90597ba6-3373-5922-b751-d625820275db","excerpt":"Try 1 list의 모든 요소들을 for문으로 돌려서 각각의 요소들이 홀수인지 판단하고 지우면? ⇒ Fail; remove를 쓰는 순간, elements의 index가 하나씩 앞으로 당겨지게 된다. (list elements의 index는 고정된 것이 아니라, 사라지거나 추가되면 다시 순서대로 정렬된다.) for문은 차례대로 돌고, index는 remove 될 때마다 당겨지면, for문에 걸리지 않고 넘어가는 요소들이 생긴다. Try 2 list…","html":"<p>\n<div style=\"background-color:PowderBlue\">\n주어진 list에서 홀수는 전부 지우고 짝수만 남는 list를 return하라.\n</div>\n<h3 id=\"try-1\" style=\"position:relative;\"><a href=\"#try-1\" aria-label=\"try 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Try 1</h3>\n<ul>\n<li>list의 모든 요소들을 for문으로 돌려서 각각의 요소들이 홀수인지 판단하고 지우면?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">remove_odd_numbers</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n      numbers<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> numbers</code></pre></div>\n<h4 id=\"-fail\" style=\"position:relative;\"><a href=\"#-fail\" aria-label=\" fail permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⇒ Fail;</h4>\n<p><strong>remove를 쓰는 순간, elements의 index가 하나씩 앞으로 당겨지게 된다.</strong><br>\n(list elements의 index는 고정된 것이 아니라, 사라지거나 추가되면 다시 순서대로 정렬된다.)<br>\nfor문은 차례대로 돌고, index는 remove 될 때마다 당겨지면, for문에 걸리지 않고 넘어가는 요소들이 생긴다.</p>\n<h3 id=\"try-2\" style=\"position:relative;\"><a href=\"#try-2\" aria-label=\"try 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Try 2</h3>\n<ul>\n<li>list를 새로 만들어서 홀수 요소들만 넣어두고, 원본 list에서 홀수 list를 빼면?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">remove_odd_numbers</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  odd_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n      odd_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>odd_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"-fail-1\" style=\"position:relative;\"><a href=\"#-fail-1\" aria-label=\" fail 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⇒ Fail;</h4>\n<p>원본 list에서 홀수 list를 뺄 때, 세트로 변환하여 차집합(difference)을 구하는 게 간단할 것 같아서 실행했다.<br>\n문제는, <strong>세트는 요소의 순서가 정해져 있지 않다.(unordered)</strong><br>\n그래서 set를 적용하면 원래의 순서에서 홀수만 쏙쏙 뺀 게 아니라 요소 전체가 뒤죽박죽이 된다.</p>\n<h3 id=\"my-solution\" style=\"position:relative;\"><a href=\"#my-solution\" aria-label=\"my solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Solution</h3>\n<ul>\n<li>홀수 요소들만 넣은 list를 새로 만들고, 원본 list 요소들 중 홀수 list에 포함되지 않은 것들만 새로 list를 만들면?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">remove_odd_numbers</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  odd_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  result_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n      odd_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> j <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> odd_list<span class=\"token punctuation\">:</span>\n      result_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> result_list</code></pre></div>\n<h4 id=\"-pass\" style=\"position:relative;\"><a href=\"#-pass\" aria-label=\" pass permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⇒ Pass;</h4>\n<p>그러나 과연 이게 최선일까 하는 생각. 최대한 for문과 if문을 적게 쓰고 싶다.</p>\n<h3 id=\"model-solution\" style=\"position:relative;\"><a href=\"#model-solution\" aria-label=\"model solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model Solution</h3>\n<ul>\n<li>원본 list에서 홀수를 제거하는 게 아니라, 짝수인 것만 뽑는 건?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">remove_odd_numbers</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> numbers <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> numbers</code></pre></div>\n<h4 id=\"-pass-1\" style=\"position:relative;\"><a href=\"#-pass-1\" aria-label=\" pass 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⇒ Pass;</h4>\n<p>홀수인 요소들을 삭제하는 거라고 인식하다보니, 계속 ‘삭제’나 ‘빼기’만 생각했다.<br>\n원본 list에서 짝수인 요소들만 빼내는 게 훨씬 간단한 방법이었는데..<br>\n<strong>답을 구하는 방법을 다양하게 생각해보고, 선입견을 가지지 말고 반대로도 생각해보자.</strong></p>\n<p><strong>그리고 list를 구하고 싶다면, List Comprehensions(리스트 표현식)을 항상 생각하자.</strong></p>\n<h4 id=\"list-comprehension의-기본-형식-item-for-item-in-iterable\" style=\"position:relative;\"><a href=\"#list-comprehension%EC%9D%98-%EA%B8%B0%EB%B3%B8-%ED%98%95%EC%8B%9D-item-for-item-in-iterable\" aria-label=\"list comprehension의 기본 형식 item for item in iterable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>list comprehension의 기본 형식; <em>[item for item in iterable]</em></h4>\n<p>","frontmatter":{"title":"[Python] list에서 홀수인 요소들만 삭제","date":"February 06, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/study/list_element_delete/","previous":{"fields":{"slug":"/study/change_list_element_location/"},"frontmatter":{"title":"[Python] 두 개의 list element 값 위치 바꾸기","category":"python","draft":false}},"next":{"fields":{"slug":"/study/list_tuple_set/"},"frontmatter":{"title":"[Python] list, tuple, set","category":"python","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
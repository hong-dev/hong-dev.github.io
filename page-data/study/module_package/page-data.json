{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/module_package/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"5062a7c6-fd54-5dfe-b119-50cdbf80a048","excerpt":"Modules 변수나 함수, 클래스 등을 모아놓은 파일이다. 따로 모듈로 모아놓는 이유는: 여러 파일들에서 사용 할 수 있도록 하기 위해서 전체 코드를 한 파일에 넣기에는 많고 따로 정리하기 위해서 Module 사용 방법 python 파일(.py)을 만든 후, 함수나 클래스, 변수 등을 구현한다. 다른 파일에서 불러올 때는: case1) : 확장자 .py는 제외하고 파일 이름만 사용한다. case2) : 특정 모듈에서 특정 함수나 변수 등만 import 할 수 있다. case…","html":"<h2 id=\"modules\" style=\"position:relative;\"><a href=\"#modules\" aria-label=\"modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modules</h2>\n<ul>\n<li>변수나 함수, 클래스 등을 모아놓은 파일이다.</li>\n<li>\n<p>따로 모듈로 모아놓는 이유는:</p>\n<ol>\n<li>여러 파일들에서 사용 할 수 있도록 하기 위해서</li>\n<li>전체 코드를 한 파일에 넣기에는 많고 따로 정리하기 위해서</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"module-사용-방법\" style=\"position:relative;\"><a href=\"#module-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"module 사용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module 사용 방법</h3>\n<ul>\n<li>python 파일(.py)을 만든 후, 함수나 클래스, 변수 등을 구현한다.</li>\n<li>\n<p>다른 파일에서 불러올 때는:</p>\n<p><strong>case1)</strong> <code class=\"language-text\">import</code>: 확장자 .py는 제외하고 파일 이름만 사용한다.<br>\n<strong>case2)</strong> <code class=\"language-text\">from-import</code>: 특정 모듈에서 특정 함수나 변수 등만 import 할 수 있다.<br>\n<strong>case3)</strong> <code class=\"language-text\">from-import *</code>: 해당 모듈의 모든 요소가 곧바로 import 된다.<br>\n<strong>case4)</strong> <code class=\"language-text\">(from) import as</code>: 모듈명이나 함수 등 불러오는 것의 이름을 바꿔서 가져올 수 있다.\n여러 모듈을 사용하면 이름 충돌이 있을 수 있고, 원하는 모듈의 이름이 너무 길 수도 있어서 새로운 이름을 주어서 사용할 수 있다.</p>\n</li>\n<li>\n<p>불러온 module을 사용할 때는:</p>\n<p><strong>case1)</strong> module 이름을 dot 앞에 붙이고, 불러오고자 하는 것을 호출한다.<br>\n<strong>case2)</strong> from-import를 사용할 때는 어떤 case든지 module 이름을 붙이지 않고 호출 가능하다.\nmodule에서 사용하는 것이 명확할 때 from import를 사용하면 편리하다.<br>\n<strong>case3)</strong> from-import 방식이므로 모듈명 없이 원하는 것 호출 가능하다.\n그러나 별표*를 사용하는 것은 권장하지 않는다. local scope를 가지고 있는 다른 변수/함수/클래스와 이름 충돌이 있을 수 있기 때문이다.<br>\n<strong>case4)</strong> 새로운 명칭으로 호출한다.\nimport 방식은 모듈명을 붙이고 호출하고, from-import 방식은 모듈명 없이 호출한다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># case1)</span>\n<span class=\"token keyword\">import</span> my_module\n\nmy_module<span class=\"token punctuation\">.</span>my_module_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># case2)</span>\n<span class=\"token keyword\">from</span> my_module <span class=\"token keyword\">import</span> my_module_func<span class=\"token punctuation\">,</span> my_module_var\n\nmy_module_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># case3)</span>\n<span class=\"token keyword\">from</span> my_module <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\nmy_module_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># case4)</span>\n<span class=\"token keyword\">import</span> my_module <span class=\"token keyword\">as</span> m1\n<span class=\"token keyword\">from</span> my_module  <span class=\"token keyword\">import</span> my_func <span class=\"token keyword\">as</span> f1\n<span class=\"token keyword\">from</span> my_module2 <span class=\"token keyword\">import</span> my_func <span class=\"token keyword\">as</span> f2\n\nm1<span class=\"token punctuation\">.</span>my_module_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nf1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nf2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"packages\" style=\"position:relative;\"><a href=\"#packages\" aria-label=\"packages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Packages</h2>\n<ul>\n<li>module보다 더 크고 복잡한 코드 (module은 단순한 python file)</li>\n<li>python files(modules)로 이루어져 있는 directory가 하나의 package가 된다.</li>\n<li>호출 시에는, dot notation을 사용하여 해당 package의 원하는 module을 import 하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pkg<span class=\"token punctuation\">.</span>mod1\n<span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>mod2 <span class=\"token keyword\">import</span> func2</code></pre></div>\n<h3 id=\"package-initialization\" style=\"position:relative;\"><a href=\"#package-initialization\" aria-label=\"package initialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Package Initialization</h3>\n<ul>\n<li>package가 import 될 때 초기 설정을 해줘야 할 때가 있다.<br>\npython은 __init__.py 파일을 통해 package 초기 설정을 가능하게 해준다.<br>\npackage 안에 __init__.py 파일이 있으면 package가 import 될 때 __init__.py 파일의 코드들이 자동으로 실행된다.</li>\n</ul>\n<h3 id=\"__init__py-파일의-역할\" style=\"position:relative;\"><a href=\"#__init__py-%ED%8C%8C%EC%9D%BC%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"__init__py 파일의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>__init__.py 파일의 역할</h3>\n<p><strong>1. Import 할 때 경로의 총 길이 줄여주기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#원래의 방식은 아래처럼 main.py에서 매번 경로를 타입해야한다.</span>\n<span class=\"token keyword\">import</span> pkg<span class=\"token punctuation\">.</span>mod1\n\npkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>func2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#그런데 pkg안에 있는 __init__.py에서 아래처럼 해주면:</span>\n<span class=\"token keyword\">from</span> mod1 <span class=\"token keyword\">import</span> func2\n\n\n<span class=\"token comment\">#main.py에서는 아래처럼 간단히 호출가능:</span>\n<span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> func2\n\nfunc2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>\n<p><strong>2. <code class=\"language-text\">__all__</code> : Package중 import 할 수 있는 변수/함수/클래스 제한하기</strong></p>\n<ul>\n<li>내부적으로만 사용해야 하는 함수도 있을 수 있으니, import 가능한 함수만 정의해준다.</li>\n<li>아래의 경우, 다른 파일에서 func2와 func3는 import 되지만, func4는 __all__에 정의되지 않았으므로 호출하면 error 발생</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># __init__.py에서:</span>\n<span class=\"token keyword\">from</span> mod1 <span class=\"token keyword\">import</span> func2\n<span class=\"token keyword\">from</span> mod2 <span class=\"token keyword\">import</span> func3\n\n__all__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'func2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'func3'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><strong>3. 그 외 package가 import 될 때 꼭 먼저 실행되어야 하는 코드들</strong></p>","frontmatter":{"title":"[Python] Module, Package","date":"February 11, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/study/module_package/","previous":{"fields":{"slug":"/study/codekata_1/"},"frontmatter":{"title":"[CodeKata] 1","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/study/import_modules/"},"frontmatter":{"title":"[Python] How Import statement finds Modules & Packages","category":"python","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
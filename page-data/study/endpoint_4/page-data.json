{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/endpoint_4/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"b9bb093a-40ce-55ec-8283-bac10cb98d10","excerpt":"views.py에서 function 만들기 작성된 models를 가지고 data를 어떻게 가져오고 보내줄지에 대한 로직을 작성한다.  : request.body에 담겨있는 data를 가져와서 python이 알 수 있는 언어로 바꿔준다. dictionary로 나온다. get 함수에서 .objects.values()를 사용하지 않고 for문으로 작성한다면 다음과 같다. get 함수에서 를 사용하여 작성한다면 코드가 훨씬 짧아진다. 다른 메소드들은 값이 object(객체)로 return…","html":"<h2 id=\"viewspy에서-function-만들기\" style=\"position:relative;\"><a href=\"#viewspy%EC%97%90%EC%84%9C-function-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"viewspy에서 function 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>views.py에서 function 만들기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[App 만드는 순서]\nmodels.py ⇒ views.py ⇒ urls.py</code></pre></div>\n<ul>\n<li>\n<p>작성된 models를 가지고 data를 어떻게 가져오고 보내줄지에 대한 로직을 작성한다.</p>\n<ul>\n<li><code class=\"language-text\">json.loads(request.body)</code> : request.body에 담겨있는 data를 가져와서 python이 알 수 있는 언어로 바꿔준다. dictionary로 나온다.</li>\n<li>get 함수에서 .objects.values()를 사용하지 않고 for문으로 작성한다면 다음과 같다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#app_name/views.py</span>\n\n<span class=\"token function\">import</span> json\nfrom .models      <span class=\"token function\">import</span> User   <span class=\"token comment\">#models.py에서 만든 User class(user 정보가 담길 틀)</span>\nfrom django.views <span class=\"token function\">import</span> View\nfrom django.http  <span class=\"token function\">import</span> HttpResponse, JsonResponse   <span class=\"token comment\">#response를 할 때 사용</span>\n\nclass UserView<span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span>:\n    def post<span class=\"token punctuation\">(</span>self, request<span class=\"token punctuation\">)</span>:\n        user_data <span class=\"token operator\">=</span> json.loads<span class=\"token punctuation\">(</span>request.body<span class=\"token punctuation\">)</span>\n        User<span class=\"token punctuation\">(</span>\n            name     <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>,\n            email    <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span>,\n            phone    <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">]</span>,\n            password <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>.save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token builtin class-name\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">'Thank you for signing up!'</span><span class=\"token punctuation\">}</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    \n    def get<span class=\"token punctuation\">(</span>self, request<span class=\"token punctuation\">)</span>:\n        user_data <span class=\"token operator\">=</span> User.objects.all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">users</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">user</span> <span class=\"token keyword\">in</span> user_data:  <span class=\"token comment\">#하나의 객체씩 나온다.</span>\n            users.append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'name'</span>     <span class=\"token builtin class-name\">:</span> user.name,\n                <span class=\"token string\">'email'</span>    <span class=\"token builtin class-name\">:</span> user.email,\n                <span class=\"token string\">'phone'</span>    <span class=\"token builtin class-name\">:</span> user.phone,\n                <span class=\"token string\">'password'</span> <span class=\"token builtin class-name\">:</span> user.passward\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token builtin class-name\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'users'</span>:users<span class=\"token punctuation\">}</span>, status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>get 함수에서 <code class=\"language-text\">.objects.values()</code>를 사용하여 작성한다면 코드가 훨씬 짧아진다.</li>\n<li>다른 메소드들은 값이 object(객체)로 return 되는데, values()는 dictionary로 return 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#app_name/views.py</span>\n\n<span class=\"token function\">import</span> json\nfrom .models      <span class=\"token function\">import</span> User   <span class=\"token comment\">#models.py에서 만든 User class(user 정보가 담길 틀)</span>\nfrom django.views <span class=\"token function\">import</span> View\nfrom django.http  <span class=\"token function\">import</span> HttpResponse, JsonResponse   <span class=\"token comment\">#response를 할 때 사용</span>\n\nclass UserView<span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span>:\n    def post<span class=\"token punctuation\">(</span>self, request<span class=\"token punctuation\">)</span>:\n        user_data <span class=\"token operator\">=</span> json.loads<span class=\"token punctuation\">(</span>request.body<span class=\"token punctuation\">)</span>\n        User<span class=\"token punctuation\">(</span>\n            name     <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>,\n            email    <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span>,\n            phone    <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">]</span>,\n            password <span class=\"token operator\">=</span> user_data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>.save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token builtin class-name\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">'Thank you for signing up!'</span><span class=\"token punctuation\">}</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    \n    def get<span class=\"token punctuation\">(</span>self, request<span class=\"token punctuation\">)</span>:\n        account_data <span class=\"token operator\">=</span> Account.objects.values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'accounts'</span>:list<span class=\"token punctuation\">(</span>account_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"post-vs-get\" style=\"position:relative;\"><a href=\"#post-vs-get\" aria-label=\"post vs get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>post vs get</h3>\n<ul>\n<li><code class=\"language-text\">post</code>는 사용자가 data를 request에 담아서 주면, 그걸 가지고 뭔가를 처리할 때</li>\n<li><code class=\"language-text\">get</code>은 request에 data를 넣어주지 않는다. 그냥 기존에 있는 db의 data 가지고 뭔가를 처리할 때</li>\n<li>로그인 기능은 post method!<br>\n사용자가 data를 request에 담아서 주면, 그 정보를 가지고 일치하는지 처리하는 과정이기 때문이다.</li>\n</ul>","frontmatter":{"title":"[Django] Create Endpoint(4); sign-up, log-in, comments","date":"February 15, 2020","category":"django","thumbnail":null}}},"pageContext":{"slug":"/study/endpoint_4/","previous":{"fields":{"slug":"/study/endpoint_3/"},"frontmatter":{"title":"[Django] Create Endpoint(3); sign-up, log-in, comments","category":"django","draft":false}},"next":{"fields":{"slug":"/study/endpoint_5/"},"frontmatter":{"title":"[Django] Create Endpoint(5); sign-up, log-in, comments","category":"django","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/models/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"ee7ce115-14ad-5f88-a13b-d945562167a1","excerpt":"modeling_aquerytool conda 가상환경 생성 ⇒ startproject ⇒ startapp ⇒ app의 models.py 작성 1) 화살표를 받는 요소들을 먼저 class 생성하는 것이 좋다. 참조할 것이 있는 요소를 먼저 생성하면, 참조할 대상이 아직 만들어져 있지 않기 때문이다.  이런 방식으로 quotation(”) 처리를 하면, class 순서상 아래에 있어도 찾아서 해준다. quotation marks를 안 붙이면 import 된 class…","html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Starbucks 메뉴 modeling 하기\n**Modeling 설계 한 것 django app에 models.py에 적용하기</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/53142539/77428924-37a63300-6e1c-11ea-8549-680be3aaeaa1.png\" alt=\"modeling_aquerytool\"></p>\n<ul>\n<li>conda 가상환경 생성 ⇒ startproject ⇒ startapp ⇒ app의 models.py 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># starbucks/models.py</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MainCategory</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> \n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'maincategories'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubCategory</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name          <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> \n    main_category <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'MainCategory'</span><span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>SET_NULL<span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'subcategories'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    size <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> \n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'sizes'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductSize</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    product <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Product'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>SET_NULL<span class=\"token punctuation\">,</span> null <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    size    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Size'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>SET_NULL<span class=\"token punctuation\">,</span> null <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'product_sizes'</span>\n  \n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    main_category <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'MainCategory'</span><span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>SET_NULL<span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>    \n    sub_category  <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'SubCategory'</span><span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>SET_NULL<span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    name          <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> \n    description   <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'good!'</span><span class=\"token punctuation\">)</span>\n    image         <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>URLField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">)</span>\n    size          <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span><span class=\"token string\">'Size'</span><span class=\"token punctuation\">,</span> through <span class=\"token operator\">=</span> <span class=\"token string\">'ProductSize'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'products'</span></code></pre></div>\n<h3 id=\"1-화살표를-받는-요소들을-먼저-class-생성하는-것이-좋다\" style=\"position:relative;\"><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C%EB%A5%BC-%EB%B0%9B%EB%8A%94-%EC%9A%94%EC%86%8C%EB%93%A4%EC%9D%84-%EB%A8%BC%EC%A0%80-class-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%A2%8B%EB%8B%A4\" aria-label=\"1 화살표를 받는 요소들을 먼저 class 생성하는 것이 좋다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 화살표를 받는 요소들을 먼저 class 생성하는 것이 좋다.</h3>\n<ul>\n<li>참조할 것이 있는 요소를 먼저 생성하면, 참조할 대상이 아직 만들어져 있지 않기 때문이다.</li>\n<li><code class=\"language-text\">ForeignKey('class')</code> 이런 방식으로 quotation(”) 처리를 하면, class 순서상 아래에 있어도 찾아서 해준다. quotation marks를 안 붙이면 import 된 class나, 이것보다 위에 있는 class만 가져올 수 있다. 이건 선언적인 표현으로, 붙여놓으면 순서로 인한 문제는 신경쓰지 않아도 된다.</li>\n</ul>\n<h3 id=\"2-class-field의-max_length\" style=\"position:relative;\"><a href=\"#2-class-field%EC%9D%98-max_length\" aria-label=\"2 class field의 max_length permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) class field의 max_length</h3>\n<ul>\n<li>실제로 max를 체크해주는 것은 아니다. 이 길이가 넘어가도 data가 입력된다. 그냥 보기에 이 field에서 내가 어느정도 길이의 data를 받겠다라고 말해주는 것일 뿐이다.</li>\n</ul>\n<h3 id=\"3-foreignkey-적용시-field명-뒤에-자동으로-장고가-_id를-넣어준다\" style=\"position:relative;\"><a href=\"#3-foreignkey-%EC%A0%81%EC%9A%A9%EC%8B%9C-field%EB%AA%85-%EB%92%A4%EC%97%90-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EC%9E%A5%EA%B3%A0%EA%B0%80-_id%EB%A5%BC-%EB%84%A3%EC%96%B4%EC%A4%80%EB%8B%A4\" aria-label=\"3 foreignkey 적용시 field명 뒤에 자동으로 장고가 _id를 넣어준다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) ForeignKey 적용시, field명 뒤에 자동으로 장고가 _id를 넣어준다.</h3>\n<ul>\n<li>main<em>category</em>id 처럼 넣어버리면 table의 최종 field명이 main<em>category</em>id_id 가 된다.</li>\n</ul>\n<h3 id=\"4-foreignkey-적용시-on_delete는-필수\" style=\"position:relative;\"><a href=\"#4-foreignkey-%EC%A0%81%EC%9A%A9%EC%8B%9C-on_delete%EB%8A%94-%ED%95%84%EC%88%98\" aria-label=\"4 foreignkey 적용시 on_delete는 필수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) ForeignKey 적용시, on_delete는 필수</h3>\n<ul>\n<li>on_delete는 참조하는 것이 지워지면 같이 지워질 것인지를 알려준다.</li>\n<li>CASCADE : 참조값이 지워지면 나도 지워진다. (연관된 것을 다같이 지울 때)</li>\n<li>SET_NULL : 참조값이 지워져도 나는 null로 세팅된다.</li>\n<li>NO ACTION : 참조값이 지워져도 나는 변동없이 남아있는다.</li>\n<li>RESTRICT : 참조값을 변경/삭제하려 하면 실행이 제한된다.</li>\n</ul>\n<h3 id=\"5-null--true\" style=\"position:relative;\"><a href=\"#5-null--true\" aria-label=\"5 null  true permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) null = True</h3>\n<ul>\n<li>해당 field가 null 값이어도 되는가(True) 안되는가(False)</li>\n<li>ManytoMany일 경우에는 null = True가 의미가 없다.</li>\n<li>모든 field가 null = True의 옵션을 가질 수 있다. (Primary key는 제외. 무조건 있어야 한다.)</li>\n<li>null = True를 안 넣었는데, 값을 할당해주지 않으면 에러가 난다.</li>\n</ul>\n<hr>\n<p>models.py에서 table들을 만드는 것을 끝났다! (makemigrations, migrate 해주는 것 잊지 말고!)<br>\n실제 data가 아직 없으니 data를 직접 넣어보자.</p>\n<h2 id=\"python-shell로-data-넣기\" style=\"position:relative;\"><a href=\"#python-shell%EB%A1%9C-data-%EB%84%A3%EA%B8%B0\" aria-label=\"python shell로 data 넣기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Shell로 Data 넣기</h2>\n<ul>\n<li>mysql에서도 data를 넣을 수 있지만, django에서 하는 것이 훨씬 편하고 쉽다.</li>\n<li>\n<p>product.models의 class들을 *로 다 import 했다.</p>\n<p>근데 class가 20개 넘어갈 때나 쓰고, 웬만하면 지양하자. <code class=\"language-text\">import *</code> 가 좋은 것만은 아니다.</p>\n</li>\n<li>Data 입력방법: <code class=\"language-text\">ClassName(name='a').save()</code>, <code class=\"language-text\">ClassName.objects.create(name='a')</code></li>\n<li>Bulk create : 여러 개의 data를 같이 넣어야 할 때 사용한다. 여러번 쿼리를 수행하는 것보다 한번 쿼리를 수행할 때 여러 개의 data를 넣는 것이 로드가 덜 걸리고 효율이 좋다. 여기에서는 다루지 않았다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># python manage.py shell</span>\n\n<span class=\"token keyword\">from</span> product<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\nMainCategory<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'음료'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#data 입력 방법 1</span>\nSubCategory<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'콜드브루'</span><span class=\"token punctuation\">,</span> main_category_id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#data 입력 방법 2</span></code></pre></div>\n<h3 id=\"create-할-때-직접-값을-넣어주는-방법과-객체를-참조하여-넣어주는-방법\" style=\"position:relative;\"><a href=\"#create-%ED%95%A0-%EB%95%8C-%EC%A7%81%EC%A0%91-%EA%B0%92%EC%9D%84-%EB%84%A3%EC%96%B4%EC%A3%BC%EB%8A%94-%EB%B0%A9%EB%B2%95%EA%B3%BC-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%B0%B8%EC%A1%B0%ED%95%98%EC%97%AC-%EB%84%A3%EC%96%B4%EC%A3%BC%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"create 할 때 직접 값을 넣어주는 방법과 객체를 참조하여 넣어주는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create 할 때, 직접 값을 넣어주는 방법과 객체를 참조하여 넣어주는 방법</h3>\n<h4 id=\"1-직접-값-넣기\" style=\"position:relative;\"><a href=\"#1-%EC%A7%81%EC%A0%91-%EA%B0%92-%EB%84%A3%EA%B8%B0\" aria-label=\"1 직접 값 넣기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 직접 값 넣기</h4>\n<p>-<code class=\"language-text\">main_category_id=1</code> 의 형식으로 작성</p>\n<p>-field로 값으로 바로 direct 적용한다.</p>\n<h4 id=\"2-객체-참조하여-넣기\" style=\"position:relative;\"><a href=\"#2-%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0%ED%95%98%EC%97%AC-%EB%84%A3%EA%B8%B0\" aria-label=\"2 객체 참조하여 넣기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 객체 참조하여 넣기</h4>\n<p>-<code class=\"language-text\">main_category=MatinCategory.objects.get(id=1)</code> 의 형식으로 작성</p>\n<p>-객체를 넣어주면 어짜피 foreignkey는 id 참조니까 장고가 알아서 해준다.</p>\n<p>-MySQL에서는 이런 객체참조의 방식으로 data 넣는 것은 절대 못한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 값을 바로 적용</span>\nSubCategory<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'콜드브루'</span><span class=\"token punctuation\">,</span> main_category_id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n\n<span class=\"token comment\"># 객체참조</span>\nSubCategory<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'콜드브루'</span><span class=\"token punctuation\">,</span> main_category<span class=\"token operator\">=</span>MainCategory<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>-이런 식으로 하면 방금 만든 객체를 변수에 넣어서 객체참조로 넣을 수 있지!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> Resume<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#resume의 새 객체를 변수에 넣고.</span>\na<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">#save 해서 만들어주고.</span>\nCareer<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> resume<span class=\"token operator\">=</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#career의 새 객체를 resume 객체 참조로 생성</span>\n\na <span class=\"token operator\">=</span> Resume<span class=\"token punctuation\">.</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#resume의 새 객체를 만들어서 변수에 넣고.</span>\nCareer<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> resume<span class=\"token operator\">=</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#career의 새 객체를 resume 객체 참조로 생성</span></code></pre></div>\n<p>-주의할 점! 변수에 넣을 때 save까지 하면 안 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> Resume<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#이건 a에 남겨지지 않아! a에 return이 없어!</span></code></pre></div>\n<h3 id=\"field-lookup__\" style=\"position:relative;\"><a href=\"#field-lookup__\" aria-label=\"field lookup__ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Field Lookup(__)</h3>\n<ul>\n<li>select_related와는 상관없이 값을 다 불러올 수 있는 방식</li>\n<li>여기서 field 호출할 때는 table name 소문자로 호출한다.</li>\n<li>정참이든 역참이든 참조관계가 뭐라도 있으면 다 된다. depth도 상관없이 참조 가능.<br>\nForeignKey가 있어야 한다는 말이지.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">City<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'store__subcity__name'</span><span class=\"token punctuation\">)</span>\nSubCity<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'city__name'</span><span class=\"token punctuation\">)</span>\nCity<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'store__name'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 만약에 city와 store에 관계가 없으면 안된다!</span></code></pre></div>\n<h3 id=\"for문으로-data-넣기\" style=\"position:relative;\"><a href=\"#for%EB%AC%B8%EC%9C%BC%EB%A1%9C-data-%EB%84%A3%EA%B8%B0\" aria-label=\"for문으로 data 넣기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For문으로 data 넣기</h3>\n<ul>\n<li>처음 data 넣을 때 못 넣었으면 나중에 한꺼번에 넣을 수도 있다.</li>\n<li>product data를 for문으로 하나하나 돌려서 size(foreignkey이므로 field명은 size_id가 될 것)에 값을 부여하고 save 해준다.</li>\n<li>하기 내용은 통일된 수정일 때 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> Product<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    i<span class=\"token punctuation\">.</span>size<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n    i<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"manytomany-field-값-연결하기\" style=\"position:relative;\"><a href=\"#manytomany-field-%EA%B0%92-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"manytomany field 값 연결하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ManyToMany Field 값 연결하기</h3>\n<ul>\n<li>data를 넣을 때 <code class=\"language-text\">ManyToManyField</code>는 입력하지 않았다.</li>\n<li>해당 product 객체의 category에 add로 size 각각을 넣어준다.</li>\n<li>Product에 ManyToMany Field(아래의 예시에서는 size field)는 생성되지 않는다.<br>\n왜냐? Product는 size를 참조하지 않기 때문! add하면 중간 테이블(ProductSize)에만 data가 입력될 뿐이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> product1 <span class=\"token operator\">=</span> Product<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> product1\n<span class=\"token operator\">&lt;</span>Product<span class=\"token punctuation\">:</span> Product <span class=\"token builtin\">object</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> product1<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Size<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Size<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ProductAllergy<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'product_id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'size_id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'product_id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'size_id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>","frontmatter":{"title":"[Modeling] Django models.py에 적용하기","date":"February 20, 2020","category":"django","thumbnail":null}}},"pageContext":{"slug":"/study/models/","previous":{"fields":{"slug":"/error/module_not_found/"},"frontmatter":{"title":"ModuleNotFoundError","category":"error","draft":false}},"next":{"fields":{"slug":"/study/codekata_6/"},"frontmatter":{"title":"[CodeKata] 6","category":"algorithm","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
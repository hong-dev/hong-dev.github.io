{"componentChunkName":"component---src-templates-blog-post-js","path":"/vibe/social_login_unittest/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"60d8cc11-16dc-510a-bd10-2babfa88f00f","excerpt":"Naver Social Login original API code Unit test Django에서는 Unit test를 위한 모듈을 제공하고 있다. startapp을 만들면 자동으로 생성되는 에 작성하고, test를 실행할 때는 로 모든 test를 돌려볼 수 있다.\n모든 api를 직접 request/response를 보내볼 수 없기 때문에, unit test는 runserver를 하지 않아도 test 가능하도록 만드는 것이 목적이다. Mocking…","html":"<h4 id=\"naver-social-login-original-api-code\" style=\"position:relative;\"><a href=\"#naver-social-login-original-api-code\" aria-label=\"naver social login original api code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"http://hong-dev.github.io/posts/project_vibe/naver_social_login\">Naver Social Login original API code</a></h4>\n<h3 id=\"unit-test\" style=\"position:relative;\"><a href=\"#unit-test\" aria-label=\"unit test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unit test</h3>\n<p>Django에서는 Unit test를 위한 모듈을 제공하고 있다.<br>\nstartapp을 만들면 자동으로 생성되는 <code class=\"language-text\">tests.py</code>에 작성하고,<br>\ntest를 실행할 때는 <code class=\"language-text\">python manage.py test</code>로 모든 test를 돌려볼 수 있다.\n모든 api를 직접 request/response를 보내볼 수 없기 때문에, unit test는 runserver를 하지 않아도 test 가능하도록 만드는 것이 목적이다.</p>\n<h3 id=\"mocking\" style=\"position:relative;\"><a href=\"#mocking\" aria-label=\"mocking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mocking</h3>\n<p>소셜 로그인을 실행하려면 해당 소셜 사이트와의 api request와 response가 있어야 하는데, unit test는 요청을 보내지 않고 테스트를 해야하므로 mock data로 테스트를 진행한다.</p>\n<ul>\n<li><code class=\"language-text\">@patch()</code> : 괄호 안에 있는 것을 중간에서 바꿔치기 하겠다는 의미<br>\n아래의 경우에는 user/views.py에 있는 requests를 mock data로 대체하겠다는 것</li>\n<li><code class=\"language-text\">MagicMock(return_value)</code> : return_value에 해당하는 값으로 mocking 하겠다는 의미<br>\n아래의 경우에는 request.get을 return_value값으로 대체하겠다는 것</li>\n</ul>\n<h3 id=\"http_authorization\" style=\"position:relative;\"><a href=\"#http_authorization\" aria-label=\"http_authorization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP_Authorization</h3>\n<ul>\n<li>unittest에서는 그냥 Authorization으로 적으면 작동을 안하고, HTTP_Authorization으로 적어야 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># user/tests.py</span>\n\n<span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> patch<span class=\"token punctuation\">,</span> MagicMock\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NaverSignInTest</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    client <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Theme<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>\n            <span class=\"token builtin\">id</span>   <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            name <span class=\"token operator\">=</span> <span class=\"token string\">\"기본테마\"</span>\n        <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Theme<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@patch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.views.requests'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_user_signin_success</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mocked_request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">NaverResponse</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">def</span> <span class=\"token function\">json</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"resultcode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"00\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"response\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">\"nickname\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"test_nickname\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">\"profile_image\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"test_image\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"20-29\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"F\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"12345678\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"test_name\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">\"birthday\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10-11\"</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n        mocked_request<span class=\"token punctuation\">.</span>get <span class=\"token operator\">=</span> MagicMock<span class=\"token punctuation\">(</span>return_value <span class=\"token operator\">=</span> NaverResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        client <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        header <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'HTTP_Authorization'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'naver_token'</span><span class=\"token punctuation\">}</span>\n        response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'/user/naver_auth'</span><span class=\"token punctuation\">,</span> content_type <span class=\"token operator\">=</span> <span class=\"token string\">'applications/json'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>header<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_user_signin_post_fail</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        client   <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        header   <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'No_Authorizaeion'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'1234'</span><span class=\"token punctuation\">}</span>\n        response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'/user/naver_auth'</span><span class=\"token punctuation\">,</span> content_type<span class=\"token operator\">=</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>header<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">405</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Unit test : Naver Social Log-in","date":"March 25, 2020","category":"django","thumbnail":null}}},"pageContext":{"slug":"/vibe/social_login_unittest/","previous":{"fields":{"slug":"/vibe/naver_social_login/"},"frontmatter":{"title":"Naver Social Log-in","category":"python","draft":false}},"next":{"fields":{"slug":"/gopizza/timedelta/"},"frontmatter":{"title":"Timedelta를 사용하여 period range 설정","category":"python","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/vibe/streaming/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"b3bfee13-013c-5531-ac54-53d88fa9a6cd","excerpt":"MEDIA_ROOT 프로젝트 settings.py에서 파일이 있는 경로를 MEDIA_URL로 표시해준다. StreamingHttpResponse django에서 HttpResponse, JsonResponse 말고 StreamingHttpResponse를 import 한다. data 읽어오기  : open할 파일경로, 파일 모드, 인코딩 방식 등을 지정할 수 있다. 파일 모드  : 읽기 (default…","html":"<h3 id=\"media_root\" style=\"position:relative;\"><a href=\"#media_root\" aria-label=\"media_root permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MEDIA_ROOT</h3>\n<ul>\n<li>프로젝트 settings.py에서 파일이 있는 경로를 MEDIA_URL로 표시해준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># vibe/settings.py</span>\n\nMEDIA_URL <span class=\"token operator\">=</span> <span class=\"token string\">'./stream/'</span>\nMEDIA_ROOT<span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"media_root\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"streaminghttpresponse\" style=\"position:relative;\"><a href=\"#streaminghttpresponse\" aria-label=\"streaminghttpresponse permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>StreamingHttpResponse</h3>\n<ul>\n<li>django에서 HttpResponse, JsonResponse 말고 StreamingHttpResponse를 import 한다.</li>\n</ul>\n<h3 id=\"data-읽어오기\" style=\"position:relative;\"><a href=\"#data-%EC%9D%BD%EC%96%B4%EC%98%A4%EA%B8%B0\" aria-label=\"data 읽어오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>data 읽어오기</h3>\n<ul>\n<li><code class=\"language-text\">open(file_path, mode, encoding)</code> : open할 파일경로, 파일 모드, 인코딩 방식 등을 지정할 수 있다.</li>\n</ul>\n<h4 id=\"파일-모드\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EB%AA%A8%EB%93%9C\" aria-label=\"파일 모드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 모드</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">r</code> : 읽기 (default)</p>\n<p>\n</li>\n<li><code class=\"language-text\">w</code> : 쓰기 (파일이 있으면 모든 내용 삭제)</li>\n<li><code class=\"language-text\">x</code> : 쓰기 (파일이 있으면 오류 발생)</li>\n<li>\n<p><code class=\"language-text\">a</code> : 쓰기 (파일이 있으면 뒤에 내용을 추가)</p>\n<p>\n</li>\n<li>\n<p><code class=\"language-text\">+</code> : 읽기쓰기</p>\n<p>\n</li>\n<li><code class=\"language-text\">t</code> : 텍스트 모드 (default)</li>\n<li><code class=\"language-text\">b</code> : 바이너리 모드</li>\n</ul>\n<h3 id=\"content-disposition\" style=\"position:relative;\"><a href=\"#content-disposition\" aria-label=\"content disposition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Content-Disposition</h3>\n<ul>\n<li>Unit test를 위해 filename을 적어두었다.<br>\n내 짧은 지식으로는 스트리밍 기능을 어떻게 유닛테스트를 돌려야할 지 도저히 판단이 안 섰기 때문에, filename과 content-length로 테스트를 구현했다.</li>\n</ul>\n<h3 id=\"accept-ranges--content-length\" style=\"position:relative;\"><a href=\"#accept-ranges--content-length\" aria-label=\"accept ranges  content length permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Accept-Ranges / Content-Length</h3>\n<ul>\n<li>스트리밍 방식으로 음악은 보내줬지만, 중간을 클릭해서 중간부터 듣는 seek 기능(오디오 탐색 기능)이 작동이 안 되었다.<br>\n특이한 점은 Firefox에서는 작동이 되는데 Chrome에서는 되지 않았다.</li>\n<li><code class=\"language-text\">HTTP Range Requests</code> : HTTP Response Headers에 <code class=\"language-text\">Accept-Ranges</code> 항목이 있으면 해당 서버가 range 요청을 지원하는 상태인 것이다.</li>\n<li>Chrome의 경우에는 Accept-Ranges를 추가해서 작성했더니 정상적으로 오디오 탐색이 가능해졌다.<br>\n다만, Content-Length도 필요했다. 재생 길이를 알아야 range가 성립되는 것일까? 왜인지는 좀 더 고민해봐야 할 문제다.</li>\n</ul>\n<h3 id=\"duration재생시간\" style=\"position:relative;\"><a href=\"#duration%EC%9E%AC%EC%83%9D%EC%8B%9C%EA%B0%84\" aria-label=\"duration재생시간 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Duration(재생시간)</h3>\n<ul>\n<li>노래마다 재생시간이 있는데, front-end에서 발견한 바로는 Safari에서는 재생시간이 안 나오는데, Chrome에서는 자동으로 재생시간을 받을 수 있었다고 한다.<br>\n이 프로젝트의 경우에는 Chrome으로 진행해서 별 문제가 없었지만, 브라우저마다 다르게 적용되는 것들도 체크할 필요가 있겠다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># music/views.py</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse<span class=\"token punctuation\">,</span> StreamingHttpResponse\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MusicStreamView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> music_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            music    <span class=\"token operator\">=</span> Music<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> music_id<span class=\"token punctuation\">)</span>\n            content  <span class=\"token operator\">=</span> MEDIA_URL <span class=\"token operator\">+</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>music_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">.mp3\"</span></span>\n            response <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span>       <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'filename = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>music_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">.mp3'</span></span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>        <span class=\"token operator\">=</span> <span class=\"token string\">'audio/mp3'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">]</span>      <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Accept-Ranges'</span><span class=\"token punctuation\">]</span>       <span class=\"token operator\">=</span> <span class=\"token string\">'bytes'</span>\n            <span class=\"token keyword\">return</span> response\n\n        <span class=\"token keyword\">except</span> Music<span class=\"token punctuation\">.</span>DoesNotExist<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"MUSIC_DOES_NOT_EXIST\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">except</span> FileNotFoundError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"FILE_DOES_NOT_EXIST\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> music<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                read_music <span class=\"token operator\">=</span> music<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> read_music<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">yield</span> read_music\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span></code></pre></div>\n<hr>\n<p><strong>Reference:</strong><br>\n<a href=\"https://nachwon.github.io/byterange/\">[SoundHub] HTTP Range Requests</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests\">MDN: Range-Requests</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range\">MDN: Range</a></p>","frontmatter":{"title":"Audio 파일 streaming 방식으로 내보내기","date":"March 20, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/vibe/streaming/","previous":{"fields":{"slug":"/study/flow/"},"frontmatter":{"title":"git flow","category":"concepts","draft":false}},"next":{"fields":{"slug":"/vibe/retrospective/"},"frontmatter":{"title":"[VIBE Clone] Retrospective","category":"project","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
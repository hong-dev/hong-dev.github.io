{"componentChunkName":"component---src-templates-blog-post-js","path":"/gopizza/dataframe/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"2fdaad7d-03d5-5c18-9309-d52b51ca5fec","excerpt":"User별 점수 Ranking View Filter 아래의 filter를 front에서 query string으로 받아서 처리 Dataframe pandas.DataFrame으로 정규화하기 모든 user data를 dataframe으로 만든 다음, dataframe 안에서 order_by로 정렬을 하고, limit로 top 몇 순위까지 보여줄 것인지 잘라서 넘긴다. Annotate User별로 가진 score 정보들의 평균, 총합 등을 계산해서 return하기 위해 annotate…","html":"<h3 id=\"user별-점수-ranking-view\" style=\"position:relative;\"><a href=\"#user%EB%B3%84-%EC%A0%90%EC%88%98-ranking-view\" aria-label=\"user별 점수 ranking view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User별 점수 Ranking View</h3>\n<h3 id=\"filter\" style=\"position:relative;\"><a href=\"#filter\" aria-label=\"filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter</h3>\n<ul>\n<li>아래의 filter를 front에서 query string으로 받아서 처리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1) limit : 몇 순위까지 보여줄 것인지 선택\n2) time_delta : 최근 얼마간의 data를 보여줄 것인지 선택\n3) pizza_id : 피자별로 선택\n4) order_by : 어떤 기준으로 순위를 보여줄 것인지 선택\n   - total_count => 누적 판수 기준\n   - average_time => 평균 시간 기준\n   - shortest_time => 최단 시간 기준\n   - completion_score => 완성도 기준\n   - total_score => 위의 4개를 합친 총점 기준</code></pre></div>\n<br>\n<h3 id=\"dataframe\" style=\"position:relative;\"><a href=\"#dataframe\" aria-label=\"dataframe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dataframe</h3>\n<ul>\n<li><a href=\"https://hong-dev.github.io/posts/project_wepizza/normalization\">pandas.DataFrame으로 정규화하기</a></li>\n<li>모든 user data를 dataframe으로 만든 다음, dataframe 안에서 order_by로 정렬을 하고, limit로 top 몇 순위까지 보여줄 것인지 잘라서 넘긴다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> MinMaxScaler\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_ranking</span><span class=\"token punctuation\">(</span>ranking_list<span class=\"token punctuation\">,</span> order_by<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    completion_importance<span class=\"token punctuation\">,</span> time_importance<span class=\"token punctuation\">,</span> count_importance <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span>\n\n    scores <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"completion_score\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>rank<span class=\"token punctuation\">.</span>completion_score <span class=\"token keyword\">for</span> rank <span class=\"token keyword\">in</span> ranking_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"time_score\"</span>       <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>rank<span class=\"token punctuation\">.</span>average_time <span class=\"token keyword\">for</span> rank <span class=\"token keyword\">in</span> ranking_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"count_score\"</span>      <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>rank<span class=\"token punctuation\">.</span>total_count <span class=\"token keyword\">for</span> rank <span class=\"token keyword\">in</span> ranking_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    scores<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MinMaxScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    total_score <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        scores<span class=\"token punctuation\">.</span>completion_score <span class=\"token operator\">*</span> completion_importance\n        <span class=\"token operator\">+</span> scores<span class=\"token punctuation\">.</span>time_score <span class=\"token operator\">*</span> time_importance\n        <span class=\"token operator\">+</span> scores<span class=\"token punctuation\">.</span>count_score <span class=\"token operator\">*</span> count_importance\n    <span class=\"token punctuation\">)</span>\n\n    rank_table <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>ranking_list<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    rank_table<span class=\"token punctuation\">[</span><span class=\"token string\">'total_score'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> total_score\n\n    ascending <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">if</span> order_by <span class=\"token operator\">==</span> <span class=\"token string\">'average_time'</span> <span class=\"token keyword\">or</span> order_by <span class=\"token operator\">==</span> <span class=\"token string\">'shortest_time'</span>\n        <span class=\"token keyword\">else</span> <span class=\"token boolean\">False</span>\n    <span class=\"token punctuation\">)</span>\n    ordered_table <span class=\"token operator\">=</span> rank_table<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>order_by<span class=\"token punctuation\">,</span> ascending <span class=\"token operator\">=</span> ascending<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>limit<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> ordered_table</code></pre></div>\n<br>\n<h3 id=\"annotate\" style=\"position:relative;\"><a href=\"#annotate\" aria-label=\"annotate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Annotate</h3>\n<ul>\n<li>\n<p>User별로 가진 score 정보들의 평균, 총합 등을 계산해서 return하기 위해 annotate 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>annotate<span class=\"token punctuation\">(</span>total_count <span class=\"token operator\">=</span> Count<span class=\"token punctuation\">(</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"dataframe에서-값-추출\" style=\"position:relative;\"><a href=\"#dataframe%EC%97%90%EC%84%9C-%EA%B0%92-%EC%B6%94%EC%B6%9C\" aria-label=\"dataframe에서 값 추출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataFrame에서 값 추출</h3>\n<ul>\n<li>\n<p>dataframe의 id 필드의 값이 1이다</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">dataframe<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></code></pre></div>\n</li>\n<li>\n<p>dataframe에서 위의 조건을 적용한 row의 total_score 가져오기</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">dataframe<span class=\"token punctuation\">[</span>dataframe<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'total_score'</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>위의 방법으로 return하면 dataframe 형태로 return이 되어서, 해당 값(total_score)만 가져오도록 float 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>dataframe<span class=\"token punctuation\">[</span>dataframe<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'total_score'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"list-comprehension에서-짧은-변수명으로-바꾸기\" style=\"position:relative;\"><a href=\"#list-comprehension%EC%97%90%EC%84%9C-%EC%A7%A7%EC%9D%80-%EB%B3%80%EC%88%98%EB%AA%85%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"list comprehension에서 짧은 변수명으로 바꾸기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List Comprehension에서 짧은 변수명으로 바꾸기</h3>\n<ul>\n<li>\n<p><strong>original 방법</strong><br>\ndictionary에서 값을 적을 때, 전체 변수명을 다 적어줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"key\"</span> <span class=\"token punctuation\">:</span> ranking_list<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> id_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> ranking_list<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> id_number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> dataframe<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p><strong>변수명 바꾸기 (<code class=\"language-text\">if :=</code>)</strong><br>\nranking_list.get(id = id_number)라는 변수를 user에 새로 할당해줘서 변수명 ‘user’를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"key\"</span> <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> id_number <span class=\"token keyword\">in</span> dataframe\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> ranking_list<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> id_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"br\" style=\"position:relative;\"><a href=\"#br\" aria-label=\"br permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><br></h2>\n<h3 id=\"userrankview-source-code\" style=\"position:relative;\"><a href=\"#userrankview-source-code\" aria-label=\"userrankview source code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UserRankView Source Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Sum<span class=\"token punctuation\">,</span> Avg<span class=\"token punctuation\">,</span> Min<span class=\"token punctuation\">,</span> Count\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRankView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Thinking_2</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        limit      <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'limit'</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        pizza_id   <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'pizza_id'</span><span class=\"token punctuation\">)</span>\n        order_by   <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'order_by'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'total_score'</span><span class=\"token punctuation\">)</span>\n        time_delta <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'time_delta'</span><span class=\"token punctuation\">)</span>\n\n        ranking_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n            User\n            <span class=\"token punctuation\">.</span>objects\n            <span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>get_filter_condition<span class=\"token punctuation\">(</span>pizza_id<span class=\"token punctuation\">,</span> time_delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>select_related<span class=\"token punctuation\">(</span><span class=\"token string\">'store'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>prefetch_related<span class=\"token punctuation\">(</span><span class=\"token string\">'score_set'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>annotate<span class=\"token punctuation\">(</span>\n                total_count      <span class=\"token operator\">=</span> Count<span class=\"token punctuation\">(</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                average_time     <span class=\"token operator\">=</span> Avg<span class=\"token punctuation\">(</span><span class=\"token string\">'score__time'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                shortest_time    <span class=\"token operator\">=</span> Min<span class=\"token punctuation\">(</span><span class=\"token string\">'score__time'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                average_quality  <span class=\"token operator\">=</span> Avg<span class=\"token punctuation\">(</span><span class=\"token string\">'score__quality'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                average_sauce    <span class=\"token operator\">=</span> Avg<span class=\"token punctuation\">(</span><span class=\"token string\">'score__sauce'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                average_cheese   <span class=\"token operator\">=</span> Avg<span class=\"token punctuation\">(</span><span class=\"token string\">'score__cheese'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                average_topping  <span class=\"token operator\">=</span> Avg<span class=\"token punctuation\">(</span><span class=\"token string\">'score__topping'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                completion_score <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token punctuation\">[</span>\n                        Avg<span class=\"token punctuation\">(</span><span class=\"token string\">'score__quality'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        Avg<span class=\"token punctuation\">(</span><span class=\"token string\">'score__sauce'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        Avg<span class=\"token punctuation\">(</span><span class=\"token string\">'score__cheese'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        Avg<span class=\"token punctuation\">(</span><span class=\"token string\">'score__topping'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">]</span>  <span class=\"token comment\">#Thinking_1</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        ordered_table <span class=\"token operator\">=</span> get_ranking<span class=\"token punctuation\">(</span>ranking_list<span class=\"token punctuation\">,</span> order_by<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        user_ranking <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"id\"</span>               <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"name\"</span>             <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"image\"</span>            <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"store_id\"</span>         <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>store_id<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"store_name\"</span>       <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"count\"</span>            <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>total_count<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"average_time\"</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>average_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"shortest_time\"</span>    <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>shortest_time<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"quality\"</span>          <span class=\"token punctuation\">:</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>average_quality<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"sauce\"</span>            <span class=\"token punctuation\">:</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>average_sauce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"cheese\"</span>           <span class=\"token punctuation\">:</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>average_cheese<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"topping\"</span>          <span class=\"token punctuation\">:</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>average_topping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"completion_score\"</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>completion_score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"total_score\"</span>      <span class=\"token punctuation\">:</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>ordered_table<span class=\"token punctuation\">[</span>ordered_table<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'total_score'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> id_number <span class=\"token keyword\">in</span> ordered_table<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> ranking_list<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> id_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"ranking\"</span> <span class=\"token punctuation\">:</span> user_ranking<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h3 id=\"thinking\" style=\"position:relative;\"><a href=\"#thinking\" aria-label=\"thinking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thinking</h3>\n<ul>\n<li><strong>Thinking_1 :</strong> annotate로 만든 average field들을 또 사용해서 계산하고 싶을 때, annotate 안에서는 방금 만든 field를 그대로 사용할 수가 없다.<br>\n그래서 어쩔 수 없이 average 계산을 또 해서 sum으로 묶어야 했다.<br>\nannotate 안에 계산식이 중복으로 들어가야 하는게 매우 비효율적이다.</li>\n<li><strong>Thinking_2 :</strong> UserRankView와 똑같은 구조의 StoreRankView가 있다.<br>\nfilter와 계산식이 똑같지만, user별로 보여주느냐 store별로 ranking을 보여주느냐에 따라 나뉜다.<br>\n중복이 많아서 하나의 view로 합치고 싶었으나, User.objects냐 Store.objects냐의 기준이 너무 달라서 따로 view를 만들 수밖에 없었다.</li>\n</ul>","frontmatter":{"title":"Pandas DataFrame을 사용한 User별 점수 Ranking","date":"April 04, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/gopizza/dataframe/","previous":{"fields":{"slug":"/gopizza/normalization/"},"frontmatter":{"title":"Normalization: 정규화","category":"python","draft":false}},"next":{"fields":{"slug":"/algorithm/collections/"},"frontmatter":{"title":"list 간의 차집합","category":"algorithm","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
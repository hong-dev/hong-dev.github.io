{"componentChunkName":"component---src-templates-blog-post-js","path":"/gopizza/normalization/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8d81b117-45fa-5c79-a55e-16f16ba92751","excerpt":"이처럼 각각 다른 단위와 범위의 값을 가진 점수들을, 통일된 점수로 계산할 수 있도록 바꾼다. pandas.DataFrame 한꺼번에 바꿀 수 있도록 모든 data들을 dataframe으로 넣어둔다. Dataframe을 만들 때에는 column name과 해당하는 값의 list를 dictionary로 넣는다.  time_score에 -(minus)를 붙인 이유: 기본적으로는 숫자가 클수록 높은 점수를 받게 되는데, time…","html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[example]\n\nCompletion : 0~100 사이의 점수 단위\nTime       : second(초) 단위,\nCount      : 일반 개수 단위</code></pre></div>\n<p>이처럼 각각 다른 단위와 범위의 값을 가진 점수들을, 통일된 점수로 계산할 수 있도록 바꾼다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> MinMaxScaler\n\nscores <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"completion_score\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>rank<span class=\"token punctuation\">.</span>completion_score <span class=\"token keyword\">for</span> rank <span class=\"token keyword\">in</span> ranking_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"time_score\"</span>       <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>rank<span class=\"token punctuation\">.</span>average_time <span class=\"token keyword\">for</span> rank <span class=\"token keyword\">in</span> ranking_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"count_score\"</span>      <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>rank<span class=\"token punctuation\">.</span>total_count <span class=\"token keyword\">for</span> rank <span class=\"token keyword\">in</span> ranking_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nscores<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MinMaxScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"pandasdataframe\" style=\"position:relative;\"><a href=\"#pandasdataframe\" aria-label=\"pandasdataframe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pandas.DataFrame</h3>\n<p>한꺼번에 바꿀 수 있도록 모든 data들을 dataframe으로 넣어둔다.<br>\nDataframe을 만들 때에는 column name과 해당하는 값의 list를 dictionary로 넣는다.<br>\n<code class=\"language-text\">{field : [value1, value2, ...]}</code></p>\n<h4 id=\"itime_score에--minus를-붙인-이유\" style=\"position:relative;\"><a href=\"#itime_score%EC%97%90--minus%EB%A5%BC-%EB%B6%99%EC%9D%B8-%EC%9D%B4%EC%9C%A0\" aria-label=\"itime_score에  minus를 붙인 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><i>time_score에 -(minus)를 붙인 이유:</h4>\n<p>기본적으로는 숫자가 클수록 높은 점수를 받게 되는데, time의 경우에는 시간이 짧을수록 높은 점수를 받아야하기 때문이다. </i></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">     completion_score  time_score  count_score\n0            293.4000   -244.6000            5\n1            311.3333   -263.6667            3\n2            301.7857   -236.5000           14\n3            296.5000   -240.5000            2\n4            298.3333   -261.6667            3\n..                ...         ...          ...\n107          300.3333   -254.6667            3\n108          312.5000   -249.0000            2\n109          292.0000   -242.0000            3\n110          281.6667   -225.0000            3\n111          316.0000   -215.0000            1\n\n[112 rows x 3 columns]</code></pre></div>\n<h3 id=\"minmaxscaler\" style=\"position:relative;\"><a href=\"#minmaxscaler\" aria-label=\"minmaxscaler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MinMaxScaler</h3>\n<p>MinMaxScaler를 적용하면 0~1 사이의 값으로 변환을 시켜준다.<br>\n원래대로라면 전체의 값을 줄 세운 다음 그 안에서 값을 부여해야 하는데, MinMaxScaler를 사용하면 한번에! range가 다른 값들을 정규화 시켜준다.<br>\n<code class=\"language-text\">상대평가로 줄 세울 때</code> 아주 유용하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">     completion_score  time_score  count_score\n0            0.380881    0.463006     0.053333\n1            0.493968    0.297688     0.026667\n2            0.433761    0.533237     0.173333\n3            0.400430    0.498555     0.013333\n4            0.411990    0.315029     0.026667\n..                ...         ...          ...\n107          0.424602    0.375722     0.026667\n108          0.501325    0.424856     0.013333\n109          0.372053    0.485549     0.026667\n110          0.306891    0.632948     0.026667\n111          0.523396    0.719653     0.000000\n\n[112 rows x 3 columns]</code></pre></div>\n<h3 id=\"importance-적용\" style=\"position:relative;\"><a href=\"#importance-%EC%A0%81%EC%9A%A9\" aria-label=\"importance 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Importance 적용</h3>\n<p>정규화가 된 각각의 field에 중요도(importance)를 곱하여 100점 만점의 total_score를 만들었다.<br>\n그리고 만들어진 다른 DataFrame(rank_table)에 total_score column을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">completion_importance<span class=\"token punctuation\">,</span> time_importance<span class=\"token punctuation\">,</span> count_importance <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span>\n\ntotal_score <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    scores<span class=\"token punctuation\">.</span>completion_score <span class=\"token operator\">*</span> completion_importance\n    <span class=\"token operator\">+</span> scores<span class=\"token punctuation\">.</span>time_score <span class=\"token operator\">*</span> time_importance\n    <span class=\"token operator\">+</span> scores<span class=\"token punctuation\">.</span>count_score <span class=\"token operator\">*</span> count_importance\n<span class=\"token punctuation\">)</span>\n\nrank_table <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>ranking_list<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrank_table<span class=\"token punctuation\">[</span><span class=\"token string\">'total_score'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> total_score</code></pre></div>\n<h3 id=\"thinking\" style=\"position:relative;\"><a href=\"#thinking\" aria-label=\"thinking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thinking</h3>\n<ul>\n<li><strong>Thinking_1 :</strong> rank_table이라는 기본 DataFrame을 하나 만들고, total_score를 계산하기 위한 DataFrame을 새로 만드는 과정이 과연 효율적인가?</li>\n<li><strong>Thnking_2 :</strong> total_score 값 목록을 rank_table에 그대로 가져다가 붙이는데, 이 두가지 dataframe의 값 순서가 동일한가?<br>\n물론 동일한 ranking_list(유저별 정보 list)를 가져다가 쓴다고는 하지만, user id가 같이 붙어서 적용되는 것도 아닌데.. 따로따로 만든 dataframe 끼리 붙여버린다고 순서가 맞을까?</li>\n</ul>","frontmatter":{"title":"Normalization: 정규화","date":"April 03, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/gopizza/normalization/","previous":{"fields":{"slug":"/gopizza/timedelta/"},"frontmatter":{"title":"Timedelta를 사용하여 period range 설정","category":"python","draft":false}},"next":{"fields":{"slug":"/gopizza/dataframe/"},"frontmatter":{"title":"Pandas DataFrame을 사용한 User별 점수 Ranking","category":"python","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
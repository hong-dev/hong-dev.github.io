{"componentChunkName":"component---src-templates-blog-post-js","path":"/gopizza/timedelta/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"c5c71ff5-4063-55fb-b5cb-0a47c838f5bd","excerpt":"Filter Condition Django에서 User.objects.filter()에 사용되는 filter 조건이 복잡하거나 다른 view에서도 사용해야 한다면 따로 함수로 빼는 것이 가능 filter할 parameter를 받아서, dictoionary에 filter condition들을 넣는다. 함수에서 최종 return한 filter condition을 사용할 때는 를 붙여서 사용한다. Filter condition 함수가 사용되는 get view created_at__range…","html":"<h3 id=\"filter-condition\" style=\"position:relative;\"><a href=\"#filter-condition\" aria-label=\"filter condition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter Condition</h3>\n<ul>\n<li>Django에서 User.objects.filter()에 사용되는 filter 조건이 복잡하거나 다른 view에서도 사용해야 한다면 따로 함수로 빼는 것이 가능</li>\n<li>\n<p>filter할 parameter를 받아서, dictoionary에 filter condition들을 넣는다.<br>\n함수에서 최종 return한 filter condition을 사용할 때는 <code class=\"language-text\">**</code>를 붙여서 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>get_filter_condition<span class=\"token punctuation\">(</span>time_delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li><a href=\"https://hong-dev.github.io/posts/project_wepizza/dataframe\">Filter condition 함수가 사용되는 get view</a></li>\n</ul>\n<h3 id=\"created_at__range--start_date-end_date\" style=\"position:relative;\"><a href=\"#created_at__range--start_date-end_date\" aria-label=\"created_at__range  start_date end_date permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>created_at__range = (start_date, end_date)</h3>\n<ul>\n<li>시작 날짜와 마지막 날짜 사이의 data</li>\n</ul>\n<h3 id=\"scoreobjectsearliestcreated_at\" style=\"position:relative;\"><a href=\"#scoreobjectsearliestcreated_at\" aria-label=\"scoreobjectsearliestcreated_at permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Score.objects.earliest(‘created_at’)</h3>\n<ul>\n<li>created_at의 날짜가 가장 빠른 object (제일 처음 저장된 data를 알 수 있다.)</li>\n</ul>\n<h3 id=\"timedelta\" style=\"position:relative;\"><a href=\"#timedelta\" aria-label=\"timedelta permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>timedelta</h3>\n<ul>\n<li>\n<p>datetime instance 간의 기간 차이를 나타낸다.<br>\ntimedelta를 더하거나 빼서 기준 날짜의 전후를 계산한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">timedelta<span class=\"token punctuation\">(</span>weeks <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#7주 후</span>\ntimedelta<span class=\"token punctuation\">(</span>days <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#7일 전</span>\ntimedelta<span class=\"token punctuation\">(</span>hours <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\ntimedelta<span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\ntimedelta<span class=\"token punctuation\">(</span>days <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hours <span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#1일 후의 7시간 전</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"datetoday--datetimenow\" style=\"position:relative;\"><a href=\"#datetoday--datetimenow\" aria-label=\"datetoday  datetimenow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>date.today() / datetime.now()</h3>\n<ul>\n<li><code class=\"language-text\">date.today()</code> : 오늘 날짜</li>\n<li><code class=\"language-text\">datetime.now()</code> : 현재 시간</li>\n<li>timedelta를 사용해서 지금보다 1일 전을 설정할 때, datetime.now()를 적용한다면 어제의 현재 시간보다 빠른 시간의 data는 return되지 않는다.<br>\n따라서 <code class=\"language-text\">date.today()</code>를 적용해서 하루 전체의 data가 return 되도록 하였다.</li>\n<li>timedelta가 0일 경우(오늘 입력된 data만 보여줄 경우) :<br>\ndate range를 설정할 때 end_date 부분에 date.today()를 적용하면, 시작날짜도 오늘, 끝날짜도 오늘이 되어서 아무런 data도 return 되지 않는다.<br>\n따라서 range를 적을 때는 <code class=\"language-text\">datetime.now()</code>를 사용하여 현재시간까지 들어온 오늘의 data가 보여질 수 있도록 했다.</li>\n</ul>\n<h3 id=\"filter-function-code\" style=\"position:relative;\"><a href=\"#filter-function-code\" aria-label=\"filter function code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter Function Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime<span class=\"token punctuation\">,</span> timedelta<span class=\"token punctuation\">,</span> date\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_filter_condition</span><span class=\"token punctuation\">(</span>time_delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    filter_condition <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> time_delta<span class=\"token punctuation\">:</span>\n        start_date <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> timedelta<span class=\"token punctuation\">(</span>days <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time_delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        start_date <span class=\"token operator\">=</span> Score<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>earliest<span class=\"token punctuation\">(</span><span class=\"token string\">'created_at'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>created_at<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    filter_condition<span class=\"token punctuation\">[</span><span class=\"token string\">\"score__created_at__range\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start_date<span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> filter_condition</code></pre></div>","frontmatter":{"title":"Timedelta를 사용하여 period range 설정","date":"April 02, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/gopizza/timedelta/","previous":{"fields":{"slug":"/vibe/social_login_unittest/"},"frontmatter":{"title":"Unit test : Naver Social Log-in","category":"django","draft":false}},"next":{"fields":{"slug":"/gopizza/normalization/"},"frontmatter":{"title":"Normalization: 정규화","category":"python","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
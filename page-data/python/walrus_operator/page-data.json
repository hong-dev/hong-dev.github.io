{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/walrus_operator/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a88ebb85-030e-577d-a9c1-4e3f9c57fe46","excerpt":"버전 이후로 새로 추가된 기능이 있다.  또는  또는  또는  왜 walrus인가 했더니. 바다코끼리가 영어로 walrus인데  이 모양이 바다코끼리의 눈과 엄니를 닮았다고 해서 붙여졌다고 한다. 이런 귀여운 이름이라니 😂 Walrus   책에도 이 assignment expression에 대한 설명이 있다.  ➡ 관련해서 적은 글: Effective Python: Second Edition [Item 10] How to use 이 operator의 기능은, 변수를 assign…","html":"<p><code class=\"language-text\">Python 3.8</code> 버전 이후로 새로 추가된 기능이 있다.<br>\n<code class=\"language-text\">:=</code> 또는 <code class=\"language-text\">PEP 572</code> 또는 <code class=\"language-text\">assignment expression</code> 또는 <code class=\"language-text\">walrus operator</code></p>\n<br>\n<p>왜 walrus인가 했더니.<br>\n바다코끼리가 영어로 walrus인데 <code class=\"language-text\">:=</code> 이 모양이 바다코끼리의 눈과 엄니를 닮았다고 해서 붙여졌다고 한다.<br>\n이런 귀여운 이름이라니 😂<br>\n<img src=\"https://user-images.githubusercontent.com/53142539/91169544-811fe480-e712-11ea-9ef0-1ed0a4c7a24c.png\" alt=\"Walrus\"></p>\n<p> <code class=\"language-text\">Effective Python</code> 책에도 이 assignment expression에 대한 설명이 있다.<br>\n➡ 관련해서 적은 글: <a href=\"https://hong-dev.github.io/effective_python/item_8_to_10/\"><em>Effective Python: Second Edition [Item 10]</em></a></p>\n<h2 id=\"how-to-use\" style=\"position:relative;\"><a href=\"#how-to-use\" aria-label=\"how to use permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use</h2>\n<ul>\n<li>\n<p>이 operator의 기능은, 변수를 assign 하고 그것을 표현식 안에서 바로 사용할 수 있도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nlength_nums <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> length_nums <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>length_nums<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>위의 코드를 walrus operator를 사용해서 바꿔본다면,</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length_nums <span class=\"token operator\">:=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>length_nums<span class=\"token punctuation\">)</span></code></pre></div>\n<p>➡ len(nums)를 새로운 변수 lenght_nums에 할당을 해주고 if문에 넣어야 하는데, <code class=\"language-text\">:=</code>를 사용하면 할당하는 동시에 if문에서 변수로 사용 가능하다는 것!</p>\n</li>\n</ul>\n<br>\n<ul>\n<li>if문 말고도 while문, list, list comprehension, lambda, f-strings 등 다양한 곳에서 사용할 수 있다.</li>\n</ul>\n<br>\n<ul>\n<li><code class=\"language-text\">python 3.8</code> 이후부터 적용되는 것이어서, 이전 버전에서 <code class=\"language-text\">:=</code> 를 사용하면 <code class=\"language-text\">SyntaxError: invalid syntax</code>가 발생한다.</li>\n</ul>\n<br>\n<h2 id=\"criticisms\" style=\"position:relative;\"><a href=\"#criticisms\" aria-label=\"criticisms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Criticisms</h2>\n<p><strong>이 operator가 만들어질 때 논란도 많았다고 한다. 반대하는 입장은 이러했다.</strong></p>\n<p>\n<ul>\n<li>assignment를 위한 operator는 <code class=\"language-text\">=</code>가 이미 있는데, <code class=\"language-text\">:=</code>으로도 assign만 하는 게 가능하기 때문에 처음하는 사람들은 헷갈릴 수 있다.</li>\n</ul>\n</p>\n<p>\n<ul>\n<li>Zen of Python에 따르면, 단 한가지 분명한 방법만 있어야 한다고 했다.<br>\n그런데 <code class=\"language-text\">:=</code>는 이미 존재하는 방법들과 똑같은 기능을 한다. 굳이 왜 또 만든다는 것이냐.</li>\n</ul>\n</p>\n<p>\n<ul>\n<li>Zen of Python에 따르면, 복잡한 것보다 심플한 게 낫다고 했다.<br>\n<code class=\"language-text\">:=</code>는 심플해보이지만 공백을 줄인다는 명목으로 실제로는 더 복잡성이 증가된다.</li>\n</ul>\n</p>\n<ul>\n<li>얼마나 많은 개발자들이 이걸 사용할지 테스트가 충분히 되지 않았다.</li>\n</ul>\n<br>\n<p><code class=\"language-text\">:=</code> operator에 대해 많은 커뮤니티 구성원들이 엄청나게 반발했고, 격양되고 감정적인 논쟁마저 벌어졌다고 한다.<br>\n그 과정에서 Python 창시자인 Guido van Rossum (귀도 반 로섬)을 비난하기도 하고.<br>\n이것은 Guido가 python 개발 의사결정 과정에서 손 떼고 싶다며 사임하는 계기가 되었다.. 😭  </p>\n<br>\n<h2 id=\"i-used-it-for\" style=\"position:relative;\"><a href=\"#i-used-it-for\" aria-label=\"i used it for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I used it for</h2>\n<ul>\n<li>\n<p>문득, 예전에 아무것도 모르고 이유도 모르고 stackoverflow에서 겨우겨우 찾은 방법으로 list comprehension을 만들었던 기억이 났다.<br>\n생각해보니 그 때 사용한, 신기하게 생겼던 operator가 이거였다.<br>\n찾아보니 예전에 <a href=\"https://hong-dev.github.io/gopizza/dataframe/\">Pandas Dataframe 사용 관련 글</a>에서 <code class=\"language-text\">List Comprehension에서 짧은 변수명으로 바꾸기</code> 라고 언급도 해놨었다 😂</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">store_ranking <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"id\"</span>    <span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"name\"</span>  <span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"count\"</span> <span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span>total_count\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> id_number <span class=\"token keyword\">in</span> ordered_table<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>store <span class=\"token operator\">:=</span> ranking_list<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> id_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>이 코드에서 <code class=\"language-text\">:=</code>를 사용했던 이유는, store에 ranking_list.get(id = id_number)를 할당해서 간단한 변수로 사용하고 싶었기 때문이다.<br>\n만약에 저걸 사용하지 못했다면, store 대신에 전체를 다 적어줘야 했을 것이다.<br>\n여기서는 3줄로 잘라왔지만, store 정보가 많았기 때문에 줄마다 이렇게 중복해서 적는다면 보기에 굉장히 안 좋았을 것..</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">store_ranking <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"id\"</span>    <span class=\"token punctuation\">:</span> ranking_list<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> id_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"name\"</span>  <span class=\"token punctuation\">:</span> ranking_list<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> id_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"count\"</span> <span class=\"token punctuation\">:</span> ranking_list<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> id_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>total_count\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> id_number <span class=\"token keyword\">in</span> ordered_table<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>사실 이렇게 쓰는 게 맞는 방법인지도 모르겠고. 당시의 나는 이게 최선이었다.. 결론은, 나에게는 매우매우 신박하고 꼭 필요한 고마운 operator 였다는 것 😂  </li>\n</ul>\n<br>\n<ul>\n<li>큰 논란을 불러왔던 PEP 572. 이런 논란에도 최종적으로 승인되어 바다코끼리 연산자로 잘 사용되고 있다. 🐘<br>\n사람들이 반대했던 이유, 과연 이 연산자가 얼마나 많이 사용되고 있는가. 이건 궁금하긴 하다! 😮</li>\n</ul>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://www.python.org/dev/peps/pep-0572/\"><em>PEP 572 — Assignment Expressions</em></a><br>\n<a href=\"https://www.geeksforgeeks.org/walrus-operator-in-python-3-8/\"><em>Walrus Operator in Python 3.8 - GeeksforGeeks</em></a><br>\n<a href=\"https://www.youtube.com/watch?v=KN2TTiGpDvM&#x26;feature=youtu.be\"><em>The most controversial Python feature | Walrus operator</em></a></p>\n</blockquote>","frontmatter":{"title":"PEP 572. Walrus operator ( := )","date":"August 25, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/python/walrus_operator/","previous":{"fields":{"slug":"/effective-python/item_7/"},"frontmatter":{"title":"Item 7: Prefer enumerate Over range","category":"[Effective Python]","draft":false}},"next":{"fields":{"slug":"/python/dictionary_get/"},"frontmatter":{"title":"dictionary.get() method","category":"python","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/arbitrary_arguments_list/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"0a091ceb-c303-5c8c-b064-bd040a2a39c8","excerpt":"0부터 4까지 정수들의 제곱을 각각 한줄씩 print 하기 Solution 1: for loop 쉽게 떠올릴 수 있는 for문을 사용한 방법 Solution 2: list comprehension 간단한 for문이라면 list comprehension을 적용하기 쉽다. 보기에는 다를 것 없어 보이지만, ipython으로 실행해봤을 때 위의 for문과 다른 점이 있었다. print만 되고 끝나는 것이 아니라 이것 자체로 output이 있다는 것. 다른 변수에 assign…","html":"<blockquote>\n<h3 id=\"0부터-4까지-정수들의-제곱을-각각-한줄씩-print-하기\" style=\"position:relative;\"><a href=\"#0%EB%B6%80%ED%84%B0-4%EA%B9%8C%EC%A7%80-%EC%A0%95%EC%88%98%EB%93%A4%EC%9D%98-%EC%A0%9C%EA%B3%B1%EC%9D%84-%EA%B0%81%EA%B0%81-%ED%95%9C%EC%A4%84%EC%94%A9-print-%ED%95%98%EA%B8%B0\" aria-label=\"0부터 4까지 정수들의 제곱을 각각 한줄씩 print 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0부터 4까지 정수들의 제곱을 각각 한줄씩 print 하기</h3>\n</blockquote>\n<h2 id=\"solution-1-for-loop\" style=\"position:relative;\"><a href=\"#solution-1-for-loop\" aria-label=\"solution 1 for loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution 1: for loop</h2>\n<ul>\n<li>\n<p>쉽게 떠올릴 수 있는 for문을 사용한 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">9</span>\n<span class=\"token number\">16</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"solution-2-list-comprehension\" style=\"position:relative;\"><a href=\"#solution-2-list-comprehension\" aria-label=\"solution 2 list comprehension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution 2: list comprehension</h2>\n<ul>\n<li>\n<p>간단한 for문이라면 list comprehension을 적용하기 쉽다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">9</span>\n<span class=\"token number\">16</span></code></pre></div>\n</li>\n<li>보기에는 다를 것 없어 보이지만, ipython으로 실행해봤을 때 위의 for문과 다른 점이 있었다.<br>\nprint만 되고 끝나는 것이 아니라 이것 자체로 output이 있다는 것.<br>\n다른 변수에 assign이 될 수 있는 실체가 있는 list comprehension(그 값은 <code class=\"language-text\">[None, None, None, None, None]</code>)이 만들어졌다는 것.</li>\n</ul>\n<br>\n<h2 id=\"solution-3-arbitrary-arguments-list\" style=\"position:relative;\"><a href=\"#solution-3-arbitrary-arguments-list\" aria-label=\"solution 3 arbitrary arguments list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution 3: arbitrary arguments list</h2>\n<ul>\n<li>\n<p>이번 포스팅의 주인공, <code class=\"language-text\">*[list]</code> 형태의 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">9</span>\n<span class=\"token number\">16</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">*(asterisk)</code>를 사용하지 않으면? ➡ 예상할 수 있듯이 하나의 list가 print 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">sep=</code> 옵션을 사용하지 않는다면? ➡ 띄어쓰기로 하나씩 print 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">4</span> <span class=\"token number\">9</span> <span class=\"token number\">16</span></code></pre></div>\n</li>\n</ul>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://www.hackerrank.com\"><em>HackerRank</em></a><br>\n<a href=\"https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists\"><em>python3 docs: arbitrary argument lists</em></a></p>\n</blockquote>","frontmatter":{"title":"Arbitrary Argument List","date":"January 11, 2021","category":"python","thumbnail":null}}},"pageContext":{"slug":"/python/arbitrary_arguments_list/","previous":{"fields":{"slug":"/effective-python/item_26/"},"frontmatter":{"title":"Item 26: Define Function Decorators with 'functools.wraps'","category":"[Effective Python]","draft":false}},"next":{"fields":{"slug":"/effective-python/item_27/"},"frontmatter":{"title":"Item 27: Use Comprehensions Instead of 'map' and 'filter'","category":"[Effective Python]","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
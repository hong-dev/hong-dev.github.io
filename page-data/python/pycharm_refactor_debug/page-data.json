{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/pycharm_refactor_debug/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"44428442-e801-5ca0-ba9c-8cec8acb5244","excerpt":"파이참 쓴지 한달.. 얕은 경험으로 얕은 기능만 써본 후기😂 Visual Studio Code를 사용하다가 PyCharm으로 갈아탄지 얼마 안 되었다. 사실 갈아탄건 아니고 둘 다 사용중인데, vscode의 기능이 pycharm에서는 어떻게 쓰는지 잘 몰라서 번갈아가며 쓰는 중..😂   vscode를 쓰는 사람들은, pycharm이 와 이 있는데 advanced한 기능들을 사용하려면 돈을 내야해서 vscode로 갈아탔다는 사람도 있고. pycharm이 아무래도 python…","html":"<blockquote>\n<p><em>파이참 쓴지 한달.. 얕은 경험으로 얕은 기능만 써본 후기😂</em></p>\n</blockquote>\n<br>\n<p>Visual Studio Code를 사용하다가 PyCharm으로 갈아탄지 얼마 안 되었다.<br>\n사실 갈아탄건 아니고 둘 다 사용중인데, vscode의 기능이 pycharm에서는 어떻게 쓰는지 잘 몰라서 번갈아가며 쓰는 중..😂  </p>\n<p>vscode를 쓰는 사람들은,<br>\npycharm이 <code class=\"language-text\">community</code>와 <code class=\"language-text\">professional</code>이 있는데 advanced한 기능들을 사용하려면 돈을 내야해서 vscode로 갈아탔다는 사람도 있고.<br>\npycharm이 아무래도 python에 최적화 되어있어서(다른 언어 안 써봐서 잘 모름😂), general하게 사용하는 vscode를 쓴다는 사람도 있고.  </p>\n<p>개인적으로는 파이참의 쨍하지 않은 색? 살짝 톤 다운된 차분한 느낌?이 더 마음에 든다.</p>\n<p>놀랍게도 회사에서는 vscode와 pycharm의 사용률이 반반이었다! 그만큼 별 차이는 없는 것으로…?<br>\n물어봐도 별다른 큰 이유는 없었다.. 사실 기능은 둘 다 비슷하게 다 가지고 있다고 한다.</p>\n<p>그러나 모두가 똑같이 하는 말은 vscode보다 <strong>파이참이 디버깅할 때 매우 좋다는 것!</strong><br>\n당시에는 pycharm의 debug mode를 사용해보기 전이어서 뭐가 그리 다르다는 걸까 했었는데.. 웬걸..</p>\n<p>파이참에서 신세계라고 느꼈던 기능은(겨우 한 달 써 본 경험으로는😂) <code class=\"language-text\">refactoring</code>과 <code class=\"language-text\">debugging</code>!!</p>\n<br>\n<h1 id=\"refactor\" style=\"position:relative;\"><a href=\"#refactor\" aria-label=\"refactor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refactor</h1>\n<h3 id=\"move\" style=\"position:relative;\"><a href=\"#move\" aria-label=\"move permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Move</h3>\n<ul>\n<li>파일이나 파일 안의 있는 class, variable 등을 다른 곳으로 이동할 때 사용한다.</li>\n<li><strong>방법:</strong> 옮기고 싶은 것 <code class=\"language-text\">오른쪽 클릭</code> > <code class=\"language-text\">Refactor</code> > <code class=\"language-text\">Move</code>를 선택한다. (단축키: <code class=\"language-text\">F6</code>)</li>\n<li><code class=\"language-text\">Bulk move</code>를 눌러서 class를 여러개 선택하면 한꺼번에 옮길 수 있다.</li>\n<li>Refactor에서 move 기능은 그냥 옮기는 게 아니다.<br>\n예를 들어 class 하나를 다른 file로 옮기고 싶을 때, 해당 class에 필요한 import 정보까지 같이 옮겨준다.<br>\n(놀라운건 import도 정렬까지 해서 예쁘게 옮겨준다.)<br>\n그리고 이동한 class의 path가 바뀌었을테니, class를 사용하는 곳에는 새로운 path를 자동 적용시켜준다.</li>\n</ul>\n<br>\n<h3 id=\"rename\" style=\"position:relative;\"><a href=\"#rename\" aria-label=\"rename permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rename</h3>\n<ul>\n<li>파일이나 파일 안의 class, function, variable 등의 이름을 usage들과 함께 한꺼번에 바꿀 때 사용한다.</li>\n<li><strong>방법:</strong> 바꾸고 싶은 이름 <code class=\"language-text\">오른쪽 클릭</code> > <code class=\"language-text\">Refactor</code> > <code class=\"language-text\">Rename</code>을 선택한다. (단축키: <code class=\"language-text\">Shift+F6</code>)<br>\n아래와 같은 창이 뜨면 원하는 이름으로 바꿔서 입력해준다.</li>\n<li>Project files 전체인지, 열려있는 파일들만인지, 현재 파일만인지 <code class=\"language-text\">Scope</code>도 설정할 수 있다.</li>\n<li>\n<p>지금보니 <code class=\"language-text\">Search in comments and strings</code> 체크하는 것도 있다. 주석이나 string 처리된 것들도 바꿔주나보다.<br>\n이 기능이 있는줄도 모르고 docstring, comments 따로 찾아서 바꿔줬는데.. 이렇게 또 배워갑니다😂👍</p>\n<p><img src=\"https://user-images.githubusercontent.com/53142539/92941918-eb16e880-f48b-11ea-963d-9ecd238a5134.png\" alt=\"PyCharm Rename\"></p>\n</li>\n</ul>\n<br>\n<br>\n<h1 id=\"debug\" style=\"position:relative;\"><a href=\"#debug\" aria-label=\"debug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debug</h1>\n<h3 id=\"debug-mode\" style=\"position:relative;\"><a href=\"#debug-mode\" aria-label=\"debug mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debug mode</h3>\n<ul>\n<li>test하고 싶은 코드를 오른쪽 클릭하면 <code class=\"language-text\">▶ Run</code>과 <code class=\"language-text\">🐛 Debug</code>가 있다.<br>\nRun은 test를 그냥 쭉 돌려서 pass/fail을 보는 거고, Debug는 test를 돌리면서 error가 발생하면 그 부분에서 debugging을 할 수 있다.</li>\n<li><strong>pycharm이 디버깅이 편한 이유!</strong><br>\nerror 발생 즉시 멈춰주고 console 창이 있어서 그 부분에서 사용한 변수라든지 다른 정보들을 console로 바로바로 입력해볼 수 있다.<br>\n그리고 정말 신세계다 싶었던 건, 원본 코드에도 오른쪽에 회색으로 input 값을 보여준다는 것!<br>\n예를 들어, function의 input parameter로 어떤 것들이 들어왔는지를 코드 옆에 적어준다.<br>\n많이 해보지 않았는데도 이래서 파이참 디버깅이 좋다고 하는구나 싶었다👏</li>\n<li>IDE로 debugging 처음 해볼 때 그냥 무작정 test code 아닌 code를 눌러서 run을 했었다.<br>\n그래놓고 계속 안된다고 했는데, test 코드만 돌려볼 수 있는 구조였다..😂<br>\n그럼 test code가 없는 코드는 debug 해볼 수가 없다는..? 이래서 unittest, TDD가 중요하다고 하나보다..</li>\n</ul>\n<br>\n<h3 id=\"breakpoint\" style=\"position:relative;\"><a href=\"#breakpoint\" aria-label=\"breakpoint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breakpoint</h3>\n<ul>\n<li>PyCharm에서는 Debug로 실행시켰을 때만 breakpoint를 사용할 수 있다.<br>\n맨 왼쪽에 코드 row 번호 왼쪽 공간을 누르면 빨간색 동그라미가 생기는데 이게 <code class=\"language-text\">breakpoint</code>다.</li>\n<li>Debug 실행 시에 error가 발생하면 그 자리에서 멈춰주지만, breakpoint가 있으면 error가 발생하지 않아도 그 자리에서 멈춰준다.</li>\n<li>뭐가 들었는지 알고 싶을 때 <code class=\"language-text\">print</code>로 찍어보는 대신 breakpoint를 활용해서 console 창에 쉽게 찍어볼 수 있다.<br>\n그러나 이것도 test code가 있을 때 가능한 일 아닌가..?😭 기승전 test code..</li>\n</ul>\n<br>\n<h3 id=\"working-directory\" style=\"position:relative;\"><a href=\"#working-directory\" aria-label=\"working directory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working Directory</h3>\n<ul>\n<li>전체를 debug 돌리지 않고, 폴더 혹은 파일 하나 이렇게 작은 단위로 돌릴 때 error가 생기기도 하는데,<br>\nimport를 할 수 없다느니 그런 module이 없다느니 결과값이 이상하다든지 하는.. 왠지 얘가 파일 같은 걸 제대로 인식 못해서 생기는 error 같다면?!<br>\n➡ working directory를 의심해본다.</li>\n<li>최상단의 메뉴바에서 <code class=\"language-text\">Run</code> > <code class=\"language-text\">Edit Configurations</code> > <code class=\"language-text\">Run/Debug Configurations 창</code>이 뜨면 왼쪽에서 해당하는 파일 및 폴더를 선택하고 > <code class=\"language-text\">Working directory</code>를 상황에 맞게 변경해준다.</li>\n<li>코드가 project root 폴더를 기준으로 import 하도록 짜여져 있다면, 보통 파일 하나의 working directory는 그 파일만을 기준으로 설정되기 때문에 그 파일 기준으로 import 하려니 없다고 나오는 것. 이 때는 프로젝트 전체를 기준으로 working directory를 설정해준다.</li>\n</ul>\n<br>\n<br>\n<p>3달 전까지만해도 vim이 간지다!!를 외치다가.. (물론 여전히 잘 쓰고 싶은 맘은 한가득이지만😂)<br>\n왜 IDE를 쓰는지 이제 알겠다.. 이걸 어떻게 만든거지😱 만든 사람들 누구보다도 대단해..😳👍</p>","frontmatter":{"title":"[PyCharm] Refactor, Debug","date":"September 12, 2020","category":"python","thumbnail":null}}},"pageContext":{"slug":"/python/pycharm_refactor_debug/","previous":{"fields":{"slug":"/effective-python/item_14/"},"frontmatter":{"title":"Item 14: list.sort(key=...)","category":"[Effective Python]","draft":false}},"next":{"fields":{"slug":"/effective-python/item_15/"},"frontmatter":{"title":"Item 15: Dictionary Insertion Ordering","category":"[Effective Python]","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
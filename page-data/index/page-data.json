{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Spark: The Definitive Guide 내용 정리 Schema DataFrame의 column name과 data type을 정의 Data source에서 schema를 얻거나 직접 정의 가능 여러 개의  type filed로 구성된  object Spark는 runtime에 data type이 schema의 data type과 일치하지 않으면…","fields":{"slug":"/spark-definitive-guide/05-basic-structured-operations/"},"frontmatter":{"date":"May 14, 2022","title":"Chapter 5. Basic Structured Operations","category":"[Spark: The Definitive Guide]","draft":false}}},{"node":{"excerpt":"Spark: The Definitive Guide 내용 정리 Overview Apache Spark Community는 2.0 version을 출시하면서 structured API를 도입했다. 1.x 버전에서는 RDD와 같은 lower-level API를 활용하는 방법이 주를 이루었으나, 2.0 출시 이후에는 자동화된 최적화 기능과 장애 대응 능력을 제공…","fields":{"slug":"/spark-definitive-guide/04-structured-api-overview/"},"frontmatter":{"date":"April 28, 2022","title":"Chapter 4. Structured API Overview","category":"[Spark: The Definitive Guide]","draft":false}}},{"node":{"excerpt":"Spark: The Definitive Guide 내용 정리 Production Application Spark를 사용하면 big data program을 쉽게 개발 할 수 있다. spark-submit 대화형 shell에서 개발한 program을 production application으로 쉽게 전환 가능 application code를 cluster에…","fields":{"slug":"/spark-definitive-guide/03-tour-of-spark-toolset/"},"frontmatter":{"date":"April 23, 2022","title":"Chapter 3. A Tour of Spark's Toolset","category":"[Spark: The Definitive Guide]","draft":false}}},{"node":{"excerpt":"Spark: The Definitive Guide 내용 정리 Cluster 여러 컴퓨터의 자원을 모아 하나의 컴퓨터처럼 사용할 수 있게 만든다. Cluster에서 작업을 조율할 수 있는 framework가 필요한데, spark가 그런 역할을 하는 framework Spark Application Spark는 사용 가능한 자원을 파악하기 위해 cluster…","fields":{"slug":"/spark-definitive-guide/02-gentle-introduction/"},"frontmatter":{"date":"April 17, 2022","title":"Chapter 2. A Gentle Introduction to Spark","category":"[Spark: The Definitive Guide]","draft":false}}},{"node":{"excerpt":"Spark: The Definitive Guide 내용 정리 Apache Spark 빅데이터를 위한 통합(unified) 컴퓨팅 엔진과 라이브러리 집합 클러스터 환경에서 데이터를 병렬로 처리하는 오픈소스 엔진 Python, Java, Scala, R 을 지원 Features 다양한 데이터 분석 작업을 일관성 있는 API로 수행할 수 있도록 설계 (cons…","fields":{"slug":"/spark-definitive-guide/01-what-is-apache-spark/"},"frontmatter":{"date":"April 04, 2022","title":"Chapter 1. What is Apache Spark","category":"[Spark: The Definitive Guide]","draft":false}}},{"node":{"excerpt":"Transaction Runtime에서, 는 유저와의 인터랙션에 대한 응답으로 fragments를 추가, 제거, 교체, 또는 다른 동작들을 수행할 수 있다. 이러한 fragment 변경들을 이라고 하며,  class에서 제공하는 API를 사용하여 transaction 내에서 수행할 작업을 지정할 수 있다. 하나의 transaction에 여러 개의 acti…","fields":{"slug":"/android/fragment-transaction/"},"frontmatter":{"date":"April 01, 2022","title":"Fragment Transaction","category":"android","draft":false}}},{"node":{"excerpt":"Wildcard: ? 물음표(?)는 generic programming에서 wildcard로 사용된다. Unknown type을 나타낸다. Parameter, field, 지역 변수, return의 type 등과 같이 다양한 상황에서 사용할 수 있다. Types of wildcards Upper Bounded Wildcards Collectiontype<…","fields":{"slug":"/java/wildcard/"},"frontmatter":{"date":"March 31, 2022","title":"Wildcards in generics","category":"java","draft":false}}},{"node":{"excerpt":"Generics Parameterized types Integer, String 등의 타입을 methods, classes, interfaces의 parameter로 사용하기 위함이다. Generics를 사용하면, 각각 다른 data types와 동작하는 class들을 생성할 수 있다. Advantages Code Reuse: method, class, …","fields":{"slug":"/java/generics/"},"frontmatter":{"date":"March 22, 2022","title":"Generics in Java","category":"java","draft":false}}},{"node":{"excerpt":"JNI JVM에서 돌아가는 bytecode와 native code 사이의 bridge Application이 완전히 java로 쓰여질 수 있지만, java 하나로는 application 요구사항을 충족시키지 못하는 경우가 있다. 이렇게 application이 java만으로 작성되지 못하는 경우, JNI을 사용하여 Java native methods를 작성…","fields":{"slug":"/java/java-native-interface/"},"frontmatter":{"date":"March 12, 2022","title":"JNI (Java Native Interface)","category":"java","draft":false}}},{"node":{"excerpt":"Inner Class (내부 클래스) 클래스 안에 있는 클래스 Inner class에서는 Outer class의 모든 method와 variables를 사용할 수 있다. Private으로 지정된 것도 접근가능하다. 서로 다른 내부 클래스에서 똑같은 interfaces를 구현할 수 있기 때문에, overriding methods가 필요한 경우 유용하다. E…","fields":{"slug":"/java/anonymous-class/"},"frontmatter":{"date":"March 02, 2022","title":"Inner Class, Anonymous Class","category":"java","draft":false}}},{"node":{"excerpt":"Overriding Runtime polymorphism Parent class 또는 superclass에서 이미 정의되어 있는 method를 구체적으로 구현하기 위해 사용된다. 상속 관계에 있는 2개의 class에서 발생한다. 즉, overriding에는 항상 inheritance가 성립되어야 한다. Parent와 Child class의 method 이…","fields":{"slug":"/java/overriding-overloading/"},"frontmatter":{"date":"March 01, 2022","title":"Overriding vs Overloading","category":"java","draft":false}}},{"node":{"excerpt":"Access modifier Class, constructor, variable, method 등의 scope를 제한한다. Java에서는 default, private, protected, public의 4가지 접근제한자가 있다.  default private protected public Same Class O O O O Same package O X …","fields":{"slug":"/java/access-modifiers/"},"frontmatter":{"date":"February 28, 2022","title":"Access modifiers (접근제한자)","category":"java","draft":false}}},{"node":{"excerpt":"Context Application의 current/active state의 context Activity와 Application의 정보를 얻기위해 사용한다. App 환경의 global information에 대한 interface이며, android system에서 제공하는 abstract class Resources, databases, shared …","fields":{"slug":"/android/context/"},"frontmatter":{"date":"February 19, 2022","title":"Android Context: activity, application","category":"android","draft":false}}},{"node":{"excerpt":"Object를 serializing 하는 것은 object의 상태를 byte stream으로 변환하는 것을 의미하고, deserializing은 byte stream을 object의 copy로 되돌리는 것을 의미한다. Data를 하나의 Activity에서 다른 Activity로 전달해야 하는 경우가 있는데, 이 때 data는 Intent object에 담…","fields":{"slug":"/java/serializable-parcelable/"},"frontmatter":{"date":"February 18, 2022","title":"Serializable vs Parcelable","category":"java","draft":false}}},{"node":{"excerpt":"Background threads 모든 안드로이드 앱은 main thread를 사용하여 UI operations를 처리한다. 이 main thread에서 long-running operations를 호출하면 앱이 정지하거나 응답하지 않을 수 있다. 만약 network request를 main thread에서 처리한다면, network response를 받…","fields":{"slug":"/android/thread-handler-looper/"},"frontmatter":{"date":"February 13, 2022","title":"Android Thread, Handler, Looper","category":"android","draft":false}}},{"node":{"excerpt":"enum in java 열거형(Enumerations)은 지정된 constants 그룹을 나타내는 목적으로 사용된다. Compile-time에서 가능한 values를 전부 알고 있을 때 사용된다. Enum type의 constants 집합이 항상 고정되어 있을 필요는 없다. Java 1.5부터 enums는 enum data type을 표현하도록 사용된다.…","fields":{"slug":"/java/enum/"},"frontmatter":{"date":"February 12, 2022","title":"Enum in Java","category":"java","draft":false}}},{"node":{"excerpt":"Intent 다른 app component의 작업을 요청하는 데 사용할 수 있는 messaging object 여러 가지 방법으로 components 간의 communication을 용이하게 한다. Fundamental Usecases Starting an activity Intent를 에 전달하여 app의 single screen인 의 new insta…","fields":{"slug":"/android/intent/"},"frontmatter":{"date":"February 01, 2022","title":"Android Intent (Explicit & Implicit)","category":"android","draft":false}}},{"node":{"excerpt":"Reflection Runtime에 methods, classes, interfaces의 동작을 검사하거나 수정하는 데 사용되는 API New object를 instance화 하거나 method를 호출하고 field 값을 get/set 할 수도 있다. 필요한 class는  package에서 제공된다. Class, method, field informati…","fields":{"slug":"/java/reflection/"},"frontmatter":{"date":"January 31, 2022","title":"Reflection in Java","category":"java","draft":false}}},{"node":{"excerpt":"object를 만들고 싶다고 하자. 기본 집의 구조(4개의 벽, 바닥, 문, 창문, 지붕)만으로 집을 만들 수도 있지만, 더 크거나 밝거나 마당 또는 다른 것들이 추가된 집을 만들고 싶다면 어떻게 할까? 아래의 3가지 방법을 떠올릴 수 있다. 1. Base class + subclasses 방법:  라는 base class를 만들고, parameter들을…","fields":{"slug":"/java/builder-pattern/"},"frontmatter":{"date":"January 31, 2022","title":"Builder Pattern","category":"java","draft":false}}},{"node":{"excerpt":"ConstraintLayout View 위젯의 위치와 크기를 유연하게 조절할 수 있게 만들어주는 레이아웃 Layout에 배치되는 view들에 여러 제약(constraint)를 적용하여 각 뷰의 위치와 크기를 결정한다. 예를 들어, 특정 뷰 왼쪽 사이드를 다른 뷰의 오른쪽 사이드에 맞추거나 부모 레이아웃의 왼쪽 사이드에 맞추는 등의 constraint가 있…","fields":{"slug":"/android/constraint-layout/"},"frontmatter":{"date":"January 22, 2022","title":"Android ConstraintLayout","category":"android","draft":false}}},{"node":{"excerpt":"Fragment App UI의 재사용 가능한 부분을 나타낸다. 자체 layout을 정의 및 관리하고, 자체 lifecycle을 가지며, 자체 input events를 처리할 수 있다. 단독으로는 존재할 수 없으며, activity 또는 다른 fragment에서 hosting 되어야 한다. Fragment의 view 계층은 host의 view 계층의 일부가…","fields":{"slug":"/android/fragment/"},"frontmatter":{"date":"January 21, 2022","title":"Android Fragment","category":"android","draft":false}}},{"node":{"excerpt":"Singleton Pattern Class가 하나의 instance만 가지도록 하며, 이 instance에 대한 global access point를 제공한다. Class의 여러 instances의 숫자를 컨트롤 하려는 이유는 대부분, shared resource에 대한 접근을 컨트롤 하기 위해서이다. Singleton Pattern의 경우, object…","fields":{"slug":"/java/singleton-pattern/"},"frontmatter":{"date":"January 20, 2022","title":"Singleton Pattern","category":"java","draft":false}}},{"node":{"excerpt":"Problem Given an integer array , return true if any value appears at least twice in the array, and return false if every element is distinct. My Solution Runtime: 953 ms Memory: 26 MB Best Solution R…","fields":{"slug":"/leetcode/contains-duplicate/"},"frontmatter":{"date":"January 20, 2022","title":"[Array] #217 Contains Duplicate","category":"leetcode","draft":false}}},{"node":{"excerpt":"Android Architecture Patterns Android application을 개발할 때는 software architecture pattern을 사용하여 개발하는 것이 선호된다. Architecture pattern은 project files에 modularity(모듈성)를 부여하고, 모든 코드가 Unit tests에서 cover 되도록 한…","fields":{"slug":"/android/mvc-mvp/"},"frontmatter":{"date":"January 15, 2022","title":"MVC vs MVP Design Pattern","category":"android","draft":false}}},{"node":{"excerpt":"Problem Given an array  where  is the price of a given stock on the  day, return the maximum profit. If you cannot achieve any profit, return 0. Make sure you should buy first and sell next. My Solut…","fields":{"slug":"/leetcode/best-time-to-buy-and-sell-stock/"},"frontmatter":{"date":"January 13, 2022","title":"[Array] #121 Best Time to Buy and Sell Stock","category":"leetcode","draft":false}}},{"node":{"excerpt":"String Immutable 변경되지 않으므로 데이터 불일치에 대한 우려가 없고, multi-threaded 환경에서 사용하기에 적합하다. String은 변경이 되지 않으므로, String으로 정의된 변수를 바꾸면 기존의 값은 GC(Garbage Collection)의 대상이 되고 새로운 값이 생성된다. 계속 변경되는 값을 String으로 지정하면 he…","fields":{"slug":"/java/string/"},"frontmatter":{"date":"January 13, 2022","title":"String vs StringBuilder vs StringBuffer","category":"java","draft":false}}},{"node":{"excerpt":"Collection Framework 데이터를 저장하는 자료 구조와 데이터를 처리하는 알고리즘을 구조화하여 클래스로 구현해 놓은 것 Collection Framework는 java의 interface를 사용하여 구현된다. Collection Interface Collection을 표현하기 위한 abstract data type을 제공한다. : Framew…","fields":{"slug":"/java/collection-framework/"},"frontmatter":{"date":"January 11, 2022","title":"Java Collection Framework","category":"java","draft":false}}},{"node":{"excerpt":"Problem Given an array of integers  and an integer , return  of the two numbers such that they add up to . My Solution 1 Time Limit Exceeded My Solution 2 Runtime: 1441 ms Memory: 15 MB My Solution 3…","fields":{"slug":"/leetcode/two-sum/"},"frontmatter":{"date":"January 09, 2022","title":"[Array] #1 Two Sum","category":"leetcode","draft":false}}},{"node":{"excerpt":"Lifecycle Component에 대한 lifecycle 상태 정보를 가지고 있는 class이며, 다른 objects들이 이 lifecycle 상태를 관찰할 수 있도록 한다. Event: Framework나 Lifecycle class에서 전달되는 lifecycle events. Activity나 fragment의 callback events에 map…","fields":{"slug":"/android/activity-lifecycle/"},"frontmatter":{"date":"January 08, 2022","title":"Android Activity Lifecycle","category":"android","draft":false}}},{"node":{"excerpt":"Garbage Collection Java 프로그램이 자동으로 메모리 관리를 수행하는 프로세스 Java에서 객체가 만들어지면 Heap이라는 메모리 공간에 저장된다. 객체를 만들면, 자바에서는 그 객체의 크기에 따라 heap 안에 적당한 메모리 공간을 할당한다. 모든 객체는 (언제, 어디에서, 어떻게 만들어졌든 상관없이) garbage collection …","fields":{"slug":"/java/garbage-collection/"},"frontmatter":{"date":"January 08, 2022","title":"Garbage Collection (GC)","category":"java","draft":false}}},{"node":{"excerpt":"Static variable 만약 2개의 threads(t1, t2)가 같은 object에 접근해서 static으로 선언된 변수를 update 한다고 하자. 이때 t1과 t2는 static 변수들을 포함하여 해당 object에 대한 local copy를 각자의 cache에 저장한다. 따라서 t1의 local cache에서 static 변수를 변경하면, t…","fields":{"slug":"/java/static-volatile/"},"frontmatter":{"date":"January 08, 2022","title":"Static vs Volatile variables","category":"java","draft":false}}},{"node":{"excerpt":"안드로이드 4대 컴포넌트 Activity, Service, Broadcast Receiver, Content Provider 각 component들은 하나의 독립된 형태로 존재 각 component들은 Intent라는 일종의 메시지 객체를 사용하여 상호 통신 4개의 컴포넌트 요소가 모두 앱에 있어야 하는 것은 아니지만, activity는 반드시 하나 이상…","fields":{"slug":"/android/components/"},"frontmatter":{"date":"January 05, 2022","title":"Android Application Components","category":"android","draft":false}}},{"node":{"excerpt":"JVM 자바 가상 머신 Java 프로그램을 모든 장치 또는 OS에서 실행할 수 있도록 한다. (”Write once, run anywhere”) Java와 OS 사이에서 동작하며, Java가 OS에 영향을 받지 않고 재사용이 가능하도록 한다. 메모리 관리(Garbage Collection)를 수행 코드를 load, verify, execute 하며, fa…","fields":{"slug":"/java/jvm/"},"frontmatter":{"date":"January 04, 2022","title":"JVM (Java Virtual Machine)","category":"java","draft":false}}},{"node":{"excerpt":"1. Class Java Java class는 class와 동일한 이름을 가진 파일에 정의된다. 각 파일에는 하나의 class만 정의할 수 있다. Python Python에서는 언제 어디서나 어떤 파일에서든 class를 선언할 수 있다. 2. Object Attributes 모든 객체 지향 언어에는 object에 대한 data를 저장하는 방법이 있다. J…","fields":{"slug":"/java/java-python-oop/"},"frontmatter":{"date":"January 03, 2022","title":"OOP: Java vs Python","category":"java","draft":false}}},{"node":{"excerpt":"POP vs OOP Procedure Oriented Programming: data에 대한 작업을 수행하는 절차나 method를 작성 Object Oriented Programming: data와 method를 모두 포함하는 object를 작성 Class vs Object Class: Object의 template Object: Class의 instan…","fields":{"slug":"/java/oop/"},"frontmatter":{"date":"January 03, 2022","title":"Java OOP (Object Oriented Programming)","category":"java","draft":false}}},{"node":{"excerpt":"Core JavaScript(코어 자바스크립트) 내용 정리 01. Closure의 의미 및 원리 함수형 프로그래밍 언어에서 등장하는 보편적인 특성 (JS 고유의 개념은 아님) Closure(클로저): 어떤 함수에서 선언한 변수를 참조하는 내부함수에서만 발생하는 현상 외부 함수의 변수를 참조하는 내부함수 1 inner 함수에서는 a를 선언하지 않았기 때문에…","fields":{"slug":"/core-javascript/chapter5/"},"frontmatter":{"date":"May 06, 2021","title":"Chapter 5: Closure","category":"[Core JavaScript]","draft":false}}},{"node":{"excerpt":"Core JavaScript(코어 자바스크립트) 내용 정리 01. callback function 콜백 함수: 다른 코드의 인자로 넘겨주는 함수 + 그 제어권도 함께 위임한 함수 callback: 되돌아 호출해달라 ⇒ 어떤 함수 X를 호출하면서 ‘특정 조건일 때 함수 Y를 실행해서 나에게 알려달라’는 요청을 함께 보냄 ⇒ 이 요청을 받은 함수 X는 해당 …","fields":{"slug":"/core-javascript/chapter4/"},"frontmatter":{"date":"April 27, 2021","title":"Chapter 4: Callback Function","category":"[Core JavaScript]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 30: Consider Generators Instead of Returning Lists Return  함수가 결과값들을 나열하기 위해 사용할 수 있는 가장 간단한 방법은 를 return 하는 것이다. Problem 1 새로운 result 값이 나올 때마다  method가 매…","fields":{"slug":"/effective-python/item30/"},"frontmatter":{"date":"April 24, 2021","title":"Item 30: Consider Generators Instead of Returning Lists","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Core JavaScript(코어 자바스크립트) 내용 정리 다른 대부분의 객체지향 언어에서 this는 class로 생성한 instance 객체를 의미 class에서만 사용할 수 있기 때문에 혼란의 여지가 없거나 많지 않다. 그러나, JS에서의 는 어디서든 사용할 수 있다. 함수와 객체(메서드)의 구분이 느슨한 JS에서 this는 실질적으로 이 둘을 구분하…","fields":{"slug":"/core-javascript/chapter3/"},"frontmatter":{"date":"April 22, 2021","title":"Chapter 3: this","category":"[Core JavaScript]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 29: Avoid Repeated Work in Comprehensions by Using Assignment Expressions Dictionary의 특정 key 값에 대한 value를 가져오고 싶을 때 Comprehension의 일반적인 패턴은, 여러 군데에서 같은 계산을…","fields":{"slug":"/effective-python/item29/"},"frontmatter":{"date":"April 21, 2021","title":"Item 29: Avoid Repeated Work in Comprehensions by Using Assignment Expressions","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Core JavaScript(코어 자바스크립트) 내용 정리 01. Execution context Execution context : 실행할 코드에 제공할 환경 정보들을 모아놓은 객체 JS의 동적 언어로서의 성격을 가장 잘 파악할 수 있는 개념 클로저를 지원하는 대부분의 언어에서 이와 유사하거나 동일한 개념이 적용되어 있음 1. Stack 입구가 하나뿐인…","fields":{"slug":"/core-javascript/chapter2/"},"frontmatter":{"date":"April 20, 2021","title":"Chapter 2: Execution Context (실행 컨텍스트)","category":"[Core JavaScript]","draft":false}}},{"node":{"excerpt":"Core JavaScript(코어 자바스크립트) 내용 정리 01. 데이터 타입의 종류 1. Primitive type Number, String, Boolean, null, undefined, Symbol 값이 담긴 주솟값을 바로 복제 immutability 2. Reference type Object, Array, Function, Date, RegEx…","fields":{"slug":"/core-javascript/chapter1/"},"frontmatter":{"date":"April 18, 2021","title":"Chapter 1: Data Type","category":"[Core JavaScript]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 28: Avoid More Than Two Control Subexpressions in Comprehensions Comprehensions에서 control subexpressions를 2개 이상 사용하는 것은 지양하라. (최대 2개까지만 사용하자.) Item 27에서 봤던…","fields":{"slug":"/effective-python/item_28/"},"frontmatter":{"date":"April 17, 2021","title":"Item 28: Avoid More Than Two Control Subexpressions in Comprehensions","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Part 4. Comprehensions and Generators Python은 간단한 반복과 파생적인 data 구조를 생성시키기 위한 comprehensions 문법을 제공한다. 이러한 processing 스타일은, 값들이 함수에 점진적으로 return되도록 하는 generators…","fields":{"slug":"/effective-python/item_27/"},"frontmatter":{"date":"January 12, 2021","title":"Item 27: Use Comprehensions Instead of 'map' and 'filter'","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"0부터 4까지 정수들의 제곱을 각각 한줄씩 print 하기 Solution 1: for loop 쉽게 떠올릴 수 있는 for문을 사용한 방법 Solution 2: list comprehension 간단한 for문이라면 list comprehension을 적용하기 쉽다. 보기에는 다를 것 없어 보이지만, ipython으로 실행해봤을 때 위의 for문과 다른…","fields":{"slug":"/python/arbitrary_arguments_list/"},"frontmatter":{"date":"January 11, 2021","title":"Arbitrary Argument List","category":"python","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 26: Define Function Decorators with  python은 함수에 적용할 수 있는 decorators 가 있다. decorator는 감싸고 있는 함수의 호출 전과 후에 추가적인 코드를 실행할 수 있다. 즉, decorators는 input arguments…","fields":{"slug":"/effective-python/item_26/"},"frontmatter":{"date":"January 09, 2021","title":"Item 26: Define Function Decorators with 'functools.wraps'","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 25: Enforce Clarity with Keyword-Only and Positional-Only Arguments keyword arguments를 사용하면, 코드의 다양한 use cases를 명확하게 이해할 수 있게 해준다. Keyword-only arguments p…","fields":{"slug":"/effective-python/item_25/"},"frontmatter":{"date":"January 08, 2021","title":"Item 25: Enforce Clarity with Keyword-Only and Positional-Only Arguments","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 24: Use None and Docstrings to Specify Dynamic Default Arguments Case 1 와 같이 변하는 값을 keyword argument의 default 값으로 사용해야 할 수도 있다. 그러나 default argument value는…","fields":{"slug":"/effective-python/item_24/"},"frontmatter":{"date":"September 21, 2020","title":"Item 24: Default Arguments","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 23: Provide Optional Behavior with Keyword Arguments 대부분의 다른 프로그래밍 언어들과 마찬가지로, 파이썬도 함수를 호출할 때 position으로 arguments를 전달할 수 있다. (positional arguments) keywor…","fields":{"slug":"/effective-python/item_23/"},"frontmatter":{"date":"September 20, 2020","title":"Item 23: Provide Optional Behavior with Keyword Arguments","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 22: Reduce Visual Noise with Variable Positional Arguments 를 사용하여 positional arguments 개수를 다양하게 받을 수 있는 함수는, 함수 호출을 더 깔끔하게 만든다. positional arguments : ,  라…","fields":{"slug":"/effective-python/item_22/"},"frontmatter":{"date":"September 20, 2020","title":"Item 22: Reduce Visual Noise with Variable Positional Arguments","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 21: Know How Closures Interact with Variable Scope 그룹별로 묶어서 sorting 할 때 closures : 변수를 정의한 범위 내에서 변수를 나타내는 함수 python에서 함수들은, 변수에 할당할 수도 있고 다른 함수의 argument가…","fields":{"slug":"/effective-python/item_21/"},"frontmatter":{"date":"September 19, 2020","title":"Item 21: Closure and Scope","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 20: Prefer Raising Exceptions to Returning   하는 대신에  하라. function에 이 있을 때, 결과값이 0인 경우와 None 경우가 생길 수 있다. 이 경우, 조건문에서 False-equivalent value로 0과 None이 동일하게 …","fields":{"slug":"/effective-python/item_20/"},"frontmatter":{"date":"September 15, 2020","title":"Item 20: Prefer Raising Exceptions to Returning None","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Part 3 Functions Item 19: Never Unpack More Than Three Variables When Functions Return Multiple Values Unpacking syntax (Item 6)는 함수가 한 개 이상의 return 값을 가질 수 있도록…","fields":{"slug":"/effective-python/item_19/"},"frontmatter":{"date":"September 15, 2020","title":"Item 19: Never Unpack More Than Three Variables When Functions Return Multiple Values","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 18: Know How to Construct Key-Dependent Default Values with __missing__ 가 missing key들을 처리할 때 더 짧은 코드로 사용할 수 있다. (Item 16 참조) 많은 경우에, collections의  가 더 나은 …","fields":{"slug":"/effective-python/item_18/"},"frontmatter":{"date":"September 14, 2020","title":"Item 18: Know How to Construct Key-Dependent Default Values with __missing__","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 17: Prefer  Over  to Handle Missing Items in Internal State Case 1 만약 dictionary가 key의 value 값으로  type을 가지며, 다른 사람이 만든 dictionary에 access 해야 하는 경우 get meth…","fields":{"slug":"/effective-python/item_17/"},"frontmatter":{"date":"September 14, 2020","title":"Item 17: Prefer 'defaultdict' Over 'setdefault' to Handle Missing Items in Internal State","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 16: Prefer  Over  and  to Handle Missing Dictionary Keys dictionary의 키가 있는지 없는지 체크할 때,  expression 이나  보다는  method를 사용하라. 어떤 경우에는 보다 가 가장 짧은 option처럼 보이는데,…","fields":{"slug":"/effective-python/item_16/"},"frontmatter":{"date":"September 14, 2020","title":"Item 16: Prefer 'get' Over 'in' and 'KeyError' to Handle Missing Dictionary Keys","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 15: Be Cautious When Relying on dict Insertion Ordering Python 3.5 까지는 dictionary의 key 값에 순서가 없었다. 그래서 입력한 dict element의 순서와 상관없이 임의로 print 되기 때문에, test ca…","fields":{"slug":"/effective-python/item_15/"},"frontmatter":{"date":"September 13, 2020","title":"Item 15: Dictionary Insertion Ordering","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"파이참 쓴지 한달.. 얕은 경험으로 얕은 기능만 써본 후기😂 Visual Studio Code를 사용하다가 PyCharm으로 갈아탄지 얼마 안 되었다. 사실 갈아탄건 아니고 둘 다 사용중인데, vscode의 기능이 pycharm에서는 어떻게 쓰는지 잘 몰라서 번갈아가며 쓰는 중..😂   vscode를 쓰는 사람들은, pycharm이 와 이 있는데 adva…","fields":{"slug":"/python/pycharm_refactor_debug/"},"frontmatter":{"date":"September 12, 2020","title":"[PyCharm] Refactor, Debug","category":"python","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 14: Sort by Complex Criteria Using the key Parameter list의  method는 list 안에 들어있는 elements를 순서대로 재배열한다.  method는 오름차순(ascending order)을 기본으로 한다. strings, in…","fields":{"slug":"/effective-python/item_14/"},"frontmatter":{"date":"September 06, 2020","title":"Item 14: list.sort(key=...)","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 13: Prefer Catch-All Unpacking Over Slicing Unpacking 할 때 slicing 보다는 별표(*)를 활용하자. Unpacking 할 때는 unpacking 되어야 하는 것의 길이를 미리 알아야 한다는 단점이 있다. unpacking 할 것들…","fields":{"slug":"/effective-python/item_13/"},"frontmatter":{"date":"September 05, 2020","title":"Item 13: asterisk(*) for unpacking","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"지난번 python 3.8의 새 기능인 walrus operator에 대해 적었는데,\n이번에는 f-string 관련한 새로운 기능이다. f’{expr=}’ 반쪽만 쓴 것 같지만 새로운 기능이라는 것! python 3.8 이전 버전에서는 f-string을 사용할 때 할당 받을 변수와 input 변수를 다 적어줘야 한다. ➡ name과 age가 두번씩 입력이…","fields":{"slug":"/python/f-string/"},"frontmatter":{"date":"September 01, 2020","title":"f-string `=` (python 3.8)","category":"python","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 12: Avoid Striding and Slicing in a Single Expression 기본적인 striding의 문법은:  slicing과 비슷하게 start index와 end index를 입력하고, 얼마 간격으로 건너뛰기를 할 것인지 stride를 입력한다. st…","fields":{"slug":"/effective-python/item_12/"},"frontmatter":{"date":"August 30, 2020","title":"Item 12: Avoid Striding and Slicing in a Single Expression","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Part 2. Lists and Dictionaries Item 11: Know How to Slice Sequences slicing은 subset의 element에 접근하기 쉽게 해준다. slicing은 list, str, bytes 외에도  과 을 실행시키는 python class…","fields":{"slug":"/effective-python/item_11/"},"frontmatter":{"date":"August 30, 2020","title":"Item 11: Know How to Slice Sequences","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 10: Prevent Repetition with Assignment Expressions Assignment expressions (walrus operator) 을 사용하여 반복을 없애자. 는 ‘a equals b’ 라고 읽는데,  라고 쓰고 ‘a walrus b’ 라고 읽…","fields":{"slug":"/effective-python/item_10/"},"frontmatter":{"date":"August 29, 2020","title":"Item 10: Prevent Repetition with Assignment Expressions","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 9: Avoid else Blocks After for and while Loops Python에는 대부분의 다른 프로그램 언어에서는 가능하지 않은 추가 기능이 있다: 반복문의 block 직후에  block을 사용할 수 있다. 반복문(for loop, while loop) 뒤에…","fields":{"slug":"/effective-python/item_9/"},"frontmatter":{"date":"August 29, 2020","title":"Item 9: Avoid else Blocks After for and while Loops","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 8: Use zip to Process Iterators in Parallel 여러 list들을 동시에 iterate 하고 싶을 때 zip 사용 zip은 각각의 list들이 iterate로 돌 때 같이 묶이는 element들을 차례로 tuple로 생성한다. 이 tuple은 un…","fields":{"slug":"/effective-python/item_8/"},"frontmatter":{"date":"August 29, 2020","title":"Item 8: Use zip to Process Iterators in Parallel","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Dictionary에서 특정 Key값에 해당하는 Value값을 가져오는 방법 1. dictkeyname 만약 dictionary에 들어있지 않은 key값을 넣는다면? ➡ KeyError가 발생한다. 2. dict.get(keyname) 만약 dictionary에 들어있지 않은 key값을 넣는다면? ➡ 아무것도 return 하지 않는다. error도 내지 …","fields":{"slug":"/python/dictionary_get/"},"frontmatter":{"date":"August 28, 2020","title":"dictionary.get() method","category":"python","draft":false}}},{"node":{"excerpt":"버전 이후로 새로 추가된 기능이 있다.  또는  또는  또는  왜 walrus인가 했더니. 바다코끼리가 영어로 walrus인데  이 모양이 바다코끼리의 눈과 엄니를 닮았다고 해서 붙여졌다고 한다. 이런 귀여운 이름이라니 😂 Walrus   책에도 이 assignment expression에 대한 설명이 있다.  ➡ 관련해서 적은 글: Effective P…","fields":{"slug":"/python/walrus_operator/"},"frontmatter":{"date":"August 25, 2020","title":"PEP 572. Walrus operator ( := )","category":"python","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 7: Prefer enumerate Over range Range  는 int의 집합을 반복하는 for loop을 돌릴 때 유용하다. str이 들어있는 list와 같이 data structure를 반복하고 싶다면, 그 list를 그대로 넣어서 반복문을 돌릴 수 있다. index…","fields":{"slug":"/effective-python/item_7/"},"frontmatter":{"date":"August 24, 2020","title":"Item 7: Prefer enumerate Over range","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 6: Prefer Multiple Assignment Unpacking Over Indexing Tuple immutable and ordered sequences of values (값을 바꿀 수 없고 순서가 있음) 가장 simple한 case는, dictionary의 key…","fields":{"slug":"/effective-python/item_6/"},"frontmatter":{"date":"August 24, 2020","title":"Item 6: Prefer Multiple Assignment Unpacking Over Indexing","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 5: Write Helper Functions Instead of Complex Expressions Python 문법에서는 지나치게 복잡하고 읽기 어려운 single-line 표현식이 만들어지기 쉽다. 한문장으로 만들겠다고 함수 안의 함수 안의 메소드로 연결하거나,   ope…","fields":{"slug":"/effective-python/item_5/"},"frontmatter":{"date":"August 24, 2020","title":"Item 5: Write Helper Functions Instead of Complex Expressions","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 4: Prefer Interpolated F-Strings Over C-style Format Strings and str.format F-Strings를 사용하라! Formatting : 미리 정해져있는 text에 data 값을 결합해서, 사람이 읽을 수 있는 하나의 문자열로…","fields":{"slug":"/effective-python/item_4/"},"frontmatter":{"date":"August 23, 2020","title":"Item 4: C-style, str.format(), F-Strings","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Open Source에 기여한다, 이런 말을 많이 듣는다. 그게 어떻게 이루어지는지 몰랐는데, 이번에 간단한 pull request를 날려볼 기회가 생겼다. contribute는 절대 아니고!! 😂 현재 쓰고 있는 이 블로그 template (starter-bee)의 README.md에 use case를 추가하는 것! 이걸 만드신 게 너무 대단하고 감사해…","fields":{"slug":"/commands/open_source_pr/"},"frontmatter":{"date":"August 22, 2020","title":"[Github] How to create Pull Request in a Public Repository","category":"commands","draft":false}}},{"node":{"excerpt":"python에 easter egg가 있다! 를 하면 시..? 같은 게 나오는데 😂 파이썬이 추구하는 가치, 철학 같은 느낌이다. The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex…","fields":{"slug":"/python/the_zen_of_python/"},"frontmatter":{"date":"August 20, 2020","title":"The Zen of Python","category":"python","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 3: Know the Differences Between bytes and str Python에서 character sequence를 나타내는 방식 :  (8-bit values),  (Unicode code points)  : Unicode data ⇒ Binary data …","fields":{"slug":"/effective-python/item_3/"},"frontmatter":{"date":"August 19, 2020","title":"Item 3: Know the Differences Between bytes and str","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Item 2: Follow the PEP 8 Style Guide Python Enhancement Proposal #8 (PEP 8)은 python code의 format에 대한 가이드를 준다. python code 작성에 대한 style guide를 잘 지키면, 다른 사람들과의 협업…","fields":{"slug":"/effective-python/item_2/"},"frontmatter":{"date":"August 19, 2020","title":"Item 2: Follow the PEP 8 Style Guide","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Effective Python: Second Edition 내용 정리 Part 1. Pythonic Thinking The Pythonic style isn’t regimented or enforced by the compiler. (pythonic style은 compiler에 의해 엄격하게 관리되거나 실행되지 않는다.) compile vs interp…","fields":{"slug":"/effective-python/item_1/"},"frontmatter":{"date":"August 19, 2020","title":"Item 1: Know Which Version of Python You’re Using","category":"[Effective Python]","draft":false}}},{"node":{"excerpt":"Database에 한글 data를 입력하거나 출력할 때 생기는 문제 Error MySQL에 있는 한글 data를 입력할 때, 가 발생했다. UnicodeEncodeError: ‘charmap’ codec can’t encode characters in position 252-255: character maps to <undefined> 이미 입력된 한글 …","fields":{"slug":"/error/unicode_encode_error/"},"frontmatter":{"date":"August 18, 2020","title":"UnicodeEncodeError: 'charmap' codec can't encode characters","category":"error","draft":false}}},{"node":{"excerpt":"github blog를 사용할 때 가장 무서운 게, 정체모를 원인모를 error들이다.. 나한테 왜 그러는 거야 대체.. 😭 코드 한 줄 잘못 입력해서 에러가 나는 것과는 또 다른, 이걸 fix 하지 못하면 내 블로그 전부가 날아갈 수 있겠구나 하는 굉장히 무서운 기분 😱 git을 잘 모르고 gatsby 구조를 잘 몰라서 더 무서운 거겠지.. 1. pul…","fields":{"slug":"/blog/yarn_deploy/"},"frontmatter":{"date":"August 17, 2020","title":"`yarn deploy` doesn't seem to work","category":"gatsby","draft":false}}},{"node":{"excerpt":"Django project를 처음 시작할 때 고려해야 하는 사항들이 있다.  명령어로 프로젝트를 시작한 후, 아래의 내용들을 다 처리한 후에 git에 push 하면 초기세팅 완료! 1) .gitignore 기본적으로 git에 올리게 되면, 모든 소스코드가 공유된다. 그러나 올리고 싶지 않은 것이나 올려서는 안 되는 정보들이 있다. 그런 파일이나 폴더 등이…","fields":{"slug":"/django/initial_setting/"},"frontmatter":{"date":"June 15, 2020","title":"Django project Initial settings","category":"django","draft":false}}},{"node":{"excerpt":"Github에서 메일이 잔뜩 왔다. dependabot은 또 뭐고.. security advisory는 또 뭐여.. 처음에는 계정이 털린 건가 무슨 문제가 생긴 건가 싶었다. dependabot mail alert 알아보니, 은 자동화된 보안 수정 프로그램이라고 한다. 보안 경고를 하고, 수정을 위해 pull request까지 보내주는 매우 친절한 봇이다…","fields":{"slug":"/concepts/dependabot/"},"frontmatter":{"date":"June 08, 2020","title":"github dependabot","category":"concepts","draft":false}}},{"node":{"excerpt":"1.  현재 directory의 모든 파일 찾기 (숨겨진 파일과 하위 directory와 파일들도 모두 찾는다.) 2.  찾고자 하는 파일 및 directory의 이름으로 검색 특정 확장자가 들어간 파일을 찾고 싶다면 name에 를 붙여서 검색 중간에 특정 단어가 들어간 파일을 찾고 싶다면 앞뒤로 를 붙여서 검색 으로 찾을 때는 중간 경로는 고려하지 않고…","fields":{"slug":"/commands/find/"},"frontmatter":{"date":"June 01, 2020","title":"shell commands: find","category":"commands","draft":false}}},{"node":{"excerpt":"Gatsby 블로그에서 포스팅마다 설정한 category 정보를 썸네일과 본문 페이지에서 보여주기 1. Thumbnail에 category 추가 블로그 포스트 목록 위에는 category별로 분류할 수 있는 메뉴가 있다. 누르면 해당하는 카테고리의 포스트들을 보여주지만, 포스트별로 어떤 카테고리에 담겨있는지는 썸네일만 보고는 알 수 없다. 예를 들어 lo…","fields":{"slug":"/blog/category/"},"frontmatter":{"date":"May 31, 2020","title":"Thumbnail과 Post page에 category 정보 넣기","category":"gatsby","draft":false}}},{"node":{"excerpt":"Login과 Logout을 구현할 때 다음과 같은 절차로 진행한다.    : 아이디와 비밀번호를 담아 log-in 요청   : 정보를 확인 후 로그인 성공 시 access-token 발행  : 전달 받은 access-token을 browser storage에 저장 (쿠키 혹은 세션 스토리지)  : storage에 저장되어 있는 token을 request.…","fields":{"slug":"/django/logout/"},"frontmatter":{"date":"May 25, 2020","title":"Logout API using Cache","category":"django","draft":false}}},{"node":{"excerpt":"각 element들의 중요도 list(priorites)와, 값을 구해야 하는 element의 index(location)가 input으로 주어진다. priorites의 0번째 element의 중요도가 list 중에서 가장 높으면 인쇄하고, 가장 높지 않으면 맨 뒤로 보낸다. 중요도가 높은 순서대로 인쇄할 때, location을 index로 가지는 ele…","fields":{"slug":"/algorithm/printer/"},"frontmatter":{"date":"May 21, 2020","title":"중요도가 높은 순서대로 인쇄할 때 인쇄 순서 찾기","category":"algorithm","draft":false}}},{"node":{"excerpt":"bridge_length: 다리길이(num) / weight: 다리가 견딜 수 있는 무게(num) / truck_weights: 트럭별 무게(list) 위의 3가지를 input으로 받아서, 모든 트럭이 다리를 지나려면 몇 초가 걸리는 지 구하시오. (트럭은 1초에 1만큼 움직인다.) My Solution 1 (Fail) 트럭들을 하나씩 for문으로 돌리고…","fields":{"slug":"/algorithm/truck/"},"frontmatter":{"date":"May 20, 2020","title":"트럭들이 모두 다리를 통과하는 데 걸리는 시간","category":"algorithm","draft":false}}},{"node":{"excerpt":"Situation Django ORM으로, User별로 가장 최근 결제한 주문 건을 return 하고자 하였다. 그래서 결제일자를 기준으로 정렬한 후, user를 기준으로 distinct 하고자 하였다. distinct() 중복값을 제거하고 중복값들은 하나만 남겨서 return 한다. 결과는, NotSupportedError 발생 Cause MySQL에서…","fields":{"slug":"/error/distinct/"},"frontmatter":{"date":"May 15, 2020","title":"NotSupportedError: DISTINCT","category":"error","draft":false}}},{"node":{"excerpt":"()(((()())(())()))(()) 이러한 배열에서 () 모양이 생기는 부분은 쇠막대기를 자르는 레이저 위치이다. 쇠막대기들은 위아래로 쌓여있고, 쇠막대기 간의 끝부분은 겹치지 않는다. 레이저에 의해 잘리는 쇠막대기의 총 개수를 구하라. 프로그래머스에서 level 2 라고 하는데… 어떻게 접근해야할지 너무나 막막했던 문제. 괄호 하나하나 온갖 케이스…","fields":{"slug":"/algorithm/replace/"},"frontmatter":{"date":"May 14, 2020","title":"괄호의 배열에서 쇠막대기 개수 찾기","category":"algorithm","draft":false}}},{"node":{"excerpt":"width를 바꾸고 darkmode를 없애보자! (gatsby-starter-bee 테마 기준) 여백의 미를 참 좋아하지만, content 들어가는 부분의 너비가 너무 작지 않은가 하는 생각이 들었다.   thumbnail을 light-mode 기준으로 바꿨더니 dark-mode는 너무 안 예쁘다.. 본문의 width 변경하기 src/layout/inde…","fields":{"slug":"/blog/layout_darkmode/"},"frontmatter":{"date":"May 10, 2020","title":"Change width, Delete dark-mode","category":"gatsby","draft":false}}},{"node":{"excerpt":"포스팅 썸네일 리스트 css를 바꿔보자! (gatsby-starter-bee 테마 기준) 🔽 블로그 테마의 원래 css는 아래 사진과 같다. (두번째가 hover 되었을 때의 모습)\n 🔽 css 바꾼 후 모습 (두번째가 hover 되었을 때의 모습) thumbnail에서 바꿔야 할 부분은, border hover 날짜가 나오도록 설정 border src/…","fields":{"slug":"/blog/thumbnail/"},"frontmatter":{"date":"May 09, 2020","title":"Edit Post Thumbnail","category":"gatsby","draft":false}}},{"node":{"excerpt":"개발을 시작한 후, Github Blog를 쓰기 시작했다. 처음부터 끝까지 웹사이트를 만들기에는 막막했던 터라 Gatsby starter를 활용하여 만들었다. Gatsby에서는 starter를 위한 template을 제공해주고 있어서 가져다가 조금만 수정해서 사용할 수 있다. ▶ gatsby starter template 구경하기 첫 gatsby blog…","fields":{"slug":"/blog/build_gatsby_blog/"},"frontmatter":{"date":"May 04, 2020","title":"Start Github Blog (Gatsby)","category":"gatsby","draft":false}}},{"node":{"excerpt":"BF-TEST 해보기 프로젝트 소개 Front-end vs Back-end, 나의 성향에 맞는 포지션을 알아보는 심리테스트 프로젝트를 하게 된 계기 개발을 시작하고 프론트엔드와 백엔드 사이에서 선택하지 못하고 고민했던 시간들.\n양쪽을 비교하는 글과 영상을 많이도 찾아봤다. 네 성향은 이러니까 넌 이거 하라고 누군가 답을 정해줬으면 좋겠다는 생각을 참 많이…","fields":{"slug":"/bftest/retrospective/"},"frontmatter":{"date":"May 03, 2020","title":"[BF-TEST] Retrospective","category":"project","draft":false}}},{"node":{"excerpt":"Github은 협업하기에 아주 좋은 툴이다. 여러 사람이 함께 작업을 하다보면 git flow와 버전 관리를 위해, branch를 따서 작업을 하고 branch에서 작업한 것을 push 한다. 간혹 실수로 master에서 작업하고 master에서 commit하고 push하는 경우가 있다. 이를 막기위해 github repository 자체에서 master…","fields":{"slug":"/bftest/master_branch/"},"frontmatter":{"date":"April 21, 2020","title":"git master branch에서 push 못하게 설정","category":"commands","draft":false}}},{"node":{"excerpt":"dataframe.rank() Dataframe에서 특정 column을 기준으로 순위를 return rank의 결과는 소수점 한자리까지 나타남  2.0, 3.5 Ascending (True, False) Method (average, min, max, first) 1) average 동점 발생 시 두 순위의 평균 순위를 반영 method를 지정하지 않으면…","fields":{"slug":"/gopizza/rank_tie/"},"frontmatter":{"date":"April 09, 2020","title":"순위 동점자 처리 : Pandas DataFrame Rank","category":"python","draft":false}}},{"node":{"excerpt":"1. 합집합(union) set.union(set1, set2) set1 | set2 2. 교집합(intersection) set.intersection(set1, set2) set1 & set2 3. 차집합(difference) set.difference(set1, set2)\\ set1 - set2 4. 대칭차집합(symmetric difference)…","fields":{"slug":"/python/set/"},"frontmatter":{"date":"April 08, 2020","title":"Set Operation","category":"python","draft":false}}},{"node":{"excerpt":"Solution 1 : Fail 집합 연산을 쉽게 할 수 있는 set을 사용할 수 있지 않을까? Set 집합 연산 사용하기 case_1이든 case_2든 각각의 list를 set으로 만들어준다음 연산을 해야하는데, 여기에서는 이름이 같은 참가자들이 있으므로 set을 씌우면 중복값이 사라져서 의미가 없다. Solution 2 participant와 comp…","fields":{"slug":"/algorithm/collections/"},"frontmatter":{"date":"April 07, 2020","title":"list 간의 차집합","category":"algorithm","draft":false}}},{"node":{"excerpt":"User별 점수 Ranking View Filter 아래의 filter를 front에서 query string으로 받아서 처리 Dataframe pandas.DataFrame으로 정규화하기 모든 user data를 dataframe으로 만든 다음, dataframe 안에서 order_by로 정렬을 하고, limit로 top 몇 순위까지 보여줄 것인지 잘라…","fields":{"slug":"/gopizza/dataframe/"},"frontmatter":{"date":"April 04, 2020","title":"Pandas DataFrame을 사용한 User별 점수 Ranking","category":"python","draft":false}}},{"node":{"excerpt":"이처럼 각각 다른 단위와 범위의 값을 가진 점수들을, 통일된 점수로 계산할 수 있도록 바꾼다. pandas.DataFrame 한꺼번에 바꿀 수 있도록 모든 data들을 dataframe으로 넣어둔다. Dataframe을 만들 때에는 column name과 해당하는 값의 list를 dictionary로 넣는다.  time_score에 -(minus)를 붙인…","fields":{"slug":"/gopizza/normalization/"},"frontmatter":{"date":"April 03, 2020","title":"Normalization: 정규화","category":"python","draft":false}}},{"node":{"excerpt":"Filter Condition Django에서 User.objects.filter()에 사용되는 filter 조건이 복잡하거나 다른 view에서도 사용해야 한다면 따로 함수로 빼는 것이 가능 filter할 parameter를 받아서, dictoionary에 filter condition들을 넣는다. 함수에서 최종 return한 filter conditio…","fields":{"slug":"/gopizza/timedelta/"},"frontmatter":{"date":"April 02, 2020","title":"Timedelta를 사용하여 period range 설정","category":"python","draft":false}}},{"node":{"excerpt":"Naver Social Login original API code Unit test Django에서는 Unit test를 위한 모듈을 제공하고 있다. startapp을 만들면 자동으로 생성되는 에 작성하고, test를 실행할 때는 로 모든 test를 돌려볼 수 있다.\n모든 api를 직접 request/response를 보내볼 수 없기 때문에, unit t…","fields":{"slug":"/vibe/social_login_unittest/"},"frontmatter":{"date":"March 25, 2020","title":"Unit test : Naver Social Log-in","category":"django","draft":false}}},{"node":{"excerpt":"Naver Social Login Unit test code Vibe는 기본적으로 Naver의 자회사여서 회원가입 자체가 네이버 회원가입이며, 로그인 또한 네이버를 통하는 방법으로 진행하고 개별 회원가입과 로그인은 따로 없다. 네이버 소셜로그인을 진행하기 위해, 네이버 개발자센터에서 앱 사용 등록을 해야한다. Social Log-in 1) 프론트에서 아이…","fields":{"slug":"/vibe/naver_social_login/"},"frontmatter":{"date":"March 24, 2020","title":"Naver Social Log-in","category":"python","draft":false}}},{"node":{"excerpt":"VIBE Backend GitHub Repository Introduction VIBE web site clone project Developed by a team of 6 developers (3 Front-End, 1 React Native, 2 Back-End) Front-End GitHub Repository / React Native GitHub…","fields":{"slug":"/vibe/read_me/"},"frontmatter":{"date":"March 23, 2020","title":"[VIBE Clone] README.md","category":"project","draft":false}}},{"node":{"excerpt":"1. Browser differences Safari, Chrome, Firefox 등 brower는 많은데, 같은 코드여도 브라우저마다 결과가 달랐다. 특히 streaming을 구현할 때 많이 느꼈는데, 노래의 재생시간이 safari에서는 보이지 않았는데 chrome에서는 보였다. 음악을 중간에 눌러서 seek하면서 듣는 기능(오디오 탐색 기능)은 fi…","fields":{"slug":"/vibe/retrospective/"},"frontmatter":{"date":"March 21, 2020","title":"[VIBE Clone] Retrospective","category":"project","draft":false}}},{"node":{"excerpt":"MEDIA_ROOT 프로젝트 settings.py에서 파일이 있는 경로를 MEDIA_URL로 표시해준다. StreamingHttpResponse django에서 HttpResponse, JsonResponse 말고 StreamingHttpResponse를 import 한다. data 읽어오기  : open할 파일경로, 파일 모드, 인코딩 방식 등을 지정할…","fields":{"slug":"/vibe/streaming/"},"frontmatter":{"date":"March 20, 2020","title":"Audio 파일 streaming 방식으로 내보내기","category":"python","draft":false}}},{"node":{"excerpt":"Git Flow : “어떻게 git을 효율적으로 사용할 수 있는가?”에 대한 process Five Branches Hot fix: 급하게 수정을 해야할 때 실제 상용되고 있는 서비스에서 문제가 생겼을 때 여기에서 작업 (master branch를 기준으로 깐다.) ⇒ 다 고쳐지면 Master와 Develop에 merge : 그때그때 삭제하고 다시 까고.…","fields":{"slug":"/study/flow/"},"frontmatter":{"date":"March 17, 2020","title":"git flow","category":"concepts","draft":false}}},{"node":{"excerpt":"git을 통해 작업할 때 중간중간 add와 commit을 하게 되는데, 여러 개의 commit을 날린 후 push를 하면 그동안의 모든 commit들이 남는다. commit 뿐만 아니라 push 할 때 conflict 수정하고 다시 날리는 merge commit 또한 남아서 commit 및 버전 관리가 복잡해진다. 이를 방지하기 위해서 push를 할 때에…","fields":{"slug":"/study/rebase/"},"frontmatter":{"date":"March 13, 2020","title":"git rebase","category":"commands","draft":false}}},{"node":{"excerpt":"List   data끼리 물리적으로 바로 옆에 붙어서 저장되기 때문에 순차적으로 데이터를 저장할 수 밖에 없다. 그래서 순서가 있고, index가 있다. 중복값도 저장된다. index가 있기 때문에 특정 요소를 호출할 때 매우 빠르게 가져올 수 있다. 무조건 물리적으로 옆에 붙어서 나열되어야 하기 때문에 저장되는 data가 많아지면 resizing을 해야…","fields":{"slug":"/study/structure/"},"frontmatter":{"date":"March 12, 2020","title":"Data Structure 자료구조","category":"concepts","draft":false}}},{"node":{"excerpt":"My Solution nums list의 값을 하나씩 체크하면서 0이 나오면 그 값을 없애고 맨 뒤에 0을 붙인다. list에서 중간에 값을 더하거나 뺄 때 주의해야 할 점이 있다. list 중간의 값이 제거되면 그 뒤의 element들은 모두 붙어서 index가 당겨오게 된다. 그래서 for문이 돌면서 list를 수정하면 그 뒤의 for문에서 영향을 받…","fields":{"slug":"/study/codekata_10/"},"frontmatter":{"date":"March 11, 2020","title":"[CodeKata] 10","category":"algorithm","draft":false}}},{"node":{"excerpt":"Modeling: composition Clothes table에 composition(구성요소) field가 있다. 처음에 이걸 어떻게 처리해야 할까 고민이 많았다. 정석은 many to many라고 생각했지만 모든 요소들을 다 분석하고 고려하기가 어려울 것 같아서 하나의 field에 한줄로 넣기로 하였다. front에게 data를 보내주려고 보니, c…","fields":{"slug":"/zara/retrospective2/"},"frontmatter":{"date":"March 08, 2020","title":"[ZARA Clone] Retrospective 2","category":"project","draft":false}}},{"node":{"excerpt":"lambda validate_email / ValidationError email에 와 이 필수로 들어가 있는지 (email 형태인지) 체크해주는 validator KeyError 요청한 key 값이 front에서 들어오지 않았을 때 생기는 error POST일 경우에는 request.body에 key가 담겨서 오기 때문에 except KeyError 처…","fields":{"slug":"/zara/retrospective1/"},"frontmatter":{"date":"March 07, 2020","title":"[ZARA Clone] Retrospective 1","category":"project","draft":false}}},{"node":{"excerpt":"ZARA Backend GitHub Repository Introduction ZARA web site clone project Developed by a team of 5 developers (3 Front-End, 2 Back-End) Front-End GitHub Repository Demo ZARA Clone project Demo Technolo…","fields":{"slug":"/zara/read_me/"},"frontmatter":{"date":"March 06, 2020","title":"[ZARA Clone] README.md","category":"project","draft":false}}},{"node":{"excerpt":"Zara 웹사이트 clone project를 하면서 크롤링 하는 과정이 필요했다.   Python으로 crawling 할 때 많이 쓰이는 beautifulsoup과 selenium으로 시도했는데, selenium 같은 경우에는 버튼을 클릭하거나 스크롤을 조작하는 등 동적인 크롤링이 필요할 때 사용한다. 그러나 selenium은 무겁기 때문에 웬만하면 정적…","fields":{"slug":"/zara/crawling/"},"frontmatter":{"date":"March 04, 2020","title":"Crawling website 접속 차단","category":"error","draft":false}}},{"node":{"excerpt":"My Solution for문을 2번 돌려서, x좌표를 2개씩 찍고 곱하여 면적을 구한다. 가로길이는 2개의 x좌표(index)의 거리 차이로 구한다.\n높이는 물을 담아야 하기 때문에 2개의 높이 중 낮은 높이로 적용한다. Model Solution while문 사용. 점을 두개를 찍어야 하거나, index를 두 개를 동시에 돌릴 때 () while문을 …","fields":{"slug":"/study/codekata_9/"},"frontmatter":{"date":"February 26, 2020","title":"[CodeKata] 9","category":"algorithm","draft":false}}},{"node":{"excerpt":"My Solution python에서 가장 좋아하는 index method. list든 string이든 이 방법으로 얼마든지 잘라올 수 있다. list시작index : 끝index : 다음element와의 index차이 Model Solution while문 사용 맨 앞의 element와 맨 뒤의 element 값을 서로 바꿔주고, 한칸씩 안쪽으로 들어오…","fields":{"slug":"/study/codekata_8/"},"frontmatter":{"date":"February 25, 2020","title":"[CodeKata] 8","category":"algorithm","draft":false}}},{"node":{"excerpt":"My Solution 배열의 길이를 2로 나눠서 과반수인지 구분할 기준을 만든다. nums 배열을 set로 바꾼다. set의 element들을 원본 배열에서 count하여 과반수가 넘는 element를 반환한다. set() 중복값을 없애주지만, 순서가 없고 index도 없다. Model Solution 1 for문을 돌려서 하나씩 +1으로 count 해서…","fields":{"slug":"/study/codekata_7/"},"frontmatter":{"date":"February 22, 2020","title":"[CodeKata] 7","category":"algorithm","draft":false}}},{"node":{"excerpt":"Table 간에 foreign key로 참조 관계를 만들었으면 data를 뽑아낼 때 그 관계를 활용해야겠지. 정보를 가져올 때 주로 쓰인다. Join 원하는 테이블을 조건을 통해서 합친다. Query의 효율성을 위해서 생겼다. 원래는 select를 2-3번씩 하면서 query가 도는데, join은 그걸 한번에 할 수 있다. join은 참조되는 테이블끼리 …","fields":{"slug":"/study/join/"},"frontmatter":{"date":"February 21, 2020","title":"[Django] Table 연결 (ORM의 Join 기능)","category":"django","draft":false}}},{"node":{"excerpt":"My Solution Python에서는 허수를 가 아닌 로 표현한다. 그래서 i를 j로 바꿔준 뒤,  함수로 복소수로 변환한다. 복소수끼리 계산을 한 후, string으로 변환해서 i와 괄호를 로 변환해서 return 한다. complex( ) : string 형태의 복소수를 넣으면 복소수 type으로 변환한다.  : 숫자 2개를 넣으면 (1+3j)의 복…","fields":{"slug":"/study/codekata_6/"},"frontmatter":{"date":"February 20, 2020","title":"[CodeKata] 6","category":"algorithm","draft":false}}},{"node":{"excerpt":"modeling_aquerytool conda 가상환경 생성 ⇒ startproject ⇒ startapp ⇒ app의 models.py 작성 1) 화살표를 받는 요소들을 먼저 class 생성하는 것이 좋다. 참조할 것이 있는 요소를 먼저 생성하면, 참조할 대상이 아직 만들어져 있지 않기 때문이다.  이런 방식으로 quotation(”) 처리를 하면, c…","fields":{"slug":"/study/models/"},"frontmatter":{"date":"February 20, 2020","title":"[Modeling] Django models.py에 적용하기","category":"django","draft":false}}},{"node":{"excerpt":"Situation views.py에서 import bcrypt를 했는데, Django project에서 python manage.py runserver 를 했을 때 발생한 error Cause bcrypt를 인식하지 못하고 없는 모듈로 나온다. bcrypt는 pip install로 설치해줘야 하는 모듈이다. conda 가상환경을 잘못 설정해서 bcrypt…","fields":{"slug":"/error/module_not_found/"},"frontmatter":{"date":"February 20, 2020","title":"ModuleNotFoundError","category":"error","draft":false}}},{"node":{"excerpt":"My Solution Model Solution","fields":{"slug":"/study/codekata_5/"},"frontmatter":{"date":"February 19, 2020","title":"[CodeKata] 5","category":"algorithm","draft":false}}},{"node":{"excerpt":"Modeling은 aquerytool을 이용하여 아래와 같이 작성하였다. modeling_starbucks 1) modeling의 각 table 제목은 database명과 동일하게 한다. 2) Naming할 때, 축약하는게 제일 안좋은 습관이다. img 보다는 image라고 다 써준다. 3) 하나의 category가 여러 개의 product를 가질 수 있…","fields":{"slug":"/study/modeling/"},"frontmatter":{"date":"February 19, 2020","title":"[Modeling] aquerytool Review","category":"project","draft":false}}},{"node":{"excerpt":"My Solution : Fail 괄호의 한 쌍이 각각 같은 개수로 존재하는지 확인한 후, 쌍이 맞으면 닫힌 괄호를 열린 괄호로 바꾼다. 함수 안에 함수 2가지를 만든 후, 2가지 중에 하나라도 만족하면 True를 반환한다. 1)맨 앞과 맨 뒤에서부터 차례로 안쪽으로 들어오면서 형태가 같은지 확인 2)괄호가 앞뒤로 붙어서 형태가 같은지 확인 문제점: ’’…","fields":{"slug":"/study/codekata_4/"},"frontmatter":{"date":"February 18, 2020","title":"[CodeKata] 4","category":"algorithm","draft":false}}},{"node":{"excerpt":"1. App 분리 Account(User정보)랑 Comment랑 app을 분리해야 한다. App을 분리하면 문제가 생겼을 때 빨리 찾을 수 있다. App 분리는 어떤 기준으로 하는 게 좋을지 처음에 잘 생각하는 것이 좋다. 레거시(Legacy)를 개선할 때 이런 식의 app 분리 작업이 진짜 많다. 2. jsonresponse jsonresponse({“…","fields":{"slug":"/study/instagram_review/"},"frontmatter":{"date":"February 18, 2020","title":"[Django] westagram views.py code review","category":"django","draft":false}}},{"node":{"excerpt":"HTTP(HyperText Transfer Protocol) 하이퍼텍스트(HTML) 문서를 교환하기 위해 만들어진 protocol(통신 규약) 프론트엔드 서버와 클라이언트 간의 통신에 사용된다. 백엔드와 프론트엔드 서버 간의 통신에도 사용된다. TCP/IP 기반으로 되어 있다. HTTP 통신 방식 요청(request) / 응답(response) 구조로 되…","fields":{"slug":"/study/http/"},"frontmatter":{"date":"February 17, 2020","title":"[Web] HTTP","category":"concepts","draft":false}}},{"node":{"excerpt":"My Solution 한글자로 의미가 있는 문자열들과, 두개가 합쳐졌을 때 다른 의미를 가지는 문자열들을 따로 dictionary로 만들었다. 두글자의 문자열들을 먼저 치환하고, 한글자 문자열들을 치환하여 값을 도출했다. 한번에 두가지를 동시에 하지는 못하고, for문을 2번 돌릴 수 밖에 없었다. Model Solution 함수 안에 함수가 또 돌아가게…","fields":{"slug":"/study/codekata_3/"},"frontmatter":{"date":"February 17, 2020","title":"[Codekata] 3","category":"algorithm","draft":false}}},{"node":{"excerpt":"Backend가 하는 일 백엔드 API 시스템 Data Pipeline 시스템 -많은 양의 데이터 수집, 가공, 인사이트 도출 Infrastructure 및 아키텍쳐 -서버 생성, 운영, 관리. AWS 같은 서비스가 나오면서 인프라 부분도 backend에서 가능하게 되었다. Backend에서 고민하는 것 동시 접속 유저 증가에 따른 시스템 확장 ex) 유…","fields":{"slug":"/study/backend/"},"frontmatter":{"date":"February 16, 2020","title":"Backend","category":"concepts","draft":false}}},{"node":{"excerpt":"요청과 응답으로 connect 된다. Hosting 호스팅 사용자들은 언제든지 들어오는데, 서버는 24시간 대기를 타고 있어야 한다. 인터넷을 통해서 요청, 응답하는 것이기 때문에 인터넷도 계속 연결되어 있어야 한다. 회사에서 자체적으로 이러한 인프라를 구축하기 어려워서, 이러한 서비스를 해주는 업체가 생겼다. *Hosting 업체) cafe24, AWS…","fields":{"slug":"/study/web/"},"frontmatter":{"date":"February 16, 2020","title":"[Web] How the web works?","category":"concepts","draft":false}}},{"node":{"excerpt":"1991년 Linus Torvals가 개발한 운영체제 오픈소스이며 누구나 코드를 볼 수 있다. Linux File System Hierarchy (FHS) Linux의 directory는 windows의 folder와 동일한 개념이다. FHS의 가장 위에는  directory가 있다. Root directory root directory 안에 하위 dir…","fields":{"slug":"/study/linux/"},"frontmatter":{"date":"February 15, 2020","title":"Linux","category":"concepts","draft":false}}},{"node":{"excerpt":"소위 말하는 검은 화면, dark screen으로 불리는 terminal Backend system이 대부분 Linux 기반의 서버에서 운영된다. 따라서 Linux server에 접속해서 작업 할 때, terminal을 통해 작업하는 경우가 대부분이다. CLI(Command Line Interface): 명령어 인터페이스. UI나 편리한 툴에 의존하는 것…","fields":{"slug":"/study/terminal/"},"frontmatter":{"date":"February 15, 2020","title":"Terminal","category":"concepts","draft":false}}},{"node":{"excerpt":"Shell의 개념 터미널 환경에서 운영체제의 커널(kernel)과 사용자의 유저 스페이스(user space)를 이어주는 인터페이스(interface) 역할을 하는 프로그램 사용자의 명령어를 운영체제에 전달하여 실행하게 하고, 그 결과물을 유저에게 전달한다. Shell Script(쉘 스크립트)라는 쉘 전용 프로그래밍 언어를 사용해서 터미널 환경에서 다양…","fields":{"slug":"/study/shell/"},"frontmatter":{"date":"February 15, 2020","title":"Shell","category":"concepts","draft":false}}},{"node":{"excerpt":"urls.py 에서 path 추가하기 Root directory의 urls.py에서 app으로 path 설정하기 request가 오면 가장 먼저 root directory의 urls.py에서 처리를 한다. 그리고 urlpatterns에서 해당되는 path가 있으면 해당 app의 urls.py로 이동할 수 있도록 보낸다. root_dir/urls.py는 a…","fields":{"slug":"/study/endpoint_5/"},"frontmatter":{"date":"February 15, 2020","title":"[Django] Create Endpoint(5); sign-up, log-in, comments","category":"django","draft":false}}},{"node":{"excerpt":"views.py에서 function 만들기 작성된 models를 가지고 data를 어떻게 가져오고 보내줄지에 대한 로직을 작성한다.  : request.body에 담겨있는 data를 가져와서 python이 알 수 있는 언어로 바꿔준다. dictionary로 나온다. get 함수에서 .objects.values()를 사용하지 않고 for문으로 작성한다면 다…","fields":{"slug":"/study/endpoint_4/"},"frontmatter":{"date":"February 15, 2020","title":"[Django] Create Endpoint(4); sign-up, log-in, comments","category":"django","draft":false}}},{"node":{"excerpt":"app을 만들고 프로젝트에 연결까지 시켰다. 이제 app의 기능을 구현할 차례다.  : 테이블 생성. data를 담을 주머니를 만든다.  : 로직. 데이터 넣고 저장하고 보내고 등등 데이터랑 일한다.  : request를 받으면 연결연결해서, 이걸 처리할 수 있는 endpoint까지 보낸다. models.py에서 class, table 만들기 class명…","fields":{"slug":"/study/endpoint_3/"},"frontmatter":{"date":"February 14, 2020","title":"[Django] Create Endpoint(3); sign-up, log-in, comments","category":"django","draft":false}}},{"node":{"excerpt":"프로젝트의 기본 Setting이 끝났다! 틈틈이 runserver를 해보는 습관!! :) LookupError가 뜬다. root_dir/settings.py 에서 admin app을 주석처리 해놓고, root_dir/urls.py에는 admin app 관련 경로가 아직 남아있기 때문이다. 에서 admin 관련 내용을 삭제한다. *이 프로젝트에서는 admi…","fields":{"slug":"/study/endpoint_2/"},"frontmatter":{"date":"February 14, 2020","title":"[Django] Create Endpoint(2); sign-up, log-in, comments","category":"django","draft":false}}},{"node":{"excerpt":"Web Server Response; 요청을 받아서 뭔가를 준다. body에 데이터를 담아서 주고받는다. http protocol을 사용하여 통신을 한다. http; 서버 80번, https: 443 django를 사용해서 프론트에서 오는 http request를 받아서 다시 response 해주면 된다. JSON 프론트와 데이터를 주고 받을 때에는 JS…","fields":{"slug":"/study/endpoint_1/"},"frontmatter":{"date":"February 14, 2020","title":"[Django] Create Endpoint(1); sign-up, log-in, comments","category":"django","draft":false}}},{"node":{"excerpt":"My Solution1 python list slicing :  받은 숫자를 string으로 바꿔서, slicing을 활용하여 거꾸로 나열한 후 비교한다. My Solution2 for문도 써보기로 했다. 빈 list를 만들고, string화 된 num 값을 하나씩 돌려서 맨 앞부분에 insert 한다. list를 join method로 string으로 …","fields":{"slug":"/study/codekata_2/"},"frontmatter":{"date":"February 13, 2020","title":"[CodeKata] 2","category":"algorithm","draft":false}}},{"node":{"excerpt":"views.py 엔드포인트 뷰를 꾸릴 때 항상 사용하게 되는 대표적인 요소들 json은 json 데이터를 처리하기 위해 import 한다. JSON(JavaScript Object Notation)은 인터넷에서 자료를 주고받을때 널리쓰이는 데이터타입 View 클래스는 직접 생성하지 않고 장고 프레임워크에 내장된 클래스를 상속받아 쓴다. JsonRespon…","fields":{"slug":"/study/model_migrate/"},"frontmatter":{"date":"February 13, 2020","title":"[Django] App(2); Model, migrate","category":"django","draft":false}}},{"node":{"excerpt":"Install Django 1. ubuntu에서 terminal 열기:  전체화면으로 키우기:  2. django 설치 3. django 설치 여부 및 version 확인     *제대로 설치가 되어 있지 않다면, 와 같은 error 발생 Start Project 새로운 가상환경을 만들고, 원하는 directory에서 폴더를 만든다. startprojec…","fields":{"slug":"/study/settings/"},"frontmatter":{"date":"February 13, 2020","title":"[Django] App(1); 초기세팅","category":"django","draft":false}}},{"node":{"excerpt":"My Solution 앞뒤 단어의 길이를 비교해서 더 큰 쪽을 longest_word가 되도록 하면서 for문을 돌렸다. 그리고 마지막에 longest_word를 return하는 방식으로 풀었다. for문 안에 if가 들어 갈 수 밖에 없는 구조가 되었다. Model Solution for문을 돌리면서 단어의 길이와 단어 내용을 tuple로 묶어서 lis…","fields":{"slug":"/study/longest_word/"},"frontmatter":{"date":"February 13, 2020","title":"[Python] find longest word","category":"python","draft":false}}},{"node":{"excerpt":"여러 프로젝트를 하는 데 있어, 각 프로젝트 별로 독립적인 파이썬 버전 및 라이브러리가 설치된 개별적인 환경을 가지게 된다. 개발 도중에도 편리하지만 나중에 배포 관리를 하는 데 있어서도 매우 편리하다. python의 대표적인 가상환경 프로그램은 conda와 virtualenv가 있다. 여기서는 conda를 예시로 설명한다. conda 가상환경 목록을 보…","fields":{"slug":"/study/virtual_environment/"},"frontmatter":{"date":"February 12, 2020","title":"Virtual Environment (가상환경)","category":"django","draft":false}}},{"node":{"excerpt":"의도하지 않은 error가 발생하는 상황 exception이 발생하면, 발생한 코드 위치에서 곧바로 프로그램이 종료된다. 그다음 코드들이 실행되지 않는다. exception handling; try-except 방법을 쓰면 exception이 발생해도, 프로그램을 종료하지 않고 다른 로직을 실행한 후 프로그램이 계속 실행되게 할 수 있다. try-exce…","fields":{"slug":"/study/exception_handling/"},"frontmatter":{"date":"February 12, 2020","title":"[Python] Exception handling: try-except","category":"python","draft":false}}},{"node":{"excerpt":"Import 할 때 파이썬이 모듈이나 패키지 찾는 순서 import를 할 경우, python은 다음의 순서대로 file(module)이나 directory(package)를 찾는다.    sys.path에서도 못 찾으면 를 return한다. sys.modules python이 module이나 package를 찾기 위해 가장 먼저 확인하는 곳 단순한 dic…","fields":{"slug":"/study/import_modules/"},"frontmatter":{"date":"February 11, 2020","title":"[Python] How Import statement finds Modules & Packages","category":"python","draft":false}}},{"node":{"excerpt":"Modules 변수나 함수, 클래스 등을 모아놓은 파일이다. 따로 모듈로 모아놓는 이유는: 여러 파일들에서 사용 할 수 있도록 하기 위해서 전체 코드를 한 파일에 넣기에는 많고 따로 정리하기 위해서 Module 사용 방법 python 파일(.py)을 만든 후, 함수나 클래스, 변수 등을 구현한다. 다른 파일에서 불러올 때는: case1) : 확장자 .py…","fields":{"slug":"/study/module_package/"},"frontmatter":{"date":"February 11, 2020","title":"[Python] Module, Package","category":"python","draft":false}}},{"node":{"excerpt":"my solution 1 같은 숫자 리스트를 이중 for문으로 돌려서 하나하나 더하면서 더했을 때 특정 수가 나오는 쌍을 찾는다. 이렇게 하면 같은 index끼리 값이 중복될 수도 있어서 문제가 생길 수 있다. my solution 2 solution 1의 중복 문제를 해결하기 위한 다른 방법 특정 수에서 원본 리스트의 element 값들을 뺀 새로운 값…","fields":{"slug":"/study/codekata_1/"},"frontmatter":{"date":"February 10, 2020","title":"[CodeKata] 1","category":"algorithm","draft":false}}},{"node":{"excerpt":"delete method는 정상 작동하는데, 나머지 method들이 계속 에러가 났다. 문제는, dictionary에 해당 요소가 없어서 None이 return 되어야 하는데, 내 코드에서는 자꾸 유효한 값이 return되는 것이다. delete가 잘 작동되는데 요소가 안 사라지고 남아있을 수가 있나? 알고보니 delete가 문제가 아니라 insert였던…","fields":{"slug":"/study/class_method_attribute/"},"frontmatter":{"date":"February 10, 2020","title":"[Python] Class method, attribute 만들기","category":"python","draft":false}}},{"node":{"excerpt":"class 없이도 코드 구현은 가능하지만, 코드의 구조를 더 효과적으로 구현하기 위해 사용 object oriented programming(객체 지향 프로그래밍); 코드를 클래스 위주로 작성 class 이름은 첫글자로 대문자를 사용한다. 한 단어 이상으로 만들고 싶다면, underscore 사용(snake case)이 아닌 camel case방식으로 n…","fields":{"slug":"/study/class/"},"frontmatter":{"date":"February 09, 2020","title":"[Python] Class","category":"python","draft":false}}},{"node":{"excerpt":"decorator의 사용방법과 closure의 개념, decorator에 인자가 있을 경우 decorator 자체에서 함수를 받는 게 아니라 다른 인자를 받을 경우, 함수를 받는 함수를 그 안에 만들어 주어야 한다. 함수를 꼭 또 한번 써야하나? decorator 함수 자체가 closer를 이용한 중첩 함수이고 그 틀이 정해져 있다.  아래의 내용처럼 함…","fields":{"slug":"/study/decorators/"},"frontmatter":{"date":"February 08, 2020","title":"[Python] Decorators","category":"python","draft":false}}},{"node":{"excerpt":"1. LIST list(); element, element, … mutable; 원본 list를 변경, 수정, 추가가 가능하다. list는 수정이 가능하고 여러 수의 요소들을 저장할 수 있도록 되어 있어서, 차지하는 메모리 용량이 tuple보다 크다. (더 많은 flexibility를 제공하기 때문) 2. TUPLE tuple(); (element, el…","fields":{"slug":"/study/list_tuple_set/"},"frontmatter":{"date":"February 07, 2020","title":"[Python] list, tuple, set","category":"python","draft":false}}},{"node":{"excerpt":"Try 1 list의 모든 요소들을 for문으로 돌려서 각각의 요소들이 홀수인지 판단하고 지우면? ⇒ Fail; remove를 쓰는 순간, elements의 index가 하나씩 앞으로 당겨지게 된다. (list elements의 index는 고정된 것이 아니라, 사라지거나 추가되면 다시 순서대로 정렬된다.) for문은 차례대로 돌고, index는 remo…","fields":{"slug":"/study/list_element_delete/"},"frontmatter":{"date":"February 06, 2020","title":"[Python] list에서 홀수인 요소들만 삭제","category":"python","draft":false}}},{"node":{"excerpt":"My Solution 두 개의 리스트를 합쳐준 다음, 첫번째 element를 리스트 마지막에 append 해준다. 첫번째 element는 뒤에 합쳐진 리스트에 있던 마지막 element로 바꿔준다. 뒤에 합쳐진 리스트의 마지막 element를 삭제한다. list.pop(index) index에 해당하는 element를 삭제한다. index 없이 실행하면 …","fields":{"slug":"/study/change_list_element_location/"},"frontmatter":{"date":"February 05, 2020","title":"[Python] 두 개의 list element 값 위치 바꾸기","category":"python","draft":false}}},{"node":{"excerpt":"list의 기본 형식; element, element, … list()를 써서 list 만들 수 있다. mutable; 원본 list를 변경, 수정, 추가가 가능하다. 1) del 2) remove","fields":{"slug":"/study/list_delete/"},"frontmatter":{"date":"February 04, 2020","title":"[Python] Delete elements from list","category":"python","draft":false}}},{"node":{"excerpt":"list의 기본 형식; element, element, … list()를 써서 list 만들 수 있다. mutable; 원본 list를 변경, 수정, 추가가 가능하다. 1) append 2) + 이 방법을 사용할 때는 square brackets([])를 사용하려 리스트의 형태로 만든 후 추가해야한다. 아니면 TypeError 발생 합한 값들을 다시 저장…","fields":{"slug":"/study/list_add/"},"frontmatter":{"date":"February 03, 2020","title":"[Python] Add elements to list","category":"python","draft":false}}},{"node":{"excerpt":"string concatenation(문자열 더하기) 아래의 3가지는 모두 Hello, world라고 출력된다. literal string interpolation 따옴표 앞에 f를 붙이면 f다음에 오는 string 값을 literal string interpolation라고 인지하고 string 안에 있는 변수들을 실제 값으로 치환한다. 치환하고 싶은 …","fields":{"slug":"/study/strings/"},"frontmatter":{"date":"February 02, 2020","title":"[Python] print() 문자열 출력","category":"python","draft":false}}},{"node":{"excerpt":"함수 호출 시, parameter 값 전달 1. positional arguments 함수를 사용할 때, 순서를 맞추어서 parameter 값을 전달 2. keyword arguments 함수를 사용할 때, 순서 대신에 parameter의 이름에 넣는 방식으로 값을 전달 3. Mixing positional arguments and keyword argu…","fields":{"slug":"/study/function_parameters/"},"frontmatter":{"date":"February 01, 2020","title":"[Python] Function Parameters","category":"python","draft":false}}},{"node":{"excerpt":"변수 이름 시작 글자 첫 글자는 알파벳이나 underscore(_)로 시작. 숫자로는 시작 못함 변수에 띄어쓰기가 있으면 안 된다. 띄어쓰기 대신에 사용하는 방식이 있는데, 파이썬에서는 snake case를 주로 사용 case sensitive 대문자와 소문자가 구분이 된다. hello와 hellO는 전혀 다른 변수명이다.","fields":{"slug":"/study/python_variables/"},"frontmatter":{"date":"January 31, 2020","title":"[Python] 변수명","category":"python","draft":false}}},{"node":{"excerpt":"My Solution parameter로 받을 argument가 적으면, 나머지 parameter들은 undefined로 입력된다. 각각의 값이 undefined일 경우를 if문을 사용하여 구현했다. Model Solution undefined가 false로 작용하고, 값이 입력되어 있으면 true가 된다는 점을 이용하여 작성했다.","fields":{"slug":"/study/argument/"},"frontmatter":{"date":"January 30, 2020","title":"[JS] argument가 parameter 개수보다 적을 경우의 문제","category":"javascript","draft":false}}},{"node":{"excerpt":"Array에 꼭 차례대로 요소를 추가하지 않아도 원하는 위치에 할당 가능하다. 그런 경우에 비어있는 index에는 undefined가 자동으로 할당된다. push array의 맨 마지막에 요소를 추가 unshift array의 맨 앞부분에 요소를 추가 pop array의 맨 마지막 요소가 제거되고, 제거된 값을 반환한다.","fields":{"slug":"/study/array_method/"},"frontmatter":{"date":"January 30, 2020","title":"[JS] Array([ ]) method","category":"javascript","draft":false}}},{"node":{"excerpt":"typeof : 정의되지 않은 변수    : 함수를 제외한 객체 또는 “object”  null null이라는 data type은 object로 반환된다. 빈 객체를 참조하고 있기 때문이다.   Array(배열)는 확장된 Object(객체)이다. 빈 배열도 data type은 object로 반환된다. undefined var, let, const를 사용해…","fields":{"slug":"/study/data_type/"},"frontmatter":{"date":"January 30, 2020","title":"[JS] Data Type","category":"javascript","draft":false}}},{"node":{"excerpt":"new Date() 현재 날짜와 시간까지 나온다. 시간이 흐른다고 해서 이 값이 변하지는 않는다. 코드가 실행되는 순간의 현재 시간이 담긴다. 특정 날짜를 parameter로 넘겨주면, 해당 날짜의 Date를 반환할 수 있다. GMT (Greenwich Mean Time) 컴퓨터 언어에서는 GMT 기준으로 시간을 알려준다. 한국표준시는 GMT+0900으로…","fields":{"slug":"/study/date_time/"},"frontmatter":{"date":"January 30, 2020","title":"[JS] 날짜와 시간","category":"javascript","draft":false}}},{"node":{"excerpt":"Math.round 반올림하여 int 값을 반환 Math.ceil 올림하여 값을 반환 Math.floor 내림하여 값을 반환 Math.random() 0.0000000000000000에서 0.9999999999999999 사이의 값에서 랜덤수를 반환 Math.random()의 값에 *10 해서 1의 자리수 + 소수자리로 값을 구한 후, 내림함수 등을 활용…","fields":{"slug":"/study/math/"},"frontmatter":{"date":"January 30, 2020","title":"[JS] Math method","category":"javascript","draft":false}}},{"node":{"excerpt":"++가 1을 더하는 것인데, ++가 뒤에 있으면 변수 할당을 먼저 실행하고 +1이 된다. ++가 앞에 있으면 +1을 먼저 실행하고 그 후에 변수할당을 한다.","fields":{"slug":"/study/math_expressions/"},"frontmatter":{"date":"January 30, 2020","title":"[JS] Math Expressions","category":"javascript","draft":false}}},{"node":{"excerpt":": 함수를 정의할 때 () 안에 적는다. : 함수를 호출하면서 () 안에 적는다. 함수에서 parameter를 적어둔 상태일 경우에 argument를 전달해서 사용 가능하다.","fields":{"slug":"/study/parameter_argument/"},"frontmatter":{"date":"January 30, 2020","title":"[JS] parameter(매개변수), argument(인자)","category":"javascript","draft":false}}},{"node":{"excerpt":"Math.random()은 0.0000000000000000에서 0.9999999999999999 사이의 random한 값을 return한다. Math.floor()는 값을 내림하여 반환한다. Model Solution","fields":{"slug":"/study/random_number/"},"frontmatter":{"date":"January 30, 2020","title":"[JS] get random number between two numbers","category":"javascript","draft":false}}},{"node":{"excerpt":"긴 문장 안에 변수들이 들어가야 하면 + 로 일일이 연결을 해주기가 귀찮다. 이때는 format를 사용해서 작성할 수 있다. Python에서 f formatting이 있었다면, JS는 ${} 를 활용한다. {} 안에 들어가는 것은 변수다.","fields":{"slug":"/study/text_format/"},"frontmatter":{"date":"January 30, 2020","title":"[JS] Text formatting","category":"javascript","draft":false}}},{"node":{"excerpt":"웹 페이지와 상호작용하도록 만들어진 언어 JavaScript를 실행시키려면: 브라우저가 존재해야 하고, HTML 파일이 있어야 하고, HTML 파일에서 JavaScript 파일을 연결시켜줘야 한다. 변수 이름 한 파일에서 같은 변수 이름을 중복해서 사용할 수 없다. 대소문자 구문 - 변수이름, 함수이름, 연산자 모두 대소문자를 구분한다. 변수 이름을 정할…","fields":{"slug":"/study/variables/"},"frontmatter":{"date":"January 30, 2020","title":"[JS] JavaScript 개념 및 변수","category":"javascript","draft":false}}},{"node":{"excerpt":"Internet은 1950년대 군사적 목적으로 만들어졌다. 물리적으로 떨어져 있는 각각의 군사기지끼리 데이터를 전송하는 목적. 요즘 우리가 흔히 말하는 인터넷, www(world wide web)은 1990년대에 만들어졌고, http(Hypertext Transfer Protocol)와 html(HyperText Markup Language)도 함께 개발…","fields":{"slug":"/study/web_history/"},"frontmatter":{"date":"January 29, 2020","title":"웹의 역사와 구성","category":"concepts","draft":false}}}]}},"pageContext":{}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/truck/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"33de4ae3-ef1a-5f15-81bb-2413bae12173","excerpt":"bridge_length: 다리길이(num) / weight: 다리가 견딜 수 있는 무게(num) / truck_weights: 트럭별 무게(list) 위의 3가지를 input으로 받아서, 모든 트럭이 다리를 지나려면 몇 초가 걸리는 지 구하시오. (트럭은 1초에 1만큼 움직인다.) My Solution 1 (Fail) 트럭들을 하나씩 for문으로 돌리고, 다리 위에 있는 트럭들을 new list에 append 한다. 다리의 무게 제한으로 트럭이 못 올라가면 0을 append해서 new list…","html":"<blockquote>\n<p><strong>bridge_length</strong>: 다리길이(num) / <strong>weight</strong>: 다리가 견딜 수 있는 무게(num) / <strong>truck_weights</strong>: 트럭별 무게(list)<br>\n위의 3가지를 input으로 받아서, 모든 트럭이 다리를 지나려면 몇 초가 걸리는 지 구하시오.<br>\n(트럭은 1초에 1만큼 움직인다.)</p>\n</blockquote>\n<br>\n<h2 id=\"my-solution-1-fail\" style=\"position:relative;\"><a href=\"#my-solution-1-fail\" aria-label=\"my solution 1 fail permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Solution 1 (Fail)</h2>\n<ul>\n<li>트럭들을 하나씩 for문으로 돌리고, 다리 위에 있는 트럭들을 new list에 append 한다.<br>\n다리의 무게 제한으로 트럭이 못 올라가면 0을 append해서 new list가 다리 길이와 똑같은 length를 가지도록 한다.<br>\nnew list에 element가 다리 길이 이상으로 append 되려고 하면 첫번째 값을 pop하여 다리를 다 건넌 트럭이 생기도록 한다.<br>\nfor문이 다 돌 때까지 반복한 후에, list를 append한 count에 다리 길이를 더해서(마지막에 올라선 트럭도 다리길이만큼 다 건너야 하기 때문) return 한다.  </li>\n<li>이 방법으로 답을 얻을 수는 있었으나, 시간 초과 때문에 실패하는 test case가 나왔다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    time_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    trucks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">#다리 위에 있는 트럭 현황</span>\n    \n    <span class=\"token keyword\">for</span> truck <span class=\"token keyword\">in</span> truck_weights<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>trucks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> bridge_length<span class=\"token punctuation\">:</span>\n            trucks<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>trucks<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> truck <span class=\"token operator\">></span> weight<span class=\"token punctuation\">:</span>\n            trucks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            time_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>trucks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> bridge_length<span class=\"token punctuation\">:</span>\n                trucks<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                \n        trucks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>truck<span class=\"token punctuation\">)</span>\n        time_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    answer <span class=\"token operator\">=</span> time_count <span class=\"token operator\">+</span> bridge_length\n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<br>\n<p><strong>My Solution 1의 Test Case 실행 결과</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">테스트 1 〉\t통과 (6.52ms, 10.6MB)\n테스트 2 〉\t통과 (1433.00ms, 10.8MB)\n테스트 3 〉\t통과 (0.04ms, 10.8MB)\n테스트 4 〉\t통과 (335.27ms, 10.8MB)\n테스트 5 〉\t실패 (시간 초과)\n테스트 6 〉\t통과 (1697.82ms, 10.8MB)\n테스트 7 〉\t통과 (5.26ms, 10.7MB)\n테스트 8 〉\t통과 (0.26ms, 10.6MB)\n테스트 9 〉\t통과 (6.24ms, 10.8MB)\n테스트 10 〉통과 (0.30ms, 10.8MB)\n테스트 11 〉통과 (0.05ms, 10.7MB)\n테스트 12 〉통과 (0.31ms, 10.8MB)\n테스트 13 〉통과 (2.14ms, 10.7MB)\n테스트 14 〉통과 (0.05ms, 10.7MB)</code></pre></div>\n<br>\n<h2 id=\"my-solution-2-fail\" style=\"position:relative;\"><a href=\"#my-solution-2-fail\" aria-label=\"my solution 2 fail permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Solution 2 (Fail)</h2>\n<ul>\n<li>for문 안에서 while문이 돌던 solution 1에서, 중복되는 값들을 한번만 적을 수 없을까 고민했다.<br>\nwhile문을 가장 바깥으로 빼고, if문을 넣어서 append 되는 값을 다르게 했다.</li>\n<li>여전히 시간 초과. 오히려 더 느려진 부분도 있다. 왜지..?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    time_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    trucks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword\">while</span> index <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>truck_weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        time_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>trucks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> bridge_length<span class=\"token punctuation\">:</span>\n            trucks<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            \n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>trucks<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> truck_weights<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> weight<span class=\"token punctuation\">:</span>\n            trucks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>truck_weights<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">continue</span>    \n            \n        trucks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    \n    answer <span class=\"token operator\">=</span> time_count <span class=\"token operator\">+</span> bridge_length\n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<br>\n<p><strong>My Solution 2의 Test Case 실행 결과</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">테스트 1 〉\t통과 (6.63ms, 10.7MB)\n테스트 2 〉\t통과 (1353.07ms, 10.7MB)\n테스트 3 〉\t통과 (0.04ms, 10.8MB)\n테스트 4 〉\t통과 (357.46ms, 10.7MB)\n테스트 5 〉\t실패 (시간 초과)\n테스트 6 〉\t통과 (1799.70ms, 10.8MB)\n테스트 7 〉\t통과 (5.74ms, 10.7MB)\n테스트 8 〉\t통과 (0.28ms, 10.7MB)\n테스트 9 〉\t통과 (6.53ms, 10.7MB)\n테스트 10 〉통과 (0.34ms, 10.8MB)\n테스트 11 〉통과 (0.04ms, 10.7MB)\n테스트 12 〉통과 (0.42ms, 10.6MB)\n테스트 13 〉통과 (2.38ms, 10.8MB)\n테스트 14 〉통과 (0.04ms, 10.7MB)</code></pre></div>\n<br>\n<h2 id=\"my-solution-3-fail\" style=\"position:relative;\"><a href=\"#my-solution-3-fail\" aria-label=\"my solution 3 fail permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Solution 3 (Fail)</h2>\n<ul>\n<li>list는 물리적으로 서로 길게 붙어있어서, 요소를 삭제하게 되면 뒤에 있는 모든 값들이 앞으로 한칸씩 이동해야한다.<br>\n이전 solution에서 trucks의 첫번째 요소를 pop 시키는 부분이 계속 그러한 무의미한 이동을 하게 한다고 생각했다.<br>\npop을 없애고 list를 그냥 두는 대신에, list slicing을 이용하여 필요한 부분만 잘라서 쓰도록 바꿨다.</li>\n<li>시간 초과 test case가 하나 더 늘었다.. 대체 왜..?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    time_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    trucks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword\">while</span> index <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>truck_weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        time_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        sum_trucks <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>trucks<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>trucks<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> bridge_length<span class=\"token punctuation\">:</span>\n            sum_trucks <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>trucks<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>bridge_length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            \n        <span class=\"token keyword\">if</span> sum_trucks <span class=\"token operator\">+</span> truck_weights<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> weight<span class=\"token punctuation\">:</span>\n            trucks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>truck_weights<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">continue</span>\n        \n        trucks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n    answer <span class=\"token operator\">=</span> time_count <span class=\"token operator\">+</span> bridge_length\n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<br>\n<p><strong>My Solution 3의 Test Case 실행 결과</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">테스트 1 〉\t통과 (6.28ms, 10.7MB)\n테스트 2 〉\t통과 (5068.36ms, 10.7MB)\n테스트 3 〉\t통과 (0.04ms, 10.7MB)\n테스트 4 〉\t통과 (3173.03ms, 10.9MB)\n테스트 5 〉\t실패 (시간 초과)\n테스트 6 〉\t실패 (시간 초과)\n테스트 7 〉\t통과 (15.90ms, 10.6MB)\n테스트 8 〉\t통과 (0.72ms, 10.5MB)\n테스트 9 〉\t통과 (365.49ms, 10.8MB)\n테스트 10 〉통과 (1.06ms, 10.6MB)\n테스트 11 〉통과 (0.04ms, 10.7MB)\n테스트 12 〉통과 (2.61ms, 10.7MB)\n테스트 13 〉통과 (33.71ms, 10.6MB)\n테스트 14 〉통과 (0.04ms, 10.8MB)</code></pre></div>\n<br>\n<h2 id=\"my-solution-4\" style=\"position:relative;\"><a href=\"#my-solution-4\" aria-label=\"my solution 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Solution 4</h2>\n<ul>\n<li>위의 solution에서는 트럭이 건너지 않게 되더라도 빈 값인 0을 list에 append 해줘서 순서를 알게 했다.<br>\n그러나 아무래도 list의 길이가 길어질수록 pop이나 sum을 계산할 때 엄청난 시간이 걸릴 것 같다.<br>\n빈값인 0을 넣지 않고, 트럭 무게와 트럭이 다리를 건너는 순서를 tuple 값으로 묶어서 순서를 알 수 있도록 변경했다.</li>\n<li>Test case가 드디어 전부 통과했다. 하지만 이게 과연 최선인지.. 분명 더 좋은 방법이 있을 것 같은데..</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    time_count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    index1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    trucks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> truck_weights<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    index2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword\">while</span> index1 <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>truck_weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        time_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        \n        <span class=\"token keyword\">if</span> time_count <span class=\"token operator\">-</span> trucks<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> bridge_length<span class=\"token punctuation\">:</span>\n            index2 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            \n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> trucks<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> truck_weights<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> weight<span class=\"token punctuation\">:</span>\n            trucks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>time_count<span class=\"token punctuation\">,</span> truck_weights<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            index1 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    \n    answer <span class=\"token operator\">=</span> time_count <span class=\"token operator\">+</span> bridge_length\n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<br>\n<p><strong>My Solution 4의 Test Case 실행 결과</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">테스트 1 〉\t통과 (0.87ms, 10.7MB)\n테스트 2 〉\t통과 (18.85ms, 10.7MB)\n테스트 3 〉\t통과 (0.04ms, 10.8MB)\n테스트 4 〉\t통과 (41.61ms, 10.8MB)\n테스트 5 〉\t통과 (329.19ms, 10.8MB)\n테스트 6 〉\t통과 (117.35ms, 10.7MB)\n테스트 7 〉\t통과 (0.87ms, 10.8MB)\n테스트 8 〉\t통과 (0.22ms, 10.6MB)\n테스트 9 〉\t통과 (6.17ms, 10.8MB)\n테스트 10 〉통과 (0.27ms, 10.8MB)\n테스트 11 〉통과 (0.04ms, 10.8MB)\n테스트 12 〉통과 (0.46ms, 10.7MB)\n테스트 13 〉통과 (1.56ms, 10.8MB)\n테스트 14 〉통과 (0.03ms, 10.7MB)</code></pre></div>\n<br>\n<h2 id=\"model-solution\" style=\"position:relative;\"><a href=\"#model-solution\" aria-label=\"model solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model Solution</h2>\n<ul>\n<li>Class를 만들어서 문제를 푸는 방법이 있다. 다른 solution들보다도 처리 속도가 매우 빠르다.<br>\nclass를 만들고 사용하는 방법부터 공부해야겠다.</li>\n</ul>\n<br>\n<br>\n<blockquote>\n<p>Reference: <a href=\"https://programmers.co.kr/learn/challenges\">프로그래머스 스택/큐 다리를 지나는 트럭 문제</a></p>\n</blockquote>\n<br>\n<blockquote>\n<p>#wecode #위코드</p>\n</blockquote>","frontmatter":{"title":"트럭들이 모두 다리를 통과하는 데 걸리는 시간","date":"May 20, 2020","category":"algorithm","thumbnail":null}}},"pageContext":{"slug":"/algorithm/truck/","previous":{"fields":{"slug":"/error/distinct/"},"frontmatter":{"title":"NotSupportedError: DISTINCT","category":"error","draft":false}},"next":{"fields":{"slug":"/algorithm/printer/"},"frontmatter":{"title":"중요도가 높은 순서대로 인쇄할 때 인쇄 순서 찾기","category":"algorithm","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
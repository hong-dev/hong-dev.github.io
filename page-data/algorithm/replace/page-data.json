{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/replace/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8ec8b30f-2bbb-55dc-b0f6-c21100b8013c","excerpt":"()(((()())(())()))(()) 이러한 배열에서 () 모양이 생기는 부분은 쇠막대기를 자르는 레이저 위치이다. 쇠막대기들은 위아래로 쌓여있고, 쇠막대기 간의 끝부분은 겹치지 않는다. 레이저에 의해 잘리는 쇠막대기의 총 개수를 구하라. 프로그래머스에서 level 2 라고 하는데… 어떻게 접근해야할지 너무나 막막했던 문제. 괄호 하나하나 온갖 케이스를 if…","html":"<blockquote>\n<p>()(((()())(())()))(())<br>\n이러한 배열에서 () 모양이 생기는 부분은 쇠막대기를 자르는 레이저 위치이다.<br>\n쇠막대기들은 위아래로 쌓여있고, 쇠막대기 간의 끝부분은 겹치지 않는다.<br>\n레이저에 의해 잘리는 쇠막대기의 총 개수를 구하라.</p>\n</blockquote>\n<br>\n<p>프로그래머스에서 level 2 라고 하는데… 어떻게 접근해야할지 너무나 막막했던 문제.<br>\n괄호 하나하나 온갖 케이스를 if 문으로 체크하면서 삽질하다가 힌트를 얻었다.<br>\n괄호의 배열에만 집중하고 있었는데, 잘린 쇠막대기가 어떻게 생겨나는지 그것부터 이해를 하는 게 중요했다.</p>\n<p><code class=\"language-text\">stack</code> 을 활용해서 괄호의 모양에 따라 list에 넣고 pop하는 방식으로 풀어야 한다고 생각했다.<br>\n그런데 그렇게 하려면, if문이 이중으로 들어가야 할 것 같았다.<br>\n이때 <code class=\"language-text\">replace</code> 를 활용해서 레이저의 위치만 알게 된다면, ’(’ 다음에 ’)‘가 온다는 걸 따로 체크를 하지 않아도 된다.</p>\n<br>\n<h2 id=\"문제의-이해\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%9D%B4%ED%95%B4\" aria-label=\"문제의 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제의 이해</h2>\n<p>’()‘를 ‘0’ 으로 replace 해보면 괄호의 배열은 다음과 같다.</p>\n<blockquote>\n<p>0(((00)(0)0))(0)</p>\n</blockquote>\n<h4 id=\"1-code-classlanguage-textcode일-경우에는-쇠막대기가-하나씩-생겨난다\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textcode%EC%9D%BC-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%8A%94-%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0%EA%B0%80-%ED%95%98%EB%82%98%EC%94%A9-%EC%83%9D%EA%B2%A8%EB%82%9C%EB%8B%A4\" aria-label=\"1 code classlanguage textcode일 경우에는 쇠막대기가 하나씩 생겨난다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">(</code>일 경우에는 쇠막대기가 하나씩 생겨난다.</h4>\n<ul>\n<li><strong><em>쌓인 쇠막대기 수 += 1</em></strong></li>\n<li><strong><em>잘린 쇠막대기 수 변화없음</em></strong><br>\n(막대기가 쌓이기만 했고 잘리지는 않았으므로 잘린 쇠막대기의 수는 늘어나지 않는다.)</li>\n</ul>\n<h4 id=\"2-code-classlanguage-textcode일-경우에는-쇠막대기가-하나씩-사라진다\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textcode%EC%9D%BC-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%8A%94-%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0%EA%B0%80-%ED%95%98%EB%82%98%EC%94%A9-%EC%82%AC%EB%9D%BC%EC%A7%84%EB%8B%A4\" aria-label=\"2 code classlanguage textcode일 경우에는 쇠막대기가 하나씩 사라진다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">)</code>일 경우에는 쇠막대기가 하나씩 사라진다.</h4>\n<ul>\n<li><strong><em>쌓인 쇠막대기 수 -= 1</em></strong></li>\n<li><strong><em>잘린 쇠막대기 수 += 1</em></strong><br>\n(쇠막대기가 끊겼으므로 끊긴 시점에 무조건 쇠막대기 파편이 하나 생기게 되므로 잘린 쇠막대기 수가 늘어난다.)</li>\n</ul>\n<h4 id=\"3-code-classlanguage-text0code일-경우에는-현재-쌓여있는-쇠막대기들이-무조건-잘린다\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-text0code%EC%9D%BC-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%8A%94-%ED%98%84%EC%9E%AC-%EC%8C%93%EC%97%AC%EC%9E%88%EB%8A%94-%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0%EB%93%A4%EC%9D%B4-%EB%AC%B4%EC%A1%B0%EA%B1%B4-%EC%9E%98%EB%A6%B0%EB%8B%A4\" aria-label=\"3 code classlanguage text0code일 경우에는 현재 쌓여있는 쇠막대기들이 무조건 잘린다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <code class=\"language-text\">0</code>일 경우에는 현재 쌓여있는 쇠막대기들이 무조건 잘린다.</h4>\n<ul>\n<li><strong><em>쌓인 쇠막대기 수 변화없음</em></strong><br>\n(쇠막대기가 새로 쌓인 게 아니라 기존의 쇠막대기들을 레이저가 자르는 과정만 있다.)</li>\n<li><strong><em>잘린 쇠막대기 수 += 현재 쌓인 쇠막대기 수</em></strong><br>\n(현재 쌓인 쇠막대기들을 레이저로 자르면 그 수만큼 파편이 생겨나기 때문에 그 수만큼 늘어난다.)</li>\n</ul>\n<br>\n<h2 id=\"model-solution\" style=\"position:relative;\"><a href=\"#model-solution\" aria-label=\"model solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model Solution</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>arrangement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    arrangement <span class=\"token operator\">=</span>  arrangement<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'()'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n    bars <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> arrangement<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">:</span>\n            answer <span class=\"token operator\">+=</span> bars\n        <span class=\"token keyword\">elif</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n            bars <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            bars <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            answer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<br>\n<ul>\n<li>문제를 먼저 이해하는 게 가장 중요하다는 것을 깨달았다.<br>\n어떤 원리로 접근을 해야하고 단계별로 어떤 현상이 벌어지는지를 먼저 확실히 이해하고,<br>\n그 다음에 그걸 코드로 구현하는 것이 삽질을 줄일 수 있는 방법인 것 같다!</li>\n</ul>\n<br>\n<br>\n<blockquote>\n<p>Reference: <a href=\"https://programmers.co.kr/learn/challenges\">프로그래머스 스택/큐 쇠막대기 문제</a></p>\n</blockquote>\n<br>\n<br>\n<blockquote>\n<p>wecode, 위코드</p>\n</blockquote>","frontmatter":{"title":"괄호의 배열에서 쇠막대기 개수 찾기","date":"May 14, 2020","category":"algorithm","thumbnail":null}}},"pageContext":{"slug":"/algorithm/replace/","previous":{"fields":{"slug":"/blog/layout_darkmode/"},"frontmatter":{"title":"Change width, Delete dark-mode","category":"gatsby","draft":false}},"next":{"fields":{"slug":"/error/distinct/"},"frontmatter":{"title":"NotSupportedError: DISTINCT","category":"error","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
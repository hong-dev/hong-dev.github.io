{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/printer/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"4cbdd608-a45d-5411-a31b-e9f9a806992e","excerpt":"각 element들의 중요도 list(priorites)와, 값을 구해야 하는 element의 index(location)가 input으로 주어진다. priorites의 0번째 element의 중요도가 list 중에서 가장 높으면 인쇄하고, 가장 높지 않으면 맨 뒤로 보낸다. 중요도가 높은 순서대로 인쇄할 때, location을 index로 가지는 element는 몇 번째로 인쇄되는지 구하시오. (중요도는 중복되는 값이 존재할 수 있다.) Think…","html":"<blockquote>\n<p>각 element들의 중요도 list(priorites)와, 값을 구해야 하는 element의 index(location)가 input으로 주어진다.<br>\npriorites의 0번째 element의 중요도가 list 중에서 가장 높으면 인쇄하고, 가장 높지 않으면 맨 뒤로 보낸다.<br>\n중요도가 높은 순서대로 인쇄할 때, location을 index로 가지는 element는 몇 번째로 인쇄되는지 구하시오.<br>\n(중요도는 중복되는 값이 존재할 수 있다.)</p>\n</blockquote>\n<br>\n<h2 id=\"think\" style=\"position:relative;\"><a href=\"#think\" aria-label=\"think permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Think</h2>\n<ol>\n<li>중요도의 중복값이 없다면, 중요도 순서대로 줄세워서 계산하면 되지 않을까?<br>\n그렇게 되면 중복값이 있을 때와 없을 때를 따로 계산해야 해서 비효율적이다.</li>\n</ol>\n<p>\n<ol start=\"2\">\n<li>중요도가 높지 않으면 차례대로 list 맨 뒤로 보내야 하는데, list 순서를 바꾸면 index도 바뀐다.<br>\nlocation으로 고정된 index를 받게 되니, index가 함께 가려면 순서가 바뀔 때마다 index를 같이 변경시켜준다. (Model Solution 1)<br>\n혹은, 원본 priorites input을 index와 value로 고정시켜서 묶어버리는 방법도 있다. (Model Solution 2)</li>\n</ol>\n<br>\n<h2 id=\"model-solution-1\" style=\"position:relative;\"><a href=\"#model-solution-1\" aria-label=\"model solution 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model Solution 1</h2>\n<ul>\n<li><strong>priorities의 순서가 바뀔 때마다 location의 값도 바꿔주는 방식</strong></li>\n<li>priorities의 첫번째 값을 pop한다.<br>\n첫번째 값이 중요도가 가장 높은 값이고 location도 0이면, count를 return<br>\n중요도가 가장 높은데 location이 0이 아니라면, count +1 하고 location은 -1 해준다.<br>\n중요도가 가장 높지 않다면 맨 뒤로 보내고, location이 0일 경우에는 그 값도 맨 뒤의 index로, 0이 아닐 경우에는 -1 해준다.  </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>priorities<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    max_num <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>priorities<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        v <span class=\"token operator\">=</span> priorities<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> max_num <span class=\"token operator\">==</span> v<span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> location <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> count\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                location <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            max_num <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>priorities<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            priorities<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> location <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                location <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>priorities<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                location <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></code></pre></div>\n<br>\n<h2 id=\"model-solution-2\" style=\"position:relative;\"><a href=\"#model-solution-2\" aria-label=\"model solution 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model Solution 2</h2>\n<ul>\n<li><strong>priorites의 값을 index와 value의 tuple로 묶어서 고정하는 방식</strong></li>\n<li>맨 앞 tuple의 value 값이 중요도가 가장 높은 value고, location이 index와 일치하다면 count를 return<br>\n중요도가 가장 높은 value지만, location이 index와 일치 하지 않다면 pop<br>\n중요도가 가장 높은 value가 아니라면 pop 한 후 맨 뒤로 append</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>priorities<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>priorities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> \n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> location<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> count\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<br>\n<blockquote>\n<p>Reference: <a href=\"https://programmers.co.kr/learn/challenges\">프로그래머스 스택/큐 프린터 문제</a></p>\n</blockquote>","frontmatter":{"title":"중요도가 높은 순서대로 인쇄할 때 인쇄 순서 찾기","date":"May 21, 2020","category":"algorithm","thumbnail":null}}},"pageContext":{"slug":"/algorithm/printer/","previous":{"fields":{"slug":"/algorithm/truck/"},"frontmatter":{"title":"트럭들이 모두 다리를 통과하는 데 걸리는 시간","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/django/logout/"},"frontmatter":{"title":"Logout API using Cache","category":"django","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
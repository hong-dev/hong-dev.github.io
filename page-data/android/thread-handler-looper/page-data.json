{"componentChunkName":"component---src-templates-blog-post-js","path":"/android/thread-handler-looper/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"3f315072-aaa6-5006-868f-45e2069dd444","excerpt":"Background threads 모든 안드로이드 앱은 main thread를 사용하여 UI operations를 처리한다. 이 main thread에서 long-running operations를 호출하면 앱이 정지하거나 응답하지 않을 수 있다. 만약 network request를 main thread에서 처리한다면, network response를 받을 때까지 UI가 멈춘다. Background threads를 생성하여 이러한 long-running operations를 처리한다면, main…","html":"<h1 id=\"background-threads\" style=\"position:relative;\"><a href=\"#background-threads\" aria-label=\"background threads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background threads</h1>\n<ul>\n<li>모든 안드로이드 앱은 main thread를 사용하여 UI operations를 처리한다.</li>\n<li>\n<p>이 main thread에서 long-running operations를 호출하면 앱이 정지하거나 응답하지 않을 수 있다.</p>\n<p>만약 network request를 main thread에서 처리한다면, network response를 받을 때까지 UI가 멈춘다.</p>\n</li>\n<li><strong>Background threads</strong>를 생성하여 이러한 long-running operations를 처리한다면, main thread는 그동안 UI updates를 처리할 수 있다.</li>\n</ul>\n<br>\n<h1 id=\"thread-pool\" style=\"position:relative;\"><a href=\"#thread-pool\" aria-label=\"thread pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thread pool</h1>\n<ul>\n<li>Thread pool은 queue에서 병렬로 작업을 실행하기위해 관리되는 threads의 집합이다.</li>\n<li>Thread pool에 task를 보내기 위해서, <code class=\"language-text\">ExecutorService</code> interface가 사용된다.<br>\n(<code class=\"language-text\">ExecutorService</code>는 android application component의 Service와는 아무 관련이 없다.)</li>\n<li>\n<p>Threads를 생성하는 것은 expensive 하므로, thread pool은 app이 initialize될 때 딱 한 번만 생성해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// background tasks에서 사용할 threads 4개의 thread pool 생성</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyApplication</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡</h2>\n<ul>\n<li>앱의 모든 thread는 main thread 포함하여 다른 threads와 병렬로 실행될 수 있으므로, code가 <strong>thread-safe</strong> 한지 확인해야 한다.<br>\nThreads 간에 공유되는 variables에 write 하는 것을 피하고, immutable data를 전달한다.</li>\n<li>Threads 간에 state를 공유해야 하는 경우, <strong>lock</strong>과 같은 동기화 메커니즘을 사용하여 access 관리에 주의해야 한다.<br>\n일반적으로, 가능하면 threads 간에 mutable state를 공유하지 않아야 한다.</li>\n</ul>\n<br>\n<h1 id=\"handler\" style=\"position:relative;\"><a href=\"#handler\" aria-label=\"handler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Handler</h1>\n<ul>\n<li>Handler를 사용하여 다른 thread에서 수행할 작업을 queue에 넣을 수 있다.</li>\n<li>각 Handler instance는 single thread 및 해당 thread의 message queue와 연결된다.</li>\n<li>새로운 Handler를 생성하면, <code class=\"language-text\">Looper</code>에 바인딩 된다.</li>\n<li>즉, Handler는 미래의 어떤 시점에서 실행될 messages와 runnables를 schedule 하고, 다른 thread에서 수행할 작업을 queue에 추가한다.</li>\n</ul>\n<br>\n<h1 id=\"looper\" style=\"position:relative;\"><a href=\"#looper\" aria-label=\"looper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Looper</h1>\n<ul>\n<li>Thread에 대한 message loop를 실행하는 데 사용되는 class</li>\n<li>기본적으로 thread에는 연결된 message loop가 없다.<br>\n생성하려면 loop를 실행할 thread에서 <code class=\"language-text\">prepare()</code>를 호출한 다음, loop가 stop 할 때까지 message를 처리하도록 <code class=\"language-text\">loop()</code>를 호출한다.</li>\n<li>Message loop와의 대부분의 interaction은 <code class=\"language-text\">Handler</code> class를 통해 이루어진다.</li>\n<li>\n<p>Looper에는 main thread의 Looper를 검색하는 <code class=\"language-text\">getMainLooper()</code> helper function이 있다.<br>\n이 Looper를 사용하여 Handler를 생성함으로써, main thread에서 코드를 실행할 수 있다.<br>\n꽤 자주 사용할 수 있으므로, 위에서 선언한 <code class=\"language-text\">ExecutorService</code>와 동일한 위치에 Handler의 instance를 저장할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyApplication</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Handler</span> mainThreadHandler <span class=\"token operator\">=</span> <span class=\"token class-name\">HandlerCompat</span><span class=\"token punctuation\">.</span><span class=\"token function\">createAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Looper</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMainLooper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h1 id=\"how-does-it-work\" style=\"position:relative;\"><a href=\"#how-does-it-work\" aria-label=\"how does it work permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How does it work</h1>\n<ul>\n<li>수행되어야 할 여러 개의 tasks들이 들어있는 <code class=\"language-text\">MessageQueue</code>가 있다.</li>\n<li><code class=\"language-text\">Handler</code>는 background로 수행되어야 할 task를 UI threads에서 분리해서  <code class=\"language-text\">MessageQueue</code>에 넣는다.<br>\n이 때, 단순히 처음이나 끝에 넣는 것이 아니라 언제 실행할 것인지 지정할 수 있다.</li>\n<li><code class=\"language-text\">Looper</code>는 이 <code class=\"language-text\">MessageQueue</code>를 계속 반복해서 돌면서, 현재 실행되어야 하는 message를 찾는다.</li>\n<li><code class=\"language-text\">Looper</code>가 실행되어야 하는 message를 <code class=\"language-text\">Handler</code>에게 보내면, <code class=\"language-text\">Handler</code>는 그 작업을 처리한다.</li>\n</ul>\n<br>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><em><a href=\"https://developer.android.com/guide/background/threading\">Running Android tasks in background threads</a><br>\n<a href=\"https://developer.android.com/reference/android/os/Handler\">Handler</a><br>\n<a href=\"https://developer.android.com/reference/android/os/Looper\">Looper</a></em></p>\n</blockquote>","frontmatter":{"title":"Android Thread, Handler, Looper","date":"February 13, 2022","category":"android","thumbnail":null}}},"pageContext":{"slug":"/android/thread-handler-looper/","previous":{"fields":{"slug":"/java/enum/"},"frontmatter":{"title":"Enum in Java","category":"java","draft":false}},"next":{"fields":{"slug":"/java/serializable-parcelable/"},"frontmatter":{"title":"Serializable vs Parcelable","category":"java","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/android/fragment-transaction/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8eb4a46b-2fd3-51a4-9382-6b3725bf1593","excerpt":"Transaction Runtime에서, 는 유저와의 인터랙션에 대한 응답으로 fragments를 추가, 제거, 교체, 또는 다른 동작들을 수행할 수 있다. 이러한 fragment 변경들을 이라고 하며,  class에서 제공하는 API를 사용하여 transaction 내에서 수행할 작업을 지정할 수 있다. 하나의 transaction에 여러 개의 action을 포함할 수 있다. 예를 들어, 하나의 transaction이 여러 개의 fragment…","html":"<h1 id=\"transaction\" style=\"position:relative;\"><a href=\"#transaction\" aria-label=\"transaction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transaction</h1>\n<ul>\n<li>Runtime에서, <code class=\"language-text\">FragmentManager</code>는 유저와의 인터랙션에 대한 응답으로 fragments를 추가, 제거, 교체, 또는 다른 동작들을 수행할 수 있다.</li>\n<li>이러한 fragment 변경들을 <code class=\"language-text\">transaction</code>이라고 하며, <code class=\"language-text\">FragmentTransaction</code> class에서 제공하는 API를 사용하여 transaction 내에서 수행할 작업을 지정할 수 있다.</li>\n<li>하나의 transaction에 여러 개의 action을 포함할 수 있다. 예를 들어, 하나의 transaction이 여러 개의 fragment를 추가하거나 교체할 수 있다.</li>\n<li>\n<p>각각의 transaction을 back stack에 저장할 수도 있고, activity를 통해 뒤로가기 하는 것과 유사하게 사용자는 fragment 변경 사항을 뒤로가기 할 수 있다.</p>\n<p>기본적으로 <code class=\"language-text\">FragmentTransaction</code>의 changes를 back stack에 추가되지 않는데, 저장하려면 <code class=\"language-text\">addToBackStack()</code>를 호출하면 된다.</p>\n</li>\n</ul>\n<br>\n<h1 id=\"how-to-use\" style=\"position:relative;\"><a href=\"#how-to-use\" aria-label=\"how to use permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use</h1>\n<ul>\n<li><code class=\"language-text\">FragmentManager</code>에서 <code class=\"language-text\">beginTransaction()</code>을 호출함으로써 <code class=\"language-text\">FragmentTransaction</code>의 instance를 만들 수 있다.</li>\n<li>\n<p><code class=\"language-text\">FragmentTransaction</code>에 대한 최종 호출은 transaction을 commit 해야 한다.</p>\n<p><code class=\"language-text\">commit()</code> 호출은 모든 작업이 transaction에 추가되었음을 <code class=\"language-text\">FragmentManager</code>에 알린다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">FragmentManager</span> fragmentManager <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">FragmentTransaction</span> fragmentTransaction <span class=\"token operator\">=</span> fragmentManager<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfragmentTransaction<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"add\" style=\"position:relative;\"><a href=\"#add\" aria-label=\"add permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>add</h2>\n<ul>\n<li><code class=\"language-text\">FragmentManager</code>에 fragment를 추가하려면 <code class=\"language-text\">add()</code>를 호출해야 한다.</li>\n<li>Fragment를 위한 <strong>container</strong>의 ID와 fragment의 class 이름을 parameter로 받는다.</li>\n<li>추가된 fragment는 <code class=\"language-text\">RESUMED</code> 상태가 된다.</li>\n<li>이 때, <strong>container</strong>는 view hierarchy의 일부인 <code class=\"language-text\">FragmentContainerView</code>인 것이 좋다.</li>\n</ul>\n<h2 id=\"remove\" style=\"position:relative;\"><a href=\"#remove\" aria-label=\"remove permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>remove</h2>\n<ul>\n<li>Host에서 fragment를 제거하려면, <code class=\"language-text\">remove()</code>를 호출해야 한다.</li>\n<li><code class=\"language-text\">findFragmentById()</code> 또는 <code class=\"language-text\">findFragmentByTag()</code>를 통해 fragment manager에서 검색된 fragment instance를 parameter로 넘긴다.</li>\n<li>제거된 fragment는 <code class=\"language-text\">DESTROYED</code> 상태가 된다.</li>\n</ul>\n<h2 id=\"replace\" style=\"position:relative;\"><a href=\"#replace\" aria-label=\"replace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>replace</h2>\n<ul>\n<li>Container에서 기존의 fragment를 새로운 fragment class의 instance로 교체할 때 <code class=\"language-text\">replace()</code>를 호출한다.</li>\n<li>\n<p><code class=\"language-text\">replace()</code>를 호출하는 것은, <code class=\"language-text\">remove()</code>를 호출하고 동일한 container에 새로운 fragment를 추가하는 것과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">FragmentManager</span> fragmentManager <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">FragmentTransaction</span> transaction <span class=\"token operator\">=</span> fragmentManager<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntransaction<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>fragment_container<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExampleFragment</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntransaction<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<br>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><em><a href=\"https://developer.android.com/guide/fragments/transactions\">Fragment transactions</a></em></p>\n</blockquote>","frontmatter":{"title":"Fragment Transaction","date":"April 01, 2022","category":"android","thumbnail":null}}},"pageContext":{"slug":"/android/fragment-transaction/","previous":{"fields":{"slug":"/java/wildcard/"},"frontmatter":{"title":"Wildcards in generics","category":"java","draft":false}},"next":{"fields":{"slug":"/spark-definitive-guide/01-what-is-apache-spark/"},"frontmatter":{"title":"Chapter 1. What is Apache Spark","category":"[Spark: The Definitive Guide]","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
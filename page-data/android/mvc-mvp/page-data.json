{"componentChunkName":"component---src-templates-blog-post-js","path":"/android/mvc-mvp/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"45eaa81f-5344-5d15-90df-85336cf0e7a7","excerpt":"Android Architecture Patterns Android application을 개발할 때는 software architecture pattern을 사용하여 개발하는 것이 선호된다. Architecture pattern은 project files에 modularity(모듈성)를 부여하고, 모든 코드가 Unit tests에서 cover 되도록 한다. Software를 유지 관리하고 application의 기능을 확장하는 작업을 쉽게 만든다. 하나의 잘못된 변경이 architecture…","html":"<h1 id=\"android-architecture-patterns\" style=\"position:relative;\"><a href=\"#android-architecture-patterns\" aria-label=\"android architecture patterns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Android Architecture Patterns</h1>\n<ul>\n<li>Android application을 개발할 때는 software architecture pattern을 사용하여 개발하는 것이 선호된다.</li>\n<li>Architecture pattern은 project files에 <strong>modularity(모듈성)</strong>를 부여하고, 모든 코드가 Unit tests에서 cover 되도록 한다.</li>\n<li>Software를 유지 관리하고 application의 기능을 확장하는 작업을 쉽게 만든다.</li>\n<li>하나의 잘못된 변경이 architecture의 integrity를 망칠 수 있으므로, 개발팀의 strict discipline이 필요하다.</li>\n</ul>\n<br>\n<br>\n<h1 id=\"mvc-model-view-controller\" style=\"position:relative;\"><a href=\"#mvc-model-view-controller\" aria-label=\"mvc model view controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC (Model-View-Controller)</h1>\n<h2 id=\"1-components\" style=\"position:relative;\"><a href=\"#1-components\" aria-label=\"1 components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Components</h2>\n<h3 id=\"model\" style=\"position:relative;\"><a href=\"#model\" aria-label=\"model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model</h3>\n<ul>\n<li>Application data를 저장</li>\n<li>Interface에 대해 알지 못한다.</li>\n<li>Domain logic(실제 business rules)를 처리하고, database 및 network layer와의 통신을 담당</li>\n</ul>\n<h3 id=\"view\" style=\"position:relative;\"><a href=\"#view\" aria-label=\"view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View</h3>\n<ul>\n<li>화면에 보이는 components를 담고 있는 UI(User Interface) layer</li>\n<li>Model에 저장된 data의 시각화를 제공하고, 사용자와의 상호 작용을 제공</li>\n</ul>\n<h3 id=\"controller\" style=\"position:relative;\"><a href=\"#controller\" aria-label=\"controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controller</h3>\n<ul>\n<li>View와 Model 간의 관계를 설정</li>\n<li>핵심 application logic이 포함되어 있다.</li>\n<li>사용자의 behavior에 대한 정보를 얻고, 필요에 따라 model을 업데이트 한다.</li>\n</ul>\n<h2 id=\"2-동작방식\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D\" aria-label=\"2 동작방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작방식</h2>\n<ul>\n<li><strong>사용자의 action이 Controller에 전달된다.</strong></li>\n<li>Controller는 Model의 data를 update 하고, View의 presentation을 update 한다.</li>\n<li>View는 Model에서 data를 가져와서 화면에 보여준다.</li>\n</ul>\n<h2 id=\"3-특징\" style=\"position:relative;\"><a href=\"#3-%ED%8A%B9%EC%A7%95\" aria-label=\"3 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 특징</h2>\n<ul>\n<li>가장 오래된 design pattern</li>\n<li>Code testability를 높인다.</li>\n<li>Separation을 강력하게 지원하므로, 새로운 기능을 더 쉽게 구현할 수 있다.</li>\n<li>\n<p>MVC가 제대로 적용되었더라도, code layer는 서로 의존성이 있다.</p>\n<p>UI(View)와 Data-access mechanism(Model)은 밀접하게 결합되어 있다.</p>\n<p>Unit testability가 MVP보다 어렵다.</p>\n</li>\n<li>Controller와 View layer는 동일한 activity/fragment에 속한다.</li>\n<li>하나의 Controller가 다양한 View를 선택할 수 있으므로, Controller와 View 간에 many-to-one 관계가 존재한다.</li>\n<li>Data를 어떻게 display 할 것인지에 대한 UI logic를 처리하는 parameter가 없다.</li>\n</ul>\n<br>\n<br>\n<h1 id=\"mvp-model-view-presenter\" style=\"position:relative;\"><a href=\"#mvp-model-view-presenter\" aria-label=\"mvp model view presenter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVP (Model-View-Presenter)</h1>\n<h2 id=\"1-components-1\" style=\"position:relative;\"><a href=\"#1-components-1\" aria-label=\"1 components 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Components</h2>\n<h3 id=\"model-1\" style=\"position:relative;\"><a href=\"#model-1\" aria-label=\"model 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model</h3>\n<ul>\n<li>Data를 저장하기 위한 layer</li>\n<li>Domain logic(실제 business rules)를 처리하고, database 및 network layer와의 통신을 담당</li>\n</ul>\n<h3 id=\"view-1\" style=\"position:relative;\"><a href=\"#view-1\" aria-label=\"view 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View</h3>\n<ul>\n<li>UI(User Interface) layer</li>\n<li>Data 시각화를 제공하고, Presenter에게 알리기 위해 사용자의 action을 추적한다.</li>\n</ul>\n<h3 id=\"presenter\" style=\"position:relative;\"><a href=\"#presenter\" aria-label=\"presenter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Presenter</h3>\n<ul>\n<li>Model에서 data를 가져오고, UI logic을 적용하여 어떤 것을 display 할지 결정한다.</li>\n<li>View의 상태를 관리하고, View에서 사용자의 input notification에 따라 동작한다.</li>\n</ul>\n<h2 id=\"2-동작방식-1\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D-1\" aria-label=\"2 동작방식 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작방식</h2>\n<ul>\n<li><strong>사용자의 action이 View에 전달된다.</strong></li>\n<li>View는 Presenter에게 data를 요청하고, Presenter는 Model에게 data를 요청한다.</li>\n<li>Model이 Presenter로 data를 넘기고, Presenter는 View에게 data를 return 한다.</li>\n<li>View는 Presenter로부터 받은 data를 화면에 나타낸다.</li>\n</ul>\n<h2 id=\"3-특징-1\" style=\"position:relative;\"><a href=\"#3-%ED%8A%B9%EC%A7%95-1\" aria-label=\"3 특징 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 특징</h2>\n<ul>\n<li>MVC에서 발전된 design pattern</li>\n<li>Android components 간의 conceptual relationship이 없다.</li>\n<li>\n<p>Model, View, Presenter later가 분리되어 있어, 코드 유지 및 테스트가 용이하다.</p>\n<p>MVC와 다르게, View는 Model에 느슨하게 연결된다.</p>\n<p>Unit testing is highly supported.</p>\n</li>\n<li>View-Presenter와 Presenter-Model 간의 통신은 interface를 통해 이루어진다.</li>\n<li>하나의 Presenter class가 한 번에 하나의 View를 관리하므로, Presenter와 View 사이에는 one-to-one 관계가 존재한다.</li>\n<li>Single responsibility principle을 따르지 않는다면, Presenter layer가 거대한 클래스로 확장되는 경향이 있다.</li>\n</ul>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://www.geeksforgeeks.org/difference-between-mvc-and-mvp-architecture-pattern-in-android/\"><em>Difference Between MVC and MVP Architecture Pattern in Android</em></a><br>\n<a href=\"https://www.baeldung.com/mvc-vs-mvp-pattern\"><em>Difference Between MVC and MVP Patterns</em></a></p>\n</blockquote>","frontmatter":{"title":"MVC vs MVP Design Pattern","date":"January 15, 2022","category":"android","thumbnail":null}}},"pageContext":{"slug":"/android/mvc-mvp/","previous":{"fields":{"slug":"/leetcode/best-time-to-buy-and-sell-stock/"},"frontmatter":{"title":"[Array] #121 Best Time to Buy and Sell Stock","category":"leetcode","draft":false}},"next":null}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-python/item29/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"cb36244f-517e-5e6a-9647-e8d260e7d80e","excerpt":"Effective Python: Second Edition 내용 정리 Item 29: Avoid Repeated Work in Comprehensions by Using Assignment Expressions Dictionary의 특정 key 값에 대한 value를 가져오고 싶을 때 Comprehension…","html":"<blockquote>\n<p><em>Effective Python: Second Edition 내용 정리</em></p>\n</blockquote>\n<h2 id=\"item-29-avoid-repeated-work-in-comprehensions-by-using-assignment-expressions\" style=\"position:relative;\"><a href=\"#item-29-avoid-repeated-work-in-comprehensions-by-using-assignment-expressions\" aria-label=\"item 29 avoid repeated work in comprehensions by using assignment expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Item 29: Avoid Repeated Work in Comprehensions by Using Assignment Expressions</h2>\n<ul>\n<li>\n<p>Dictionary의 특정 key 값에 대한 value를 가져오고 싶을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">stock <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n\norder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"melon\"</span><span class=\"token punctuation\">]</span>\n\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> order<span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> stock<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> count <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        result<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count\n\nresult\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Comprehension의 일반적인 패턴은, 여러 군데에서 같은 계산을 참조해야 한다. (중복의 발생)<br>\n중복이 있으면 가독성도 떨어지고, 나중에 코드를 수정할 때에도 중복 코드를 동일하게 수정해야 하므로 실수하기도 쉽다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> stock<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> order <span class=\"token keyword\">if</span> stock<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n\nresult\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"walrus-operator---\" style=\"position:relative;\"><a href=\"#walrus-operator---\" aria-label=\"walrus operator    permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Walrus Operator ( := )</h2>\n<ul>\n<li>Assignment expression</li>\n<li>Python 3.8부터 도입 (<a href=\"https://hong-dev.github.io/effective_python/item_10/\">Item 10 참조</a>)</li>\n<li>\n<p><code class=\"language-text\">:=</code>로 변수 할당을 하면 두 번 호출해야할 것을 한번만 호출하여, 불필요한 call과 list의 각 item에 대한 계산을 없애서 performance를 향상시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> num <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> order <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">:=</span> stock<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n\nresult\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Assignment expression을 value expression에서 정의하는 것도 가능하다.</p>\n<p>그러나 comprehension의 다른 부분에 정의되어 있는 변수를 참조한다면 에러가 날 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">:=</span> stock<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> stock <span class=\"token keyword\">if</span> num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\nNameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'num'</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> defined</code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"leaking\" style=\"position:relative;\"><a href=\"#leaking\" aria-label=\"leaking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Leaking</h2>\n<ul>\n<li>\n<p>Comprehension에서 value part에 조건문 없이 walrus operator를 사용하면 loop variable이 containing scope (<a href=\"https://hong-dev.github.io/effective_python/item_21/\">Item 21 참조</a>)로 새는 현상이 발생할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">stock <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n\nhalf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>last <span class=\"token operator\">:=</span> count <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> count <span class=\"token keyword\">in</span> stock<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nhalf\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\nlast\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">0</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>이러한 leak 현상은 기본적인 for loop에서도 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">stock <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> count <span class=\"token keyword\">in</span> stock<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\ncount\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">:=</code>를 사용하지 않은 comprehensions에서는 leakage가 발생하지 않는다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">stock <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\nhalf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>count <span class=\"token operator\">//</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> count <span class=\"token keyword\">in</span> stock<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nhalf\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\ncount\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> NameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'count'</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> defined</code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>Assignment expression은 generator expressions 안에서도 똑같이 동작한다. (Item 32 참조)</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>따라서 <code class=\"language-text\">:=</code>는 comprehension의 if문 내에서만 사용하는 것을 권장한다.</p>\n<p>Assignment expression을 comprehension이나 generator 표현식의 조건문 밖에서 사용할 수 있어도, 사용하지 않는 것을 권한다.</p>\n</li>\n</ul>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://effectivepython.com/\"><em>Effective Python : Second Edition</em></a>  </p>\n</blockquote>","frontmatter":{"title":"Item 29: Avoid Repeated Work in Comprehensions by Using Assignment Expressions","date":"April 21, 2021","category":"[Effective Python]","thumbnail":null}}},"pageContext":{"slug":"/effective-python/item29/","previous":{"fields":{"slug":"/core-javascript/chapter2/"},"frontmatter":{"title":"Chapter 2: Execution Context (실행 컨텍스트)","category":"[Core JavaScript]","draft":false}},"next":{"fields":{"slug":"/core-javascript/chapter3/"},"frontmatter":{"title":"Chapter 3: this","category":"[Core JavaScript]","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
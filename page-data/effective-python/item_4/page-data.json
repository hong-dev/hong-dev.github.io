{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-python/item_4/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"58bb2eca-4364-52dd-b4e4-29ae0fe30679","excerpt":"Effective Python: Second Edition 내용 정리 Item 4: Prefer Interpolated F-Strings Over C-style Format Strings and str.format F-Strings를 사용하라! Formatting : 미리 정해져있는 text에 data 값을 결합해서, 사람이 읽을 수 있는 하나의 문자열로 만드는 과정 1. C-style (% formatting operator)  의 왼쪽에는 predefined text를, 오른쪽에는 input…","html":"<blockquote>\n<p><em>Effective Python: Second Edition 내용 정리</em></p>\n</blockquote>\n<h2 id=\"item-4-prefer-interpolated-f-strings-over-c-style-format-strings-and-strformat\" style=\"position:relative;\"><a href=\"#item-4-prefer-interpolated-f-strings-over-c-style-format-strings-and-strformat\" aria-label=\"item 4 prefer interpolated f strings over c style format strings and strformat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Item 4: Prefer Interpolated F-Strings Over C-style Format Strings and str.format</h2>\n<ul>\n<li><strong>F-Strings를 사용하라!</strong></li>\n<li>Formatting : 미리 정해져있는 text에 data 값을 결합해서, 사람이 읽을 수 있는 하나의 문자열로 만드는 과정</li>\n</ul>\n<br>\n<h2 id=\"1-c-style--formatting-operator\" style=\"position:relative;\"><a href=\"#1-c-style--formatting-operator\" aria-label=\"1 c style  formatting operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. C-style (% formatting operator)</h2>\n<ul>\n<li><code class=\"language-text\">%</code> 의 왼쪽에는 predefined text를, 오른쪽에는 input 값을 적는다.</li>\n<li><code class=\"language-text\">%</code>를 placeholder가 아니라 문자 그대로 사용하고 싶다면, <code class=\"language-text\">%%</code> 두번 연속으로 적어준다.</li>\n<li>\n<p>input으로 들어갈 수 있는 것: 하나의 값 or 여러 개 값의 tuple 형태 or 여러 개 값의 dictionary 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">0b10111011</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">0xc5f</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Binary is %d, hex is %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Binary <span class=\"token keyword\">is</span> <span class=\"token number\">187</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span> <span class=\"token keyword\">is</span> <span class=\"token number\">3167</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<h3 id=\"problem\" style=\"position:relative;\"><a href=\"#problem\" aria-label=\"problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Problem]</h3>\n<h3 id=\"1\" style=\"position:relative;\"><a href=\"#1\" aria-label=\"1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#1.</h3>\n<p>input 값은 predefined text에서 정한 type으로 정해져있기 때문에, tuple 형태의 input에서는 순서가 바뀐다면 type conversion incompatibility (타입 변경에 대해 호환이 되지 않음) 때문에 <code class=\"language-text\">TypeError</code> 가 발생할 수 있다.<br>\n이런 error가 안 생기려면 변경할 때마다 순서를 잘 보고 %의 양쪽이 호환이 잘 되는지 체크해야 하는 불편함이 있다.</p>\n<p><strong>⇒ Solution</strong> : input 값이 tuple이 아니라 <code class=\"language-text\">dictionary</code> 로 가능하고, 이건 값의 순서에 상관없이 key 값으로 match 되기 때문에  input 값끼리의 순서를 바꾸어도 error가 생기지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">key <span class=\"token operator\">=</span> <span class=\"token string\">'age'</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\nold_way <span class=\"token operator\">=</span> <span class=\"token string\">'My %s is %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 이 경우에는 key, value 값의 순서를 바꾸면 error 발생</span>\n\nnew_way <span class=\"token operator\">=</span> <span class=\"token string\">'My %(key)s is %(value)d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 이 경우에는 key, value 순서를 바꿔 {'value': value, 'key': key} 라고 넣어도 ok</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'My age is 20'</span>\n<span class=\"token keyword\">assert</span> old_way <span class=\"token operator\">==</span> new_way</code></pre></div>\n<br>\n<h3 id=\"2\" style=\"position:relative;\"><a href=\"#2\" aria-label=\"2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.</h3>\n<p>input을 간단한 변수가 아니라 그 변수를 조금 수정시킨 형태로 넣는다면, 한줄이 아니라 여러줄이 될 수 있고 그건 가독성에 좋지 않다.</p>\n<br>\n<h3 id=\"3\" style=\"position:relative;\"><a href=\"#3\" aria-label=\"3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#3.</h3>\n<p>predefined text에서 같은 변수가 2개 이상 들어가면, 그 숫자만큼 input tuple 값에 반복해서 적어줘야 한다.<br>\n(predefined text에 들어있는 % 개수와 tuple 안에 들어있는 값들의 개수가 같아야 한다.)<br>\n만약에 단순한 변수만 넣는게 아니라 변수를 다른 method로 처리해서 넣어야 한다면 (대문자로 변경이라든지), 그걸 똑같이 몇 번이고 적어줘야 해서 매우 성가시고 오류가 나기 쉽다.</p>\n<p><strong>⇒ Solution</strong> : input 값을 <code class=\"language-text\">dictionary</code>로 입력한다. 그러면 중복 input 값 없이 dictionary에 해당 key 값만 한 번 넣어주면 된다.</p>\n<br>\n<h3 id=\"4\" style=\"position:relative;\"><a href=\"#4\" aria-label=\"4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#4.</h3>\n<p>problem #1과 #3의 해결책으로 input 값에 tuple 대신 dictionary를 넣으라고 했는데, dictionary를 사용하는 것은 코드가 길어지고 장황해진다.<br>\n<code class=\"language-text\">key</code> name과 colon operator(<code class=\"language-text\">:</code>)가 추가로 더 들어가기 때문이다.<br>\n그리고 dictionary에 들어가는 key 값은 predefined text에도 동일하게 적어줘야 하고, dictionary value에 들어갈 값도 변수로 따로 적어줘야할지 모른다.<br>\ndictionary의 사용은 단점 #2의 문제를 더 악화시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">name <span class=\"token operator\">=</span> <span class=\"token string\">'Hong'</span>\n<span class=\"token string\">'My name is %(name)s.'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># dictionary를 사용하면 `name`을 많이 사용할 수밖에 없다.</span></code></pre></div>\n<p>만약에 dictionary 자체를 다른 변수에 할당하고 predefined text도 따로 변수에 할당한 후, 둘이 합치는 방식이라면 key, value 값이 많을수록 앞 뒤로 왔다갔다 하면서 해석해야 할 것이다. 이렇게 되면 bug 찾기도 힘들고, 가독성도 떨어진다.</p>\n</li>\n</ul>\n<br>\n<h2 id=\"2-the-code-classlanguage-textformatcode-built-in-and-code-classlanguage-textstrformatcode\" style=\"position:relative;\"><a href=\"#2-the-code-classlanguage-textformatcode-built-in-and-code-classlanguage-textstrformatcode\" aria-label=\"2 the code classlanguage textformatcode built in and code classlanguage textstrformatcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. The <code class=\"language-text\">format</code> Built-in and <code class=\"language-text\">str.format</code></h2>\n<h3 id=\"code-classlanguage-textformatcode-function\" style=\"position:relative;\"><a href=\"#code-classlanguage-textformatcode-function\" aria-label=\"code classlanguage textformatcode function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">format()</code> function</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234.5678</span><span class=\"token punctuation\">,</span> <span class=\"token string\">',.2f'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'1,234.57'</span>\n<span class=\"token comment\"># `,`는 천 단위 쉼표</span>\n<span class=\"token comment\"># `.2`는 소수점 두자리까지 표시</span>\n<span class=\"token comment\"># 다만, str 형태로 return 된다.</span>\n\n<span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my string'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'^20s'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'     my string      '</span>\n<span class=\"token comment\"># `^`는 가운데 정렬</span>\n<span class=\"token comment\"># `20`은 총 20칸의 str</span></code></pre></div>\n<h3 id=\"code-classlanguage-textstrformatcode-method\" style=\"position:relative;\"><a href=\"#code-classlanguage-textstrformatcode-method\" aria-label=\"code classlanguage textstrformatcode method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">str.format()</code> method</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">key <span class=\"token operator\">=</span> <span class=\"token string\">'age'</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\n<span class=\"token string\">'My {} is {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'My age is 20'</span></code></pre></div>\n<br>\n<ul>\n<li>\n<p>input 값을 그대로 쓰지 않고 customize 하고 싶을 때는, <code class=\"language-text\">{ }</code> 안에 <code class=\"language-text\">:</code> 을 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token string\">'{:,}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234567890</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'1,234,567,890'</span>\n\n<span class=\"token keyword\">import</span> datetime\nd <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'{:%Y-%m-%d %H:%M:%S}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'2020-08-23 12:09:58'</span></code></pre></div>\n</li>\n<li>\n<p>customize에 대한 자세한 사항은 Python interpreter 창에 help 명령어를 입력하면, 사용할 수 있는 option들과 예시까지 알려준다. 👍</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">help</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FORMATTING'</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li><code class=\"language-text\">{}</code>를 placeholder가 아니라 문자 그대로 사용하고 싶다면, <code class=\"language-text\">{{}}</code> 라고 적어준다.</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">{}</code> 안에 index를 적어서 <code class=\"language-text\">.format()</code> 의 괄호 안에 나열된 input 값의 순서에 따라 사용가능하다.  </p>\n<p>⇒ 값을 추가하거나 순서를 바꿀 때마다 양쪽이 순서대로 호환되는지 매번 체크할 필요가 없다. (위에서 언급한 <strong>Problem #1 해결</strong>)  </p>\n<p>⇒ predefined text에서 같은 index를 여러번 반복될 수 있는데, index에 맞는 input은 한번만 적어줘도 된다. (위에서 언급한 <strong>Problem #3 해결</strong>)</p>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">{}</code> 안에서는 dictionary key, list index, Unicode나 repr strings 등을 조합해서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Hong'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token string\">'First letter is {student[name][0]!r}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>student<span class=\"token operator\">=</span>student<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"First letter is 'H'\"</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>formatting 하기 전에 input 값을 수정해서 format 한다면, 여전히 코드는 길어지고 읽기 힘들어질 것이다. (<strong>Problem #2를 해결할 수 없다.</strong>)</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>C-style에서 dictionary를 사용했을 때, key 값들이 불필요하게 반복되는 문제가 있었다. args로 적는 방법은 dictionary를 사용할 때보다 몇 글자는 줄일 수 있겠지만, 매우 미미하여 이 <code class=\"language-text\">format</code> 방법으로도 중복을 크게 줄일 수는 없다. (<strong>Problem #4를 해결할 수 없다.</strong>)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">c_style_template <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'My name is %(name)s. '</span>\n  <span class=\"token string\">'My age is %(age)d.'</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> c_style_template <span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Hong'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>\n<span class=\"token punctuation\">}</span>\n\nformat_template <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'My name is {name}. '</span>\n  <span class=\"token string\">'My age is {age}.'</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> format_template<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n  name<span class=\"token operator\">=</span><span class=\"token string\">'Hong'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">=</span><span class=\"token number\">15</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"3-interpolated-format-strings-f-strings\" style=\"position:relative;\"><a href=\"#3-interpolated-format-strings-f-strings\" aria-label=\"3 interpolated format strings f strings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Interpolated Format Strings (f-strings)</h2>\n<ul>\n<li>Python 3.6에서는 위의 방식들의 단점들을 한번에 모두 해결하기 위해 f-strings 기능을 추가했다.</li>\n<li>byte string을 적을 때 <code class=\"language-text\">b</code> 를 앞에 붙이거나 raw string을 적을 때 <code class=\"language-text\">r</code>을 붙이는 것처럼, f-string은 predefined text 앞에 <code class=\"language-text\">f</code>를 붙여 작성한다.</li>\n</ul>\n<br>\n<h3 id=\"problem-1-2-4-해결\" style=\"position:relative;\"><a href=\"#problem-1-2-4-%ED%95%B4%EA%B2%B0\" aria-label=\"problem 1 2 4 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem #1, #2, #4 해결</h3>\n<ul>\n<li>\n<p>predefined text를 작성하고 뒤에 input 값을 따로 붙일 필요없이, placeholder 안에 key값을 그대로 넣으면 되기 때문에 중복을 완전히 없앤다. 값을 변경할 때 placeholder와 input의 순서대로 잘 호환이 되는지 고려하지 않아도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">name <span class=\"token operator\">=</span> <span class=\"token string\">'Hong'</span>\nage <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\n\n<span class=\"token string-interpolation\"><span class=\"token string\">f'My name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">. My age is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span></span><span class=\"token string\">.'</span></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'My name is Hong. My age is 15.'</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>placeholder 안에 <code class=\"language-text\">:</code> 을 붙이면, <code class=\"language-text\">str.format</code> method처럼 값을 customize 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token string-interpolation\"><span class=\"token string\">f'My name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token format-spec\">&lt;5</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">. My age is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>age<span class=\"token conversion-option punctuation\">!r</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.'</span></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'My name is Hong . My age is 15.'</span></code></pre></div>\n</li>\n<li>f-strings는 C-style의 tuple case와 dictionary case, format method의 args case와 keyword case, 모든 경우보다도 가장 짧다.</li>\n</ul>\n<br>\n<h3 id=\"problem-2-해결\" style=\"position:relative;\"><a href=\"#problem-2-%ED%95%B4%EA%B2%B0\" aria-label=\"problem 2 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem #2 해결</h3>\n<ul>\n<li>input 값을 수정해서 formatting 하고 싶을 때, C-style과 format method이 여러줄로 나눠져야 했다면 f-strings는 placeholder 괄호 안에 바로 적용하면 된다. 한줄로 간단하게 끝낼 수 있다.\n너무 길어서 한줄로 안 끝난다고 해도, 다른 경우들보다 코드가 훨씬 clear 하다.</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>format specifier options (input 값을 customize 하는 option들) 에 관해서도 <code class=\"language-text\">{}</code>를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">places <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token number\">123456.789</span>\n\n<span class=\"token string-interpolation\"><span class=\"token string\">f'The number is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>places<span class=\"token punctuation\">}</span>f<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'The number is 123,456.79'</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<ul>\n<li>f-strings은 그가 제공하는 표현력, 간결함, 명료함으로 python programmers에게는 최고의 built-in option이다.</li>\n<li>string으로 format 할 일이 있다면 f-strings를 사용하자.</li>\n</ul>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://effectivepython.com/\"><em>Effective Python : Second Edition</em></a>  </p>\n</blockquote>","frontmatter":{"title":"Item 4: C-style, str.format(), F-Strings","date":"August 23, 2020","category":"[Effective Python]","thumbnail":null}}},"pageContext":{"slug":"/effective-python/item_4/","previous":{"fields":{"slug":"/commands/open_source_pr/"},"frontmatter":{"title":"[Github] How to create Pull Request in a Public Repository","category":"commands","draft":false}},"next":{"fields":{"slug":"/effective-python/item_5/"},"frontmatter":{"title":"Item 5: Write Helper Functions Instead of Complex Expressions","category":"[Effective Python]","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
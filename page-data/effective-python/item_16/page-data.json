{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-python/item_16/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"1f765f91-fb86-55fd-8dd4-0519cf4a1250","excerpt":"Effective Python: Second Edition 내용 정리 Item 16: Prefer  Over  and  to Handle Missing Dictionary Keys dictionary의 키가 있는지 없는지 체크할 때,  expression 이나  보다는  method를 사용하라. 어떤 경우에는 보다 가 가장 짧은 option처럼 보이는데, 이런 경우에도 보다는 (Item 17 참조)가 better option이 되는 경우가 많다. 1.  statement with an…","html":"<blockquote>\n<p><em>Effective Python: Second Edition 내용 정리</em></p>\n</blockquote>\n<h2 id=\"item-16-prefer-code-classlanguage-textgetcode-over-code-classlanguage-textincode-and-code-classlanguage-textkeyerrorcode-to-handle-missing-dictionary-keys\" style=\"position:relative;\"><a href=\"#item-16-prefer-code-classlanguage-textgetcode-over-code-classlanguage-textincode-and-code-classlanguage-textkeyerrorcode-to-handle-missing-dictionary-keys\" aria-label=\"item 16 prefer code classlanguage textgetcode over code classlanguage textincode and code classlanguage textkeyerrorcode to handle missing dictionary keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Item 16: Prefer <code class=\"language-text\">get</code> Over <code class=\"language-text\">in</code> and <code class=\"language-text\">KeyError</code> to Handle Missing Dictionary Keys</h2>\n<ul>\n<li>dictionary의 키가 있는지 없는지 체크할 때, <code class=\"language-text\">in</code> expression 이나 <code class=\"language-text\">KeyError</code> 보다는 <code class=\"language-text\">get</code> method를 사용하라.</li>\n<li>어떤 경우에는 <code class=\"language-text\">get</code>보다 <code class=\"language-text\">setdefault</code>가 가장 짧은 option처럼 보이는데, 이런 경우에도 <code class=\"language-text\">setdefault</code>보다는 <code class=\"language-text\">defaultdict</code>(Item 17 참조)가 better option이 되는 경우가 많다.</li>\n</ul>\n<br>\n<h3 id=\"1-code-classlanguage-textifcode-statement-with-an-code-classlanguage-textincode-expression\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textifcode-statement-with-an-code-classlanguage-textincode-expression\" aria-label=\"1 code classlanguage textifcode statement with an code classlanguage textincode expression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">If</code> statement with an <code class=\"language-text\">in</code> expression</h3>\n<ul>\n<li>key가 dictionary에 있는지 확인하고, 없으면 새로운 변수 count에 0이라는 default 값을 할당하고 (있으면 새로운 변수에 현재 value 값을 할당하고), 증가시킨 count의 값을 key에 해당하는 value 값으로 할당한다.</li>\n<li>\n<p>이 방법은 키값이 있을 때는 two accesses to key, one assignment이고, 키값이 없으면 one access, one assignment 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\nfruit <span class=\"token operator\">=</span> <span class=\"token string\">'orange'</span>\n\n<span class=\"token comment\"># Case 1</span>\n<span class=\"token keyword\">if</span> fruit <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\nfruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>코드를 더 줄일 수 있는 방법도 있지만, assignments에 대해 중복이 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Case 2</span>\n<span class=\"token keyword\">if</span> fruit <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">:</span>\n    fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nfruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"2-code-classlanguage-textkeyerrorcode-using-try-except\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textkeyerrorcode-using-try-except\" aria-label=\"2 code classlanguage textkeyerrorcode using try except permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">KeyError</code> using try-except</h3>\n<ul>\n<li>key 값이 없으면 KeyError exception을 사용해서 처리한다.</li>\n<li>\n<p>이 방법은 one access, one assignment 이기 때문에 if … in 보다 더 효율적이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\nfruit <span class=\"token operator\">=</span> <span class=\"token string\">'orange'</span>\n\n<span class=\"token comment\"># Case 1</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\nfruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>역시 코드를 더 줄일 수 있는 방법이 있지만, 할당하는 코드의 중복이 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Case 2</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n    fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"3-dict-code-classlanguage-textgetcode-method\" style=\"position:relative;\"><a href=\"#3-dict-code-classlanguage-textgetcode-method\" aria-label=\"3 dict code classlanguage textgetcode method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. dict <code class=\"language-text\">get</code> method</h3>\n<ul>\n<li>get method는 첫번째 parameter(key)의 value 값을 return하는데, parameter로 넣은 key 값이 dict에 없다면 두번째 parameter를 default value로 return 한다.</li>\n<li>\n<p>이 방법 역시 one access, one assignment이고, 다른 방법들보다 짧게 코드를 쓸 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\nfruit <span class=\"token operator\">=</span> <span class=\"token string\">'orange'</span>\n\ncount <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nfruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"-collectionscounter\" style=\"position:relative;\"><a href=\"#-collectionscounter\" aria-label=\" collectionscounter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 collections.Counter</h3>\n<ul>\n<li>\n<p>위의 예시들처럼 dictionary에 counters를 저장할 때, <code class=\"language-text\">collections.Counter</code>를 사용해보자. 대부분의 필요한 기능들을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\nfruits <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nfruits<span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\nfruits\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nfruits<span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"if-code-classlanguage-textvaluescode-for-keys-are-code-classlanguage-textlistcode-\" style=\"position:relative;\"><a href=\"#if-code-classlanguage-textvaluescode-for-keys-are-code-classlanguage-textlistcode-\" aria-label=\"if code classlanguage textvaluescode for keys are code classlanguage textlistcode  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>if <code class=\"language-text\">values</code> for keys are <code class=\"language-text\">list</code> :</h3>\n<ul>\n<li>만약, dictionary에서 key에 해당하는 value 값이 list라면 위의 방법들이 어떻게 적용될까?</li>\n<li>\n<p><strong>Case 1: in expression</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'b1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\nfruit <span class=\"token operator\">=</span> <span class=\"token string\">'orange'</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'o1'</span>\n\n<span class=\"token keyword\">if</span> fruit <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">:</span>\n    names <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\nnames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><strong>Case 2: KeyError exception</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    names <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n    fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\nnames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><strong>Case 3: get method</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">names <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> names <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\nnames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><strong>Case 4: get method + assignment expression(walrus operation)</strong></p>\n<p>코드가 더 짧고 가독성도 높일 수 있다. (Item 10: Prevent Repetition with Assignment Expressions 참조)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># python 3.8</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names <span class=\"token operator\">:=</span> fruits<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    fruits<span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\nnames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><strong>Case 5: setdefault method</strong></p>\n<p>setdefault method는 key의 value 값을 가지고 오며, key가 없으면 두번째 parameter를 value 값으로 할당해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">names <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nnames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"setdefault-method\" style=\"position:relative;\"><a href=\"#setdefault-method\" aria-label=\"setdefault method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setdefault method</h3>\n<ul>\n<li>장점: get method보다 코드를 더 짧게 줄일 수 있다.</li>\n<li>단점 1: <code class=\"language-text\">setdefault</code> 라는 이름이 딱 봤을 때 그 목적이 뭔지 알기 어렵다.\nvalue를 set만 하는 게 아니라 get하는 method이기도 한데, 왜 <code class=\"language-text\">get_or_set</code> 이라고 하지 않을까?</li>\n<li>단점 2: setdefault는 dict를 copy하는 대신에 직접적으로 접근해서 assign 한다.\n즉, setdefault로 접근한 key에 항상 새로운 default value 값을 구성해야 한다. setdefault를 호출할 때마다 list instance를 할당해야 하니, performance 문제가 생길 수 있다.</li>\n<li>그리고 이 default value를 다른 곳에서 재사용한다면, 또다른 버그들이 생길지 모른다.</li>\n</ul>\n<br>\n<p>💡 <code class=\"language-text\">get</code>은 value 값을 copy 해오고, <code class=\"language-text\">setdefault</code>는 value 값을 dict에 직접 접근해서 새로 할당한 것을 가져온다.</p>\n<ul>\n<li>\n<p>missing dictionary keys를 처리할 때, setdefault를 쓰는 게 더 나은 경우는 별로 없다.</p>\n<p>예를 들면, setdefault가 할당해야하는 default values가 생성하기에 무겁지 않고, mutable(변경 가능)하며, exception이 생길 가능성이 없을 때.</p>\n<p>하지만 이런 경우에 <code class=\"language-text\">setdefault</code> 대신에 <code class=\"language-text\">defaultdict</code>를 사용해야 한다.\n(Item 17: Prefer defaultdict Over setdefault to Handle Missing Items in Internal State 참조)</p>\n</li>\n</ul>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://effectivepython.com/\"><em>Effective Python : Second Edition</em></a>  </p>\n</blockquote>","frontmatter":{"title":"Item 16: Prefer 'get' Over 'in' and 'KeyError' to Handle Missing Dictionary Keys","date":"September 14, 2020","category":"[Effective Python]","thumbnail":null}}},"pageContext":{"slug":"/effective-python/item_16/","previous":{"fields":{"slug":"/effective-python/item_15/"},"frontmatter":{"title":"Item 15: Dictionary Insertion Ordering","category":"[Effective Python]","draft":false}},"next":{"fields":{"slug":"/effective-python/item_17/"},"frontmatter":{"title":"Item 17: Prefer 'defaultdict' Over 'setdefault' to Handle Missing Items in Internal State","category":"[Effective Python]","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-python/item_26/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"adab4cb6-91f8-5735-9f79-5bdc0e831121","excerpt":"Effective Python: Second Edition 내용 정리 Item 26: Define Function Decorators with  python은 함수에 적용할 수 있는 decorators 가 있다. decorator는 감싸고 있는 함수의 호출 전과 후에 추가적인 코드를 실행할 수 있다. 즉, decorators는 input arguments에 접근하고 수정할 수 있으며, 값을 return하거나 exception을 발생시킬 수 있다. args는 tuple, kwargs는 dict…","html":"<blockquote>\n<p><em>Effective Python: Second Edition 내용 정리</em></p>\n</blockquote>\n<h2 id=\"item-26-define-function-decorators-with-code-classlanguage-textfunctoolswrapscode\" style=\"position:relative;\"><a href=\"#item-26-define-function-decorators-with-code-classlanguage-textfunctoolswrapscode\" aria-label=\"item 26 define function decorators with code classlanguage textfunctoolswrapscode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Item 26: Define Function Decorators with <code class=\"language-text\">functools.wraps</code></h2>\n<ul>\n<li>\n<p>python은 함수에 적용할 수 있는 decorators 가 있다.<br>\ndecorator는 감싸고 있는 함수의 호출 전과 후에 추가적인 코드를 실행할 수 있다.<br>\n즉, decorators는 input arguments에 접근하고 수정할 수 있으며, 값을 return하거나 exception을 발생시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@trace</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Return subtracted number\n    \"\"\"</span>\n    <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">2</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>args는 tuple, kwargs는 dict</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper</code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>decorator는 <code class=\"language-text\">@</code>를 사용하여 함수에 적용할 수 있는데, <code class=\"language-text\">@</code> 를 사용하면 function의 decorator를 호출하고 동일한 범위의 original name에 return 값을 할당하는 것과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> trace<span class=\"token punctuation\">(</span>subtract<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># trace(subtract)(6)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token number\">4</span>\n<span class=\"token number\">6</span> <span class=\"token number\">4</span>\n<span class=\"token number\">4</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> subtract<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token number\">4</span>\n<span class=\"token number\">4</span></code></pre></div>\n</li>\n<li>The decorated function runs the <code class=\"language-text\">wrapper</code> code before and after main function runs.</li>\n</ul>\n<br>\n<h3 id=\"problems\" style=\"position:relative;\"><a href=\"#problems\" aria-label=\"problems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problems</h3>\n<ul>\n<li>\n<p>위의 코드들은 잘 작동하지만, 의도되지 않은 side effect가 있다. Decorator의 return 값을 <code class=\"language-text\">subtract</code>라고 생각하지 않는다는 것.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>subtract<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>function trace<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">locals</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span>wrapper at <span class=\"token number\">0x7ff83afc9730</span><span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>이 문제의 원인은 찾기 힘들다.<br>\n<code class=\"language-text\">trace</code> function은 <code class=\"language-text\">wrapper</code>를 return한다.<br>\n<code class=\"language-text\">wrapper</code> function은 <code class=\"language-text\">decorator</code> 때문에 포함된 모듈 안의 <code class=\"language-text\">subtract</code> 이름에 할당된 것이다. (The wrapper function is what’s assigned to the main function name in the containing module because of the decorator.)</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>이런 경우 debugging이 어려워진다.<br>\n예를 들어 help built-in function를 사용할 수가 없다.  </p>\n<p>help function은 main 함수의 docstring을 print 해야하는데 다른 결과가 나온다. (subtract 대신 wrapper의 정보)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">help</span><span class=\"token punctuation\">(</span>subtract<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\nHelp on function wrapper <span class=\"token keyword\">in</span> module __main__<span class=\"token punctuation\">:</span>\n\nwrapper<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>또한 pickle과 같은 object serializers에서는 decorated된 original function이 어디에 위치하는지 알 수 없기 때문에 동작하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\npickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>subtract<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\nAttributeError<span class=\"token punctuation\">:</span> Can<span class=\"token string\">'t pickle local object '</span>trace<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">locals</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span>wrapper'</code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"code-classlanguage-textfunctoolswrapscode-built-in-module\" style=\"position:relative;\"><a href=\"#code-classlanguage-textfunctoolswrapscode-built-in-module\" aria-label=\"code classlanguage textfunctoolswrapscode built in module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">functools.wraps</code> built-in module</h3>\n<ul>\n<li>Decorator를 구현하도록 도와주는 decorator</li>\n<li>\n<p><code class=\"language-text\">wrapper</code> function에 적용하면, inner function부터 outer function까지의 모든 중요한 metadata를 복사한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper\n\n<span class=\"token decorator annotation punctuation\">@trace</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Return subtracted number\n    \"\"\"</span>\n    <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">2</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">help</code> function을 적용하면, 예상했던 결과가 잘 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">help</span><span class=\"token punctuation\">(</span>subtract<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\nHelp on function subtract <span class=\"token keyword\">in</span> module __main__<span class=\"token punctuation\">:</span>\n\nsubtract<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    Return subtracted number</code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Pickle도 잘 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>subtract<span class=\"token punctuation\">)</span>                                                                          \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">b'\\x80\\x03c__main__\\nsubtract\\nq\\x00.'</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Python functions는 많은 다른 standard attributes가 있다. (<code class=\"language-text\">__name__</code>, <code class=\"language-text\">__module__</code>, <code class=\"language-text\">__annotations__</code>)<br>\n이러한 속성들은 function의 interface를 유지하기 위해서 보존되어야 한다.</p>\n<p><code class=\"language-text\">wraps</code>를 사용하면 항상 정확한 방식으로 동작하게 할 수 있다. </p>\n</li>\n</ul>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://effectivepython.com/\"><em>Effective Python : Second Edition</em></a>  </p>\n</blockquote>","frontmatter":{"title":"Item 26: Define Function Decorators with 'functools.wraps'","date":"January 09, 2021","category":"[Effective Python]","thumbnail":null}}},"pageContext":{"slug":"/effective-python/item_26/","previous":{"fields":{"slug":"/effective-python/item_25/"},"frontmatter":{"title":"Item 25: Enforce Clarity with Keyword-Only and Positional-Only Arguments","category":"[Effective Python]","draft":false}},"next":{"fields":{"slug":"/python/arbitrary_arguments_list/"},"frontmatter":{"title":"Arbitrary Argument List","category":"python","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
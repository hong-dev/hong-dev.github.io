{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-python/item_17/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"6f8ce044-63cd-551d-9a22-85e09d21d711","excerpt":"Effective Python: Second Edition 내용 정리 Item 17: Prefer  Over  to Handle Missing Items in Internal State Case 1 만약 dictionary가 key의 value 값으로  type을 가지며, 다른 사람이 만든 dictionary에 access 해야 하는 경우 get method + assignment expression setdefault method get을 사용하는 것보다 훨씬 짧은 코드를 쓸 수 있다. Case…","html":"<blockquote>\n<p><em>Effective Python: Second Edition 내용 정리</em></p>\n</blockquote>\n<h2 id=\"item-17-prefer-code-classlanguage-textdefaultdictcode-over-code-classlanguage-textsetdefaultcode-to-handle-missing-items-in-internal-state\" style=\"position:relative;\"><a href=\"#item-17-prefer-code-classlanguage-textdefaultdictcode-over-code-classlanguage-textsetdefaultcode-to-handle-missing-items-in-internal-state\" aria-label=\"item 17 prefer code classlanguage textdefaultdictcode over code classlanguage textsetdefaultcode to handle missing items in internal state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Item 17: Prefer <code class=\"language-text\">defaultdict</code> Over <code class=\"language-text\">setdefault</code> to Handle Missing Items in Internal State</h2>\n<h3 id=\"case-1\" style=\"position:relative;\"><a href=\"#case-1\" aria-label=\"case 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Case 1</h3>\n<ul>\n<li>만약 dictionary가 key의 value 값으로 <code class=\"language-text\">set</code> type을 가지며, 다른 사람이 만든 dictionary에 access 해야 하는 경우</li>\n</ul>\n<br>\n<ol>\n<li>\n<p><strong>get method + assignment expression</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Red'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cherry'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Python 3.8</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yellow <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    fruits<span class=\"token punctuation\">[</span><span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> yellow <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nyellow<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">'lemon'</span><span class=\"token punctuation\">)</span>\n\nfruits\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Red'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'cherry'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'lemon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<ol start=\"2\">\n<li>\n<p><strong>setdefault method</strong></p>\n<p>get을 사용하는 것보다 훨씬 짧은 코드를 쓸 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">fruits<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">'lemon'</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h3 id=\"case-2\" style=\"position:relative;\"><a href=\"#case-2\" aria-label=\"case 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Case 2</h3>\n<ul>\n<li>만약 dictionary가 key의 value 값으로 <code class=\"language-text\">set</code> type을 가지며, dictionary를 생성하는 걸 직접 control 하는 경우</li>\n</ul>\n<br>\n<ol>\n<li>\n<p><strong>setdefault + class</strong></p>\n<p>Item 16에서 언급했듯이, setdefault는 그 이름이 헷갈리게 지어졌고, key값이 있든 없든 새로운 set instance를 생성하기 때문에 비효율적이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fruits</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        fruit_set <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        fruit_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\n\nfruits <span class=\"token operator\">=</span> Fruits<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfruits<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lemon'</span><span class=\"token punctuation\">)</span>\n\nfruits<span class=\"token punctuation\">.</span>data\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'lemon'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<ol start=\"2\">\n<li>\n<p><strong>collections.defaultdict</strong></p>\n<ul>\n<li>\n<p><code class=\"language-text\">defaultdict</code>는 key가 없으면 자동으로 default value를 저장한다.</p>\n<p>따라서, default value를 따로 저장해서 add할 필요없이한번에 가능하게 해준다.</p>\n</li>\n<li><code class=\"language-text\">defaultdict(set)</code>이라고 사용하므로, data dictionary에 있는 key값에 접근하면 항상 set instance가 결과로 나올 것이라는 것을 알 수 있다.</li>\n<li>setdefault처럼 add method가 호출될 때마다 필요없는 set instance를 생성하지 않아도 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Fruits</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\n\nfruits <span class=\"token operator\">=</span> Fruits<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfruits<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lemon'</span><span class=\"token punctuation\">)</span>\n\nfruits<span class=\"token punctuation\">.</span>data\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'set'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'lemon'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://effectivepython.com/\"><em>Effective Python : Second Edition</em></a>  </p>\n</blockquote>","frontmatter":{"title":"Item 17: Prefer 'defaultdict' Over 'setdefault' to Handle Missing Items in Internal State","date":"September 14, 2020","category":"[Effective Python]","thumbnail":null}}},"pageContext":{"slug":"/effective-python/item_17/","previous":{"fields":{"slug":"/effective-python/item_16/"},"frontmatter":{"title":"Item 16: Prefer 'get' Over 'in' and 'KeyError' to Handle Missing Dictionary Keys","category":"[Effective Python]","draft":false}},"next":{"fields":{"slug":"/effective-python/item_18/"},"frontmatter":{"title":"Item 18: Know How to Construct Key-Dependent Default Values with __missing__","category":"[Effective Python]","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
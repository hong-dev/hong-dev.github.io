{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-python/item_8/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"964ced96-079d-5288-8b36-04047d95c684","excerpt":"Effective Python: Second Edition 내용 정리 Item 8: Use zip to Process Iterators in Parallel 여러 list들을 동시에 iterate 하고 싶을 때 zip 사용 zip은 각각의 list들이 iterate로 돌 때 같이 묶이는 element들을 차례로 tuple로 생성한다. 이 tuple은 unpacking이 가능하다. zip wraps two or more iterators with a lazy generator. zip은 lazy…","html":"<blockquote>\n<p><em>Effective Python: Second Edition 내용 정리</em></p>\n</blockquote>\n<h2 id=\"item-8-use-zip-to-process-iterators-in-parallel\" style=\"position:relative;\"><a href=\"#item-8-use-zip-to-process-iterators-in-parallel\" aria-label=\"item 8 use zip to process iterators in parallel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Item 8: Use zip to Process Iterators in Parallel</h2>\n<ul>\n<li>\n<p>여러 list들을 동시에 iterate 하고 싶을 때 zip 사용</p>\n<ul>\n<li>zip은 각각의 list들이 iterate로 돌 때 같이 묶이는 element들을 차례로 tuple로 생성한다.<br>\n이 tuple은 unpacking이 가능하다.</li>\n</ul>\n</li>\n<li>zip wraps two or more iterators with a lazy generator.</li>\n<li>\n<p>zip은 lazy generator를 생성하기 때문에, 메모리나 캐싱을 많이 사용하지 않아 무한히 긴 long input도 가능하다.</p>\n<blockquote>\n<h3 id=\"list-vs-generator\" style=\"position:relative;\"><a href=\"#list-vs-generator\" aria-label=\"list vs generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List vs Generator</h3>\n<p>list 는 list 안에 속한 모든 데이터를 메모리에 올리기 때문에 list의 크기가 클수록 차지하는 메모리 사이즈가 늘어난다.<br>\ngenerator는 데이터 값을 한꺼번에 메모리에 올리는 것이 아니라 next() 메소드를 통해 차례로 값에 접근할 때마다 메모리에 올리는 방식이다.</p>\n</blockquote>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>다만, zip에 들어가는 input iterators의 길이가 서로 다를 때는 주의하라.<br>\n길이가 서로 다르다면, 가장 짧은 input iterator의 길이를 기준으로 거기까지만 tuple을 yield 한다.<br>\n아무런 에러없이 조용히 그냥 뒤를 잘라버리기 때문에 조심해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\ncounts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> count <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span> counts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\nA<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\nB<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\nC<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></code></pre></div>\n<p>➡ names list에 들어있는 <code class=\"language-text\">D</code>는 print 되지 않는다.</p>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>길이를 예측할 수 없는데 모든 정보를 다 yield 하고 싶다면, <code class=\"language-text\">zip</code> 함수 대신에 <code class=\"language-text\">itertools.zip_longest</code> 함수를 사용해보자.\n<code class=\"language-text\">zip_longest</code> 함수는 missing value를 <code class=\"language-text\">None</code>으로 대체한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> itertools\n\nnames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\ncounts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> count <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>zip_longest<span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span> counts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\nA<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\nB<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\nC<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\nD<span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://effectivepython.com/\"><em>Effective Python : Second Edition</em></a>  </p>\n</blockquote>","frontmatter":{"title":"Item 8: Use zip to Process Iterators in Parallel","date":"August 29, 2020","category":"[Effective Python]","thumbnail":null}}},"pageContext":{"slug":"/effective-python/item_8/","previous":{"fields":{"slug":"/python/dictionary_get/"},"frontmatter":{"title":"dictionary.get() method","category":"python","draft":false}},"next":{"fields":{"slug":"/effective-python/item_9/"},"frontmatter":{"title":"Item 9: Avoid else Blocks After for and while Loops","category":"[Effective Python]","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-python/item30/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"678960bf-00e6-554a-8ff3-620b1ed89eec","excerpt":"Effective Python: Second Edition 내용 정리 Item 30: Consider Generators Instead of Returning Lists Return  함수가 결과값들을 나열하기 위해 사용할 수 있는 가장 간단한 방법은 를 return 하는 것이다. Problem 1 새로운 result 값이 나올 때마다  method가 매번 호출된다. Problem 2 Return 되기 전에 모든 결과값들이 list에 저장되어 있어야 한다.\nInput…","html":"<blockquote>\n<p><em>Effective Python: Second Edition 내용 정리</em></p>\n</blockquote>\n<h2 id=\"item-30-consider-generators-instead-of-returning-lists\" style=\"position:relative;\"><a href=\"#item-30-consider-generators-instead-of-returning-lists\" aria-label=\"item 30 consider generators instead of returning lists permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Item 30: Consider Generators Instead of Returning Lists</h2>\n<h3 id=\"return-code-classlanguage-textlistcode\" style=\"position:relative;\"><a href=\"#return-code-classlanguage-textlistcode\" aria-label=\"return code classlanguage textlistcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Return <code class=\"language-text\">list</code></h3>\n<ul>\n<li>\n<p>함수가 결과값들을 나열하기 위해 사용할 수 있는 가장 간단한 방법은 <code class=\"language-text\">list</code>를 return 하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">count_words</span><span class=\"token punctuation\">(</span>word_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> word_list<span class=\"token punctuation\">:</span>\n        result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\ncount_words<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li><strong>Problem 1</strong><br>\n새로운 result 값이 나올 때마다 <code class=\"language-text\">append</code> method가 매번 호출된다.</li>\n<li><strong>Problem 2</strong><br>\nReturn 되기 전에 모든 결과값들이 list에 저장되어 있어야 한다.\nInput이 매우 크다면, 메모리 저장공간이 부족해지거나 프로그램이 다운되는 문제를 발생시킬 수 있다.</li>\n</ul>\n<br>\n<br>\n<h3 id=\"generator\" style=\"position:relative;\"><a href=\"#generator\" aria-label=\"generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generator</h3>\n<ul>\n<li>Generator를 사용하면, List를 return 할 때 발생하는 위의 두 가지 문제를 해결할 수 있다.</li>\n<li>\n<p><code class=\"language-text\">generator</code>는 <code class=\"language-text\">yield</code> expressions를 사용하는 함수에 의해 만들어진다.</p>\n<p>이렇게 작성하면, 결과 list에 대한 상호작용이 사라지기 때문에 가독성이 훨씬 좋다. 대신에 결과는 yield expressions로 넘겨진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">count_words</span><span class=\"token punctuation\">(</span>word_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> word_list<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n\ncount_words<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>generator <span class=\"token builtin\">object</span> count_words at <span class=\"token number\">0x7f6987602990</span><span class=\"token operator\">></span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>generator는 호출될 때 실제로 실행되는 것이 아니고 iterator를 return한다.<br>\n<code class=\"language-text\">next</code> built-in function과 함께 호출될 때, iterator는 generator의 다음 yield expression으로 넘어가게 한다. (Solution for problem 1)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">func <span class=\"token operator\">=</span> count_words<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">5</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>필요하다면 generator가 return하는 iterator를 <code class=\"language-text\">list</code> built-in function으로 넘겨서 <code class=\"language-text\">list</code>로 간단하게 바꿀 수 있다. (Item 32 참조)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">func <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>count_words<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nfunc\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Generator는 임의의 길이를 가진 input에도 쉽게 적용시킬 수 있다.</p>\n<p>사용하고 있는 메모리에 input과 output 전체를 저장하지 않기 때문이다. (Solution for problem 2)</p>\n</li>\n</ul>\n<br>\n<ul>\n<li>Generator를 사용할 때 조심해야 할 것은, return된 iterator는 다시 사용할 수 없다는 것을 caller가 알아야한다. (Item 31 참조)</li>\n</ul>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://effectivepython.com/\"><em>Effective Python : Second Edition</em></a>  </p>\n</blockquote>","frontmatter":{"title":"Item 30: Consider Generators Instead of Returning Lists","date":"April 24, 2021","category":"[Effective Python]","thumbnail":null}}},"pageContext":{"slug":"/effective-python/item30/","previous":{"fields":{"slug":"/core-javascript/chapter3/"},"frontmatter":{"title":"Chapter 3: this","category":"[Core JavaScript]","draft":false}},"next":{"fields":{"slug":"/core-javascript/chapter4/"},"frontmatter":{"title":"Chapter 4: Callback Function","category":"[Core JavaScript]","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-python/item_18/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"4080d358-31ea-5b07-b7bf-b134cef072b2","excerpt":"Effective Python: Second Edition 내용 정리 Item 18: Know How to Construct Key-Dependent Default Values with __missing__ 가 missing key들을 처리할 때 더 짧은 코드로 사용할 수 있다. (Item 16 참조) 많은 경우에, collections의  가 더 나은 옵션이다.(Item 17 참조) 하지만, 도 도 맞지 않는 경우가 있다.\n그럴 경우에는 을 사용하라. Case 1. get method…","html":"<blockquote>\n<p><em>Effective Python: Second Edition 내용 정리</em></p>\n</blockquote>\n<h2 id=\"item-18-know-how-to-construct-key-dependent-default-values-with-__missing__\" style=\"position:relative;\"><a href=\"#item-18-know-how-to-construct-key-dependent-default-values-with-__missing__\" aria-label=\"item 18 know how to construct key dependent default values with __missing__ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Item 18: Know How to Construct Key-Dependent Default Values with __missing__</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">setdefault</code>가 missing key들을 처리할 때 더 짧은 코드로 사용할 수 있다. (Item 16 참조)<br>\n많은 경우에, collections의 <code class=\"language-text\">defaultdict</code> 가 더 나은 옵션이다.(Item 17 참조)</p>\n<p>하지만, <code class=\"language-text\">setdefault</code>도 <code class=\"language-text\">defaultdict</code>도 맞지 않는 경우가 있다.\n그럴 경우에는 <code class=\"language-text\">__missing__</code>을 사용하라.</p>\n</li>\n</ul>\n<br>\n<h3 id=\"case-1-get-method--assignment-expression\" style=\"position:relative;\"><a href=\"#case-1-get-method--assignment-expression\" aria-label=\"case 1 get method  assignment expression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Case 1. get method + assignment expression</h3>\n<ul>\n<li>Assignment expression은 Python 3.8부터 도입되었다. (<a href=\"https://hong-dev.github.io/effective_python/item_8_to_10/\">Item 10</a> 참조)</li>\n<li>\n<p>이 방식으로 사용할 수는 있지만, dictionary에 access 하는 횟수가 많고 구조가 더 복잡하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">files <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'a.txt'</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        handle <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'a+b'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> OSError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Can't open file </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\">#handle이 없는 경우</span>\n        files<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> handle\n\nhandle<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nfile_data <span class=\"token operator\">=</span> handle<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p><strong>Python File Handling (open options)</strong><br>\n<code class=\"language-text\">a</code> : append 모드 (파일이 존재하지 않으면 생성)<br>\n<code class=\"language-text\">+</code> : updating 모드 (파일을 읽고 쓰기용으로 열기)<br>\n<code class=\"language-text\">b</code> : binary 모드</p>\n</blockquote>\n<br>\n<blockquote>\n<p><strong>OSError</strong><br>\nThis exception is raised when a system function returns a system-related error, including I/O failures such as “file not found” or “disk full” (not for illegal argument types or other incidental errors).<br>\n<a href=\"https://docs.python.org/3/library/exceptions.html#OSError\">Ref. Python docs</a></p>\n</blockquote>\n<br>\n<blockquote>\n<p><strong>file.seek(0)</strong><br>\n파일의 0(맨처음) 찾기<br>\n이렇게 하고 read하면 파일을 처음부터 다시 읽기</p>\n</blockquote>\n</li>\n</ul>\n<br>\n<h3 id=\"case-2-setdefault-method\" style=\"position:relative;\"><a href=\"#case-2-setdefault-method\" aria-label=\"case 2 setdefault method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Case 2. setdefault method</h3>\n<ul>\n<li>이 방법은 문제가 아주 많다.</li>\n<li>setdefault의 특성상, name이 dictionary에 이미 존재하더라도 매번 <code class=\"language-text\">open</code> function을 호출한다.<br>\n그러면 같은 program에서 이미 존재하는 open handles와 추가로 생성되는 handle이 충돌을 일으킬 수 있다.</li>\n<li>\n<p>Exceptions이 open 함수를 호출하면서 생긴 것인지 setdefault의 호출로 인해 생긴 것인지 구별할 수 없을 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">files <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'a.txt'</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    handle <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'a+b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> OSError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Can't open file </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">raise</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    handle<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    file_data <span class=\"token operator\">=</span> handle<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"case-3-defaultdict\" style=\"position:relative;\"><a href=\"#case-3-defaultdict\" aria-label=\"case 3 defaultdict permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Case 3. defaultdict</h3>\n<ul>\n<li>이 방법은 error가 발생한다.</li>\n<li>\n<p>defaultdict로 pass 되는 function은 arguments가 필요 없어야 한다.</p>\n<p>💡 <code class=\"language-text\">dafaultdict(function(params))</code> 형태로 정의하면, <code class=\"language-text\">TypeError: first argument must be callable or None</code> 발생<br>\n그래서 이대로 실행하면, open_file는 parameter를 받지못하고 error가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">open_file</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'a+b'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> OSError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Can't open file </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span>\n\nfiles <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>open_file<span class=\"token punctuation\">)</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'a.txt'</span>\nhandle <span class=\"token operator\">=</span> files<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n\nhandle<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nfile_data <span class=\"token operator\">=</span> handle<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> TypeError<span class=\"token punctuation\">:</span> open_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> missing <span class=\"token number\">1</span> required positional argument<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"case-4-missing\" style=\"position:relative;\"><a href=\"#case-4-missing\" aria-label=\"case 4 missing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Case 4. <strong>missing</strong></h3>\n<ul>\n<li>다행히 이런 경우는 아주 흔해서 Python에는 또다른 built-in solution이 있다.</li>\n<li>\n<p>dict type의 subclass를 만들고, missing keys를 처리할 수 있는 <code class=\"language-text\">__missing__</code> method를 구현한다.</p>\n<p>files[name] 으로 dictionary에 access할 때, name key가 없다면, __missing__ method가 호출된다.<br>\n이미 key값이 있다면 missing method는 호출되지 않는다. (이것은 <code class=\"language-text\">__getattr__</code>의 작동과 비슷하다. Item 47 참조)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">open_file</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'a+b'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> OSError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Can't open file </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__missing__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        value <span class=\"token operator\">=</span> open_file<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        <span class=\"token keyword\">return</span> value\n\nfiles <span class=\"token operator\">=</span> Files<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'a.txt'</span>\nhandle <span class=\"token operator\">=</span> files<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n\nhandle<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nfile_data <span class=\"token operator\">=</span> handle<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://effectivepython.com/\"><em>Effective Python : Second Edition</em></a>  </p>\n</blockquote>","frontmatter":{"title":"Item 18: Know How to Construct Key-Dependent Default Values with __missing__","date":"September 14, 2020","category":"[Effective Python]","thumbnail":null}}},"pageContext":{"slug":"/effective-python/item_18/","previous":{"fields":{"slug":"/effective-python/item_17/"},"frontmatter":{"title":"Item 17: Prefer 'defaultdict' Over 'setdefault' to Handle Missing Items in Internal State","category":"[Effective Python]","draft":false}},"next":{"fields":{"slug":"/effective-python/item_19/"},"frontmatter":{"title":"Item 19: Never Unpack More Than Three Variables When Functions Return Multiple Values","category":"[Effective Python]","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/django/initial_setting/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"682cbf78-9583-5148-8fec-43c5bd28bc22","excerpt":"Django project를 처음 시작할 때 고려해야 하는 사항들이 있다.  명령어로 프로젝트를 시작한 후, 아래의 내용들을 다 처리한 후에 git에 push 하면 초기세팅 완료! 1) .gitignore 기본적으로 git에 올리게 되면, 모든 소스코드가 공유된다. 그러나 올리고 싶지 않은 것이나 올려서는 안 되는 정보들이 있다. 그런 파일이나 폴더 등이 git에 올라가지 않도록  파일을 생성해서 관리해야 한다. 이미 git에 push해서 올라와 있다면, 나중에 ignore를 해도 git repo…","html":"<p>Django project를 처음 시작할 때 고려해야 하는 사항들이 있다.<br>\n<code class=\"language-text\">django-admin startproject</code> 명령어로 프로젝트를 시작한 후, 아래의 내용들을 다 처리한 후에 git에 push 하면 초기세팅 완료!</p>\n<h2 id=\"1-gitignore\" style=\"position:relative;\"><a href=\"#1-gitignore\" aria-label=\"1 gitignore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) .gitignore</h2>\n<p>기본적으로 git에 올리게 되면, 모든 소스코드가 공유된다.<br>\n그러나 올리고 싶지 않은 것이나 올려서는 안 되는 정보들이 있다.<br>\n그런 파일이나 폴더 등이 git에 올라가지 않도록 <code class=\"language-text\">.gitignore</code> 파일을 생성해서 관리해야 한다.</p>\n<p>이미 git에 push해서 올라와 있다면, 나중에 ignore를 해도 git repo에서 자동으로 없어지지 않는다.<br>\n물론 방법이 있겠지만, git rm 명령어로 하나씩 지워줘야 하는 번거로움이 있다.<br>\n때문에 처음에 정리해서 git ignore 해놓아야 한다. 프로젝트 시작하면 무조건 제일 먼저 해야하는 초기세팅 단계!!</p>\n<p>장고 프로젝트 최상위 폴더에 <code class=\"language-text\">.gitignore</code>파일을 생성한다.<br>\n<code class=\"language-text\">django-admin startproject</code> 명령어로 project를 생성했다면, manage.py 파일이 있는 가장 상위 폴더에 ignore 파일을 만들면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> .gitignore</code></pre></div>\n<blockquote>\n<p>gitignore 앞에 <code class=\"language-text\">.</code>이 붙었기 때문에 숨김 파일로 생성된다.</p>\n</blockquote>\n<br>\n<br>\n<p>이제, <code class=\"language-text\">.gitignore</code>는 생성하긴 했는데, 뭘 git에 올리지 말아야 하는지를 모른다.<br>\n그걸 알려주는 좋은 사이트 하나가 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/53142539/84573167-c43c0e00-add9-11ea-80e9-c1ea1e70f0ea.png\" alt=\".gitignore 자동생성기\"></p>\n<p>➡ <a href=\"https://www.toptal.com/developers/gitignore\">.gitignore 파일에 정의할 요소를 알려주는 사이트 바로가기</a></p>\n<p>위의 링크에서 기본적으로 <code class=\"language-text\">vim</code>, <code class=\"language-text\">linux</code>, <code class=\"language-text\">django</code>, <code class=\"language-text\">python</code>을 입력해주고, create를 하면 페이지가 하나 뜬다.<br>\n(위의 예시들 말고 다른 키워드를 입력하거나 추가해도 그에 맞게 요소들을 알려준다.)<br>\n이걸 전체 복사해서 생성한 .gitignore에 붙여넣기 하면 끝!</p>\n<p>그리고 3)에서 만들 <code class=\"language-text\">my_settings.py</code>도 git ignore 처리 해줘야 한다.</p>\n<h2 id=\"2-cors-headers\" style=\"position:relative;\"><a href=\"#2-cors-headers\" aria-label=\"2 cors headers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) cors-headers</h2>\n<p>cors-headers를 설정해주지 않으면, frontend와 연결되지 않아 front에서 아무리 요청해도 우리는 요청을 받을 수 없다.<br>\nfrontend와의 connection을 위한 필수 설정!</p>\n<br>\n<ul>\n<li>\n<p>1️⃣ cors에 대한 처리를 원활하게 도와줄 플러그인 <code class=\"language-text\">django-cors-headers</code>를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> django-cors-headers</code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>2️⃣ settings.py의 INSTALLED_APPS 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token string\">'corsheaders'</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>3️⃣ settings.py의 MIDDLEWARE 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">MIDDLEWARE <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token string\">'corsheaders.middleware.CorsMiddleware'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>4️⃣ settings.py의 제일 마지막에 관련 code 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">##CORS</span>\nCORS_ORIGIN_ALLOW_ALL<span class=\"token operator\">=</span><span class=\"token boolean\">True</span>\nCORS_ALLOW_CREDENTIALS <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\nCORS_ALLOW_METHODS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'OPTIONS'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'PATCH'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\nCORS_ALLOW_HEADERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'accept'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'accept-encoding'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'authorization'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'content-type'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'dnt'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'origin'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'user-agent'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'x-csrftoken'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'x-requested-with'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"3-my_settings\" style=\"position:relative;\"><a href=\"#3-my_settings\" aria-label=\"3 my_settings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) my_settings</h2>\n<p>Database나 Secret key와 같은 정보는 git에 올라가면 안 되는, secret하게 관리되어야 하는 정보다.<br>\n그래서 settings.py에 그 정보를 바로 넣는 것이 아니라 별도의 파일로 관리해야 한다.  </p>\n<br>\n<ul>\n<li>\n<p>startproject를 했다면, 가장 상위의 폴더에 들어가서 my_settings.py를 생성한다. (manage.py와 같은 레벨인 폴더에서 생성)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">django<span class=\"token operator\">-</span>admin startproject <span class=\"token string\">'하고싶은 프로젝트 명'</span>\ncd <span class=\"token string\">'생성한 프로젝트 폴더명'</span>\ntouch my_settings<span class=\"token punctuation\">.</span>py</code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">my_settings.py</code> 안에 쓰여지는 내용의 예시<br>\n이 외에도, git에 올리고 싶지 않은 config 내용, 외부 API(SNS 로그인, AWS 접속용 정보)도 기록할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'default'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'DATABASE 명'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'DB접속 계정명'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">#주로 'root'</span>\n      <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'DB접속용 비밀번호'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'실제 DB 주소'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'포트번호'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSECRET <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'secret'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'시크릿키'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>이 내용을 <code class=\"language-text\">settings.py</code>에 적용하려면, 아래와 같은 방식으로 적용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> my_settings\n\nDATABASE <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>DATABASES\nSECRET_KEY <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>SECRET</code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><strong>my_settings.py를 만들고 가장 중요한 것은, <code class=\"language-text\">.gitignore</code>에 추가하는 것!</strong><br>\n파일 이름만 한 줄 추가해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">### personal ###</span>\nmy_settings<span class=\"token punctuation\">.</span>py</code></pre></div>\n</li>\n</ul>\n<h2 id=\"4-commentary-주석처리\" style=\"position:relative;\"><a href=\"#4-commentary-%EC%A3%BC%EC%84%9D%EC%B2%98%EB%A6%AC\" aria-label=\"4 commentary 주석처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) commentary (주석처리)</h2>\n<p>django에서 사용하지 않을 front(template) 기능이나, admin, auth 기능 등의 코드는 settings.py에서 주석처리를 해줘야 한다.<br>\n자세한 주석처리 방법은 ➡ <a href=\"https://hong-dev.github.io/study/endpoint_1/\">settings.py에서 주석처리 할 것들</a></p>\n<h2 id=\"5-requirementstxt\" style=\"position:relative;\"><a href=\"#5-requirementstxt\" aria-label=\"5 requirementstxt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) requirements.txt</h2>\n<ul>\n<li>\n<p>가상환경에서 설치해놓은 module을 볼 수 있는 명령어</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip freeze</code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>협업을 할 때에는 개발환경을 공유해야 하는데, 필요한 모듈 리스트를 파일로 git에 올릴 수 있다.<br>\n아래의 명령어를 입력하면, <code class=\"language-text\">requirements.txt</code> 파일에 내 가상환경에 설치된 모듈 리스트가 저장된다.<br>\n생성된 requirements.txt 파일을 그대로 git에 올리면 끝.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip freeze <span class=\"token operator\">></span> requirements.txt</code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>requirements.txt 파일에 있는 모듈들을 내 가상환경에 한꺼번에 설치도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> -r requirements.txt</code></pre></div>\n</li>\n</ul>\n<h2 id=\"6-readmemd\" style=\"position:relative;\"><a href=\"#6-readmemd\" aria-label=\"6 readmemd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6) README.md</h2>\n<p>github repo에서 readme는 굉장히 중요하다. 원래 요약이 제일 중요하고 어렵지..<br>\n해당 repo가 어떤 프로젝트인지를 readme만 보고 쉽게 이해할 수 있도록 작성하는 게 중요하다.<br>\n개인적으로 readme를 잘 작성했을 때 뿌듯함을 느끼는 편 ☺<br>\n나중에 readme를 다 적으려면 막막하기도 해서 미리 만들어놓고 조금씩 수정해가는 것도 좋은 방법인 것 같다.</p>\n<p>파일명을 README.md로 만들어서 깃에 다른 파일들과 같이 push 해도 되고, github repo에서 직접 생성하고 수정해도 된다.<br>\n개인적으로는 repository에서 직접 생성하는 게 편한데, markdown으로 적은 readme 파일이 실제로 어떻게 보여지는지 preview 기능으로 확인 가능하기 때문!</p>","frontmatter":{"title":"Django project Initial settings","date":"June 15, 2020","category":"django","thumbnail":null}}},"pageContext":{"slug":"/django/initial_setting/","previous":{"fields":{"slug":"/concepts/dependabot/"},"frontmatter":{"title":"github dependabot","category":"concepts","draft":false}},"next":{"fields":{"slug":"/blog/yarn_deploy/"},"frontmatter":{"title":"`yarn deploy` doesn't seem to work","category":"gatsby","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/django/logout/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"0a7164c2-185c-515c-a54d-9602ba5c7526","excerpt":"Login과 Logout을 구현할 때 다음과 같은 절차로 진행한다.    : 아이디와 비밀번호를 담아 log-in 요청   : 정보를 확인 후 로그인 성공 시 access-token 발행  : 전달 받은 access-token을 browser storage에 저장 (쿠키 혹은 세션 스토리지)  : storage에 저장되어 있는 token을 request.headers에 담아서 원하는 정보를 요청   : token을 확인해서 요청한 정보를 return  : user가 log-out…","html":"<p>Login과 Logout을 구현할 때 다음과 같은 절차로 진행한다.  </p>\n<ol>\n<li><code class=\"language-text\">Front</code> : 아이디와 비밀번호를 담아 log-in 요청</li>\n<li><code class=\"language-text\">Back</code>  : 정보를 확인 후 로그인 성공 시 access-token 발행</li>\n<li><code class=\"language-text\">Front</code> : 전달 받은 access-token을 browser storage에 저장 (쿠키 혹은 세션 스토리지)</li>\n<li><code class=\"language-text\">Front</code> : storage에 저장되어 있는 token을 request.headers에 담아서 원하는 정보를 요청</li>\n<li><code class=\"language-text\">Back</code>  : token을 확인해서 요청한 정보를 return</li>\n<li><code class=\"language-text\">Front</code> : user가 log-out을 하면, browser storage에 저장되어 있는 token을 삭제</li>\n</ol>\n<br>\n<p>위의 방법을 보면, 서버에 로그아웃 요청을 따로 하지 않아도 front에서 token 삭제로 구현이 가능하다.<br>\n즉, browser storage의 관리는 front가 하고, backend는 그 session에 접근하지 못한다.</p>\n<br>\n<p>그렇다면 backend에서 access-token 만료와 log-out을 관리할 수는 없을까?</p>\n<blockquote>\n<h2 id=\"cache캐시\" style=\"position:relative;\"><a href=\"#cache%EC%BA%90%EC%8B%9C\" aria-label=\"cache캐시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache(캐시)</h2>\n<p>한 번 사용했던 데이터를 저장하여, 다시 사용할 때 빠르게 가져올 수 있도록 한다.<br>\n입출력이 잦거나 자주 바뀌는 정보 같은 경우에는 database에 저장하면 속도와 보안 문제가 생길 수 있다.<br>\n그래서 임시로 저장할 수 있는 공간에 저장해서 빠르게 꺼내쓸 수 있도록 한다.</p>\n</blockquote>\n<br>\n<h2 id=\"login\" style=\"position:relative;\"><a href=\"#login\" aria-label=\"login permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LOGIN</h2>\n<ul>\n<li>[1] django에서 cache를 사용하려면 import 해야한다.</li>\n<li>로그인할 때 front로 token을 바로 넘겨주는 것이 아니라, cache에 token을 저장하고 token을 열 수 있는 열쇠를 넘겨준다.</li>\n<li>token과 열쇠는 <code class=\"language-text\">cache.set(key, token)</code> 를 사용하여 둘을 묶어서 캐시에 저장한다.</li>\n<li>[2] 열쇠는 token과 마찬가지로 쉽게 해킹되지 않는 정보여야 하므로, random으로 user_number를 만들어서 저장했다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>cache <span class=\"token keyword\">import</span> cache  <span class=\"token comment\">#---[1]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LogInView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'email'</span> <span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            SECRET_KEY<span class=\"token punctuation\">,</span>\n                            algorithm <span class=\"token operator\">=</span> <span class=\"token string\">'HS256'</span>\n                          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\n        user_number <span class=\"token operator\">=</span> random_number_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#---[2]</span>\n        cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>user_number<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"token\"</span> <span class=\"token punctuation\">:</span> user_number<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h2 id=\"logout\" style=\"position:relative;\"><a href=\"#logout\" aria-label=\"logout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LOGOUT</h2>\n<ul>\n<li>token과 열쇠가 서로 매치되어 cache에 저장되어 있는데, <code class=\"language-text\">cache.delete(key)</code> 를 사용하여 그 캐시를 삭제하면 열쇠와 token의 연결고리가 사라진다.</li>\n<li>front에서 열쇠를 넘겨준다고 해도 이미 캐시가 삭제되었기 때문에, token과 매치되었던 그 열쇠는 이제 사용할 수 없다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>cache <span class=\"token keyword\">import</span> cache\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LogOutView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@login_required</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cache<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h2 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💬</h2>\n<ul>\n<li>로그인 할 때마다 새로운 랜덤 번호를 생성하는 것이 효율적일까?<br>\n회원가입을 할 때 랜덤 회원번호를 생성하고, 그걸 database에 넣어두고 그걸 token의 열쇠로 사용하는 것은 어떨까?<br>\n그렇게 한다면 여러 개의 기기에 로그인을 해놓은 경우, 한 기기에서 로그아웃을 한다면 모든 기기가 로그아웃 되는 현상이 생길 것이다.<br>\n이런 이유로 여기에서는 로그인 할 때마다 새로운 번호를 생성해서 각 기기별로 다른 열쇠들을 가지도록 하였다.</li>\n</ul>","frontmatter":{"title":"Logout API using Cache","date":"May 25, 2020","category":"django","thumbnail":null}}},"pageContext":{"slug":"/django/logout/","previous":{"fields":{"slug":"/algorithm/printer/"},"frontmatter":{"title":"중요도가 높은 순서대로 인쇄할 때 인쇄 순서 찾기","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/blog/category/"},"frontmatter":{"title":"Thumbnail과 Post page에 category 정보 넣기","category":"gatsby","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/zara/retrospective1/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"f6046920-0ae6-53dc-9156-fcf1de9b8f16","excerpt":"lambda validate_email / ValidationError email에 와 이 필수로 들어가 있는지 (email 형태인지) 체크해주는 validator KeyError 요청한 key 값이 front에서 들어오지 않았을 때 생기는 error POST일 경우에는 request.body에 key가 담겨서 오기 때문에 except KeyError 처리는 꼭 필요하다. 그럼 GET은 KeyError가 필요없나? 아니다. GET일 경우에도, query parameter로 key…","html":"<h2 id=\"lambda\" style=\"position:relative;\"><a href=\"#lambda\" aria-label=\"lambda permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lambda</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    validate_condition <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">lambda</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">lambda</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">lambda</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">lambda</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">8</span>\n    <span class=\"token punctuation\">]</span>\n    is_password_valid <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">for</span> validator <span class=\"token keyword\">in</span> validate_condition<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> validator<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">return</span> is_password_valid</code></pre></div>\n<h2 id=\"validate_email--validationerror\" style=\"position:relative;\"><a href=\"#validate_email--validationerror\" aria-label=\"validate_email  validationerror permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>validate_email / ValidationError</h2>\n<ul>\n<li>email에 <code class=\"language-text\">@</code>와 <code class=\"language-text\">.</code>이 필수로 들어가 있는지 (email 형태인지) 체크해주는 validator</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>validators <span class=\"token keyword\">import</span> validate_email\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ValidationError</code></pre></div>\n<h2 id=\"keyerror\" style=\"position:relative;\"><a href=\"#keyerror\" aria-label=\"keyerror permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KeyError</h2>\n<ul>\n<li>요청한 key 값이 front에서 들어오지 않았을 때 생기는 error</li>\n<li>POST일 경우에는 request.body에 key가 담겨서 오기 때문에 except KeyError 처리는 꼭 필요하다.</li>\n<li>그럼 GET은 KeyError가 필요없나? 아니다. GET일 경우에도, query parameter로 key값을 받아올 수 있으므로 KeyError 처리가 필요하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#GET이지만 query parameter로 keyword를 받아오는 경우</span>\n\nkeyword <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'keyword'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"INVALID_KEYS\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"contains--icontains\" style=\"position:relative;\"><a href=\"#contains--icontains\" aria-label=\"contains  icontains permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>contains / icontains</h2>\n<ul>\n<li>검색 기능 구현 시, keyword 값이 들어있는지 check</li>\n<li>contains는 대소문자를 구분하며, icontains는 대소문자 구분없이 모두 보여준다.</li>\n<li>단, 한글의 경우에는 온전한 글자 단위(자음+모음)로 체크가 되어서, 자음만 입력할 때는 검색이 되지 않는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">clothes_list <span class=\"token operator\">=</span> ClothesImage<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>select_related<span class=\"token punctuation\">(</span><span class=\"token string\">'clothes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>clothes__name__icontains <span class=\"token operator\">=</span> keyword<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"함수로-뽑아내기\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%A1%9C-%EB%BD%91%EC%95%84%EB%82%B4%EA%B8%B0\" aria-label=\"함수로 뽑아내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수로 뽑아내기</h2>\n<ul>\n<li>중복되거나, 너무 길게 입력되는 코드의 경우에는 함수로 따로 만들어서 적용하는 것도 방법이다.</li>\n</ul>","frontmatter":{"title":"[ZARA Clone] Retrospective 1","date":"March 07, 2020","category":"project","thumbnail":null}}},"pageContext":{"slug":"/zara/retrospective1/","previous":{"fields":{"slug":"/zara/read_me/"},"frontmatter":{"title":"[ZARA Clone] README.md","category":"project","draft":false}},"next":{"fields":{"slug":"/zara/retrospective2/"},"frontmatter":{"title":"[ZARA Clone] Retrospective 2","category":"project","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
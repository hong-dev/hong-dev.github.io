{"componentChunkName":"component---src-templates-blog-post-js","path":"/java/singleton-pattern/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"c48bd0f5-9a20-54a4-bfa2-4b26dc60d66b","excerpt":"Singleton Pattern Class가 하나의 instance만 가지도록 하며, 이 instance에 대한 global access point를 제공한다. Class의 여러 instances의 숫자를 컨트롤 하려는 이유는 대부분, shared resource에 대한 접근을 컨트롤 하기 위해서이다. Singleton Pattern의 경우, object를 하나 생성하고 다른 object를 또 생성하고 싶을 때, 새로운 object를 얻는 것이 아니라 이미 생성된 object…","html":"<h1 id=\"singleton-pattern\" style=\"position:relative;\"><a href=\"#singleton-pattern\" aria-label=\"singleton pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Singleton Pattern</h1>\n<ul>\n<li><strong>Class가 하나의 instance만</strong> 가지도록 하며, 이 <strong>instance에 대한 global access point</strong>를 제공한다.</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Class의 여러 instances의 숫자를 컨트롤 하려는 이유는 대부분, shared resource에 대한 접근을 컨트롤 하기 위해서이다.</p>\n<p>Singleton Pattern의 경우, object를 하나 생성하고 다른 object를 또 생성하고 싶을 때, 새로운 object를 얻는 것이 아니라 이미 생성된 object를 얻게 된다.</p>\n<p>Regular constructor의 경우에는 항상 new object를 return 하도록 설계되었기 때문에, 이 방법으로는 singleton pattern을 구현할 수 없다.</p>\n<p>⇒ 하나의 database object와 같이, 프로그램의 여러 군데에서 shared 되는 instance가 하나만 필요한 경우 사용한다.</p>\n</li>\n<li>\n<p>Global variable처럼, singleton pattern은 어디에서든 some object에 접근할 수 있게 한다.</p>\n<p>그러나 instance가 다른 code에 의해 overwritten 되는 것은 막는다.</p>\n<p>⇒ Global variables를 strict 하게 관리해야 할 때 사용한다.</p>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Government는 singleton pattern의 적절한 예시다. 하나의 국가는 official government를 하나만 가질 수 있다.</p>\n<p>그 정부를 구성하는 개인의 identity와는 상관없이, ‘대한민국 정부’와 같은 타이틀은 그 그룹의 사람들을 식별하는 global access point 라고 볼 수 있다.</p>\n</li>\n</ul>\n<br>\n<h1 id=\"pros\" style=\"position:relative;\"><a href=\"#pros\" aria-label=\"pros permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pros</h1>\n<ul>\n<li>Class에 instance가 하나만 있다는 것을 알 수 있다.</li>\n<li>해당 instance에 대해 global access point를 얻을 수 있다.</li>\n<li>Singleton object는 처음 요청되었을 때만 initialized 된다.</li>\n</ul>\n<br>\n<h1 id=\"cons\" style=\"position:relative;\"><a href=\"#cons\" aria-label=\"cons permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cons</h1>\n<ul>\n<li>The Singleton pattern can mask bad design, for instance, when the components of the program know too much about each other.</li>\n<li>Multithreaded 환경에서는, 여러 개의 threads가 singleton object를 여러번 생성하지 않도록 따로 처리해주어야 한다.</li>\n<li>\n<p>많은 test frameworks가 mock objects를 생성할 때 inheritance에 의존하기 때문에, singleton의 client code를 unit test 하는 것이 어려울 수 있다.</p>\n<p>Singleton class의 constructor는 private 이고, static methods를 override 하는 것은 대부분의 언어에서 불가능하므로, singleton을 mock 할 수 있는 창의적인 방법을 생각해야 한다.</p>\n</li>\n</ul>\n<br>\n<h1 id=\"implement\" style=\"position:relative;\"><a href=\"#implement\" aria-label=\"implement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implement</h1>\n<ul>\n<li>Singleton class에 대해 <code class=\"language-text\">new</code> operator를 사용하지 못하도록, default constructor를 private으로 만든다.</li>\n<li>\n<p>Constructor의 역할을 하는 static creation method를 만든다.</p>\n<p>내부적으로 이 method는 private constructor를 호출하여 object를 생성하고 static field에 저장한다.</p>\n<p>그 뒤로 이 method가 호출되면, 새로운 object를 생성하지 않고 첫번째 호출에서 생성된 cached object를 return 한다.</p>\n</li>\n</ul>\n<br>    \n<h1 id=\"example-code\" style=\"position:relative;\"><a href=\"#example-code\" aria-label=\"example code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example code</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create an object</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingleObject</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Make the constructor private</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingleObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Get the only object available</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingleObject</span> <span class=\"token function\">getinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://refactoring.guru/design-patterns/singleton\"><em>Singleton</em></a><br>\n<a href=\"https://www.tutorialspoint.com/design_pattern/singleton_pattern.htm\"><em>Design Pattern - Singleton Pattern</em></a></p>\n</blockquote>","frontmatter":{"title":"Singleton Pattern","date":"January 20, 2022","category":"java","thumbnail":null}}},"pageContext":{"slug":"/java/singleton-pattern/","previous":{"fields":{"slug":"/leetcode/contains-duplicate/"},"frontmatter":{"title":"[Array] #217 Contains Duplicate","category":"leetcode","draft":false}},"next":{"fields":{"slug":"/android/fragment/"},"frontmatter":{"title":"Android Fragment","category":"android","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
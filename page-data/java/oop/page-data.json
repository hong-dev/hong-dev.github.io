{"componentChunkName":"component---src-templates-blog-post-js","path":"/java/oop/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"ce0e21d4-b04d-5c3d-88e6-9119689aea46","excerpt":"POP vs OOP Procedure Oriented Programming: data에 대한 작업을 수행하는 절차나 method를 작성 Object Oriented Programming: data와 method를 모두 포함하는 object를 작성 Class vs Object Class: Object의 template Object: Class의 instance 예를 들어, class가 Fruit 라면 objects는 Apple, Banana, Mango 등이다. Object가 생성되면, object…","html":"<h1 id=\"pop-vs-oop\" style=\"position:relative;\"><a href=\"#pop-vs-oop\" aria-label=\"pop vs oop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POP vs OOP</h1>\n<ul>\n<li><strong>Procedure Oriented Programming:</strong> data에 대한 작업을 수행하는 절차나 method를 작성</li>\n<li><strong>Object Oriented Programming:</strong> data와 method를 모두 포함하는 object를 작성</li>\n</ul>\n<br>\n<h1 id=\"class-vs-object\" style=\"position:relative;\"><a href=\"#class-vs-object\" aria-label=\"class vs object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class vs Object</h1>\n<ul>\n<li><strong>Class:</strong> Object의 template</li>\n<li><strong>Object:</strong> Class의 instance</li>\n<li>예를 들어, <strong>class</strong>가 Fruit 라면 <strong>objects</strong>는 Apple, Banana, Mango 등이다.</li>\n<li>Object가 생성되면, object는 class에서 모든 변수와 method를 상속한다.</li>\n</ul>\n<br>\n<h1 id=\"oop-concepts\" style=\"position:relative;\"><a href=\"#oop-concepts\" aria-label=\"oop concepts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OOP concepts</h1>\n<h2 id=\"1-abstraction\" style=\"position:relative;\"><a href=\"#1-abstraction\" aria-label=\"1 abstraction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <strong>Abstraction</strong></h2>\n<ul>\n<li>추상화의 주요 목적은 사용자에게 불필요한 세부사항을 숨기는 것이다.</li>\n<li>\n<p>Class의 실행과 interface를 분리하고 interface에 집중할 수 있다면, 프로그램을 추론하고 설계하는 것이 더 쉽다.</p>\n<p>Class의 복잡한 구현 세부 사항을 추상화하고, clean하고 사용하기 쉬운 interface만 제공한다.</p>\n</li>\n<li>추상화는 변경사항이 있을 때, 외부 코드가 아닌 class 내의 세부 구현에만 영향을 미치게 한다.</li>\n</ul>\n<h2 id=\"2-encapsulation\" style=\"position:relative;\"><a href=\"#2-encapsulation\" aria-label=\"2 encapsulation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <strong>Encapsulation</strong></h2>\n<ul>\n<li>\n<p>Class에 포함된 정보에 코드의 나머지 부분들과 구분되는 보호 장벽을 형성한다.</p>\n<p>Data와 functions를 class 단위로 묶어서 캡슐화한다.</p>\n</li>\n<li>\n<p>외부로부터 class의 private details를 숨길 수 있고, interfacing에 중요한 기능만 노출할 수 있다.</p>\n<p>Class가 자신의 private data에 직접 접근하는 것을 허용하지 않으면, encapsulation이 잘 되었다고 한다.</p>\n</li>\n</ul>\n<h2 id=\"3-inheritance\" style=\"position:relative;\"><a href=\"#3-inheritance\" aria-label=\"3 inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <strong>Inheritance</strong></h2>\n<ul>\n<li>Class는 하나 이상의 parent/child classes를 가지는 계층으로 구성될 수 있다.</li>\n<li>\n<p>Class가 다른 class에서 상속되면, 자동으로 해당 class에서 동일한 functionality와 properties를 가져온다.</p>\n<p>동시에, 별도의 code와 data를 포함하도록 확장할 수도 있다.</p>\n<p>상위 클래스의 기능이 하위 클래스에서 재정의 될 필요가 없기 때문에, 코드의 재사용이 가능하다.</p>\n</li>\n</ul>\n<h2 id=\"4-polymorphism\" style=\"position:relative;\"><a href=\"#4-polymorphism\" aria-label=\"4 polymorphism permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <strong>Polymorphism</strong></h2>\n<ul>\n<li>\n<p>OOP에서 다형성을 사용하면, 계층 구조에서 class를 균일하게 처리할 수 있다.</p>\n<p>Calling code는 계층의 root에서만 작성되고, 계층 구조에서 child class에 의해 instance화 된 모든 object들은 동일한 방식으로 처리된다.</p>\n</li>\n<li>각 child class에서 해당 함수가 다르게 정의되었다면, 같은 calling이어도 다른 동작이 발생할 수 있다.</li>\n</ul>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://www.w3schools.com/java/java_oop.asp\"><em>Java OOP</em></a><br>\n<a href=\"https://www.indeed.com/career-advice/career-development/what-is-object-oriented-programming\"><em>What Is Object-Oriented Programming? The Four Basic Concepts of OOP</em></a></p>\n</blockquote>","frontmatter":{"title":"Java OOP (Object Oriented Programming)","date":"January 03, 2022","category":"java","thumbnail":null}}},"pageContext":{"slug":"/java/oop/","previous":{"fields":{"slug":"/core-javascript/chapter5/"},"frontmatter":{"title":"Chapter 5: Closure","category":"[Core JavaScript]","draft":false}},"next":{"fields":{"slug":"/java/java-python-oop/"},"frontmatter":{"title":"OOP: Java vs Python","category":"java","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/java/builder-pattern/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"f2da6fcb-234d-5c14-a517-2292dde4100a","excerpt":"object를 만들고 싶다고 하자. 기본 집의 구조(4개의 벽, 바닥, 문, 창문, 지붕)만으로 집을 만들 수도 있지만, 더 크거나 밝거나 마당 또는 다른 것들이 추가된 집을 만들고 싶다면 어떻게 할까? 아래의 3가지 방법을 떠올릴 수 있다. 1. Base class + subclasses 방법:  라는 base class를 만들고, parameter들을 다양하게 조합할 수 있는 subclass들을 생성한다. 문제는, 너무 많은 subclasses가 생성될 것이다. Parameter…","html":"<ul>\n<li>\n<p><code class=\"language-text\">House</code> object를 만들고 싶다고 하자.</p>\n<p>기본 집의 구조(4개의 벽, 바닥, 문, 창문, 지붕)만으로 집을 만들 수도 있지만, 더 크거나 밝거나 마당 또는 다른 것들이 추가된 집을 만들고 싶다면 어떻게 할까?</p>\n<p>아래의 3가지 방법을 떠올릴 수 있다.</p>\n</li>\n</ul>\n<h2 id=\"1-base-class--subclasses\" style=\"position:relative;\"><a href=\"#1-base-class--subclasses\" aria-label=\"1 base class  subclasses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Base class + subclasses</h2>\n<ul>\n<li>방법: <code class=\"language-text\">House</code> 라는 base class를 만들고, parameter들을 다양하게 조합할 수 있는 subclass들을 생성한다.</li>\n<li>문제는, 너무 많은 subclasses가 생성될 것이다.</li>\n<li>Parameter들이 다양하게 사용됨에 따라 계층이 더 복잡해질 것이다.</li>\n</ul>\n<h2 id=\"2-giant-constructor-in-base-class\" style=\"position:relative;\"><a href=\"#2-giant-constructor-in-base-class\" aria-label=\"2 giant constructor in base class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Giant constructor in base class</h2>\n<ul>\n<li>\n<p>방법: <code class=\"language-text\">House</code> object를 control 하는 모든 parameter를 사용하는 거대한 constructor를 생성한다.</p>\n<p>(<code class=\"language-text\">House(windows, doors, rooms, hasGarage, ...)</code>)</p>\n</li>\n<li>\n<p>대부분 사용되는 parameter는 몇 개 되지 않아서 constructor의 호출이 지저분해진다.</p>\n<p>예를 들어 수영장이 있는 집은 몇 없으므로, 수영장과 관련된 parameter는 대부분의 경우 쓸모가 없어진다.</p>\n</li>\n</ul>\n<h2 id=\"3-builder-pattern\" style=\"position:relative;\"><a href=\"#3-builder-pattern\" aria-label=\"3 builder pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Builder pattern</h2>\n<ul>\n<li>\n<p>자체 class에서 construction code를 따로 <code class=\"language-text\">builders</code>라고 하는 별도의 object로 옮기도록 한다.</p>\n<p><code class=\"language-text\">buildWalls</code>, <code class=\"language-text\">buildDoor</code>과 같은 각각의 step을 나누고, 필요한 step만 호출할 수 있다.</p>\n</li>\n<li>이렇게 해서 복잡한 object를 단계별로 구성할 수 있다.</li>\n<li>동일한 construction code를 사용하여 다양한 type의 objects를 생성할 수 있다.</li>\n<li>Builder는 object가 build 되는 동안 다른 objects가 product에 access하는 것을 허용하지 않는다.</li>\n<li>\n<p>builder에 있는 step을 client에서 각각 호출할 수도 있지만, <code class=\"language-text\">director</code> class를 따로 둘 수도 있다.</p>\n<p><code class=\"language-text\">director</code>는 각 step이 호출되는 순서를 알고 <code class=\"language-text\">builder</code>에 있는 step을 호출해서 실행시킨다.</p>\n<p><code class=\"language-text\">director</code>가 있다면 client code에서 product 구성의 세부 정보는 완전히 숨길 수 있다.</p>\n</li>\n</ul>\n<br>\n<h1 id=\"pros-and-cons\" style=\"position:relative;\"><a href=\"#pros-and-cons\" aria-label=\"pros and cons permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pros and Cons</h1>\n<ul>\n<li>Object를 단계별로 구성하거나, 구성 단계를 연기하거나, 재귀적으로 단계를 실행할 수 있다.</li>\n<li>Product의 다양한 표현을 구현할 때, construction code를 재사용할 수 있다.</li>\n<li>Business logic에서 복잡한 construction code를 분리할 수 있다. (Single Responsibility Principle)</li>\n<li>여러 개의 new classes를 생성하기 때문에, 코드의 전반적인 복잡성이 증가한다.</li>\n</ul>\n<br>\n<h1 id=\"example-code\" style=\"position:relative;\"><a href=\"#example-code\" aria-label=\"example code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example code</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Base class</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HousePlan</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBasement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> basement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> roof<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">House</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HousePlan</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> basement<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> roof<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBasement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> basement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>basement <span class=\"token operator\">=</span> basement<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> roof<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>roof <span class=\"token operator\">=</span> roof<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Builder</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HouseBuilder</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildBasement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildRoof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">House</span> <span class=\"token function\">getHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IglooHouseBuilder</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HouseBuilder</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">House</span> house<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IglooHouseBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>house <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildBasement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\thouse<span class=\"token punctuation\">.</span><span class=\"token function\">setBasement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ice Bars\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildRoof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\thouse<span class=\"token punctuation\">.</span><span class=\"token function\">setRoof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ice Dome\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">House</span> <span class=\"token function\">getHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>house<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Director</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CivilEngineer</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">HouseBuilder</span> houseBuilder<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">CivilEngineer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HouseBuilder</span> houseBuilder<span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>houseBuilder <span class=\"token operator\">=</span> houseBuilder<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">House</span> <span class=\"token function\">getHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>houseBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">constructHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>houseBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">buildBasement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>houseBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">buildRoof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">HouseBuilder</span> iglooBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IglooHouseBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">CivilEngineer</span> engineer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CivilEngineer</span><span class=\"token punctuation\">(</span>iglooBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tengineer<span class=\"token punctuation\">.</span><span class=\"token function\">constructHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">House</span> house <span class=\"token operator\">=</span> engineer<span class=\"token punctuation\">.</span><span class=\"token function\">getHouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://refactoring.guru/design-patterns/builder\"><em>Builder</em></a><br>\n<a href=\"https://www.geeksforgeeks.org/builder-design-pattern/\"><em>Builder Design Pattern</em></a></p>\n</blockquote>","frontmatter":{"title":"Builder Pattern","date":"January 31, 2022","category":"java","thumbnail":null}}},"pageContext":{"slug":"/java/builder-pattern/","previous":{"fields":{"slug":"/android/constraint-layout/"},"frontmatter":{"title":"Android ConstraintLayout","category":"android","draft":false}},"next":{"fields":{"slug":"/java/reflection/"},"frontmatter":{"title":"Reflection in Java","category":"java","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
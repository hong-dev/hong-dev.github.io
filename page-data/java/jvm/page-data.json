{"componentChunkName":"component---src-templates-blog-post-js","path":"/java/jvm/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"fc8528a0-2d2a-53eb-99c2-5bc5487b60ac","excerpt":"JVM 자바 가상 머신 Java 프로그램을 모든 장치 또는 OS에서 실행할 수 있도록 한다. (”Write once, run anywhere”) Java와 OS 사이에서 동작하며, Java가 OS에 영향을 받지 않고 재사용이 가능하도록 한다. 메모리 관리(Garbage Collection)를 수행 코드를 load, verify, execute 하며, fatal error를 report How Java works Java Source code ⇒ (Compiler) ⇒ Java Bytecodes…","html":"<h1 id=\"jvm\" style=\"position:relative;\"><a href=\"#jvm\" aria-label=\"jvm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JVM</h1>\n<ul>\n<li>자바 가상 머신</li>\n<li>Java 프로그램을 모든 장치 또는 OS에서 실행할 수 있도록 한다. (”Write once, run anywhere”)</li>\n<li>Java와 OS 사이에서 동작하며, Java가 OS에 영향을 받지 않고 재사용이 가능하도록 한다.</li>\n<li><strong>메모리 관리(Garbage Collection)</strong>를 수행</li>\n<li>코드를 load, verify, execute 하며, fatal error를 report</li>\n</ul>\n<br>\n<br>\n<h1 id=\"how-java-works\" style=\"position:relative;\"><a href=\"#how-java-works\" aria-label=\"how java works permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How Java works</h1>\n<h3 id=\"java-source-code--compiler--java-bytecodes--jvm--machine-language\" style=\"position:relative;\"><a href=\"#java-source-code--compiler--java-bytecodes--jvm--machine-language\" aria-label=\"java source code  compiler  java bytecodes  jvm  machine language permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java Source code ⇒ (Compiler) ⇒ Java Bytecodes ⇒ (JVM) ⇒ Machine language</h3>\n<br>\n<ul>\n<li>\n<p>Java 코드는 bytecode로 compile 된다.</p>\n<p><code class=\"language-text\">.java</code> 파일을 compile 하면, compiler는 <code class=\"language-text\">.java</code> 파일에 있는 class의 이름과 동일한 이름을 가진 <code class=\"language-text\">.class</code> 파일(byte-code 포함)을 생성한다.</p>\n</li>\n<li>Bytecode로 compile 된 <code class=\"language-text\">.class</code> 파일은 JVM을 거쳐 machine language로 변환된다.</li>\n</ul>\n<br>\n<br>\n<h1 id=\"jvm-architecture\" style=\"position:relative;\"><a href=\"#jvm-architecture\" aria-label=\"jvm architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JVM Architecture</h1>\n<h2 id=\"class-loader\" style=\"position:relative;\"><a href=\"#class-loader\" aria-label=\"class loader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Class Loader</strong></h2>\n<ul>\n<li><code class=\"language-text\">.class</code> 파일들을 load해서 분석한 뒤에, 실제 메모리 영역(Runtime Data Area)에 배치</li>\n</ul>\n<h2 id=\"runtime-data-area-memory\" style=\"position:relative;\"><a href=\"#runtime-data-area-memory\" aria-label=\"runtime data area memory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Runtime Data Area (Memory)</strong></h2>\n<ul>\n<li>Class Loader에서 분석된 class 파일 데이터를 저장하고, 실행 도중에 필요한 데이터를 저장</li>\n<li>\n<p>메모리를 효율적으로 관리하기 위해 크게 5개의 영역(Static, Heap, Stack, PC Register, Native Method Stack)으로 구분</p>\n<ol>\n<li><strong>Static (Method Area):</strong> 가장 먼저 데이터가 저장되며, class loader에 의해 로딩된 class, method, static, global variable 등 저장</li>\n<li><strong>Heap</strong>: Object allocation이 일어나는 영역</li>\n<li>\n<p><strong>Stacks:</strong> 프로그램의 부분적 결과와 local variable 저장</p>\n<p>Thread가 생성될 때마다 JVM stack이 동시에 생성된다.</p>\n<p>Method를 호출하면 호출 프로세스가 완료되는 동시에 새로운 stack frame이 생성되고 소멸된다.</p>\n</li>\n<li><strong>PC Registers:</strong> 현재 실행중인 JVM 명령어의 주소를 저장</li>\n<li>\n<p><strong>Native Method Stack:</strong> 모든 application에 필요한 모든 기본 method를 포함</p>\n<p>Bytecode가 아닌 기계어로 작성된 코드를 실행하는 공간</p>\n<p>다른 언어로 작성된 코드를 수행하기 위함</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"execution-engine\" style=\"position:relative;\"><a href=\"#execution-engine\" aria-label=\"execution engine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Execution Engine</strong></h2>\n<ul>\n<li>Runtime Date Area에 배치된 byte code를 해석하며, CPU가 해석 가능한 기계어로 변환하여 실행</li>\n<li>\n<p>Interpreter 방식(bytecode를 한 줄씩 읽고 해석)과 JIT 컴파일 방식(bytecode를 런타임 시점에 바로 기계어로 변환)을 혼합하여 해석</p>\n<p>Interpreter 방식은 실행 속도가 느리고, JIT compile은 실행 속도는 빠르지만 변환하는 데 비용이 발생</p>\n<p>그래서 interpreter 방식을 사용하다가 일정한 기준이 넘어가면 JIT 컴파일 방식으로 실행</p>\n</li>\n</ul>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://techvidvan.com/tutorials/java-virtual-machine/\"><em>JVM – Java Virtual Machine Working and Architecture</em></a><br>\n<a href=\"https://gbsb.tistory.com/2\"><em>자바의 구동 원리와 JVM(Java Virtual Machine)</em></a></p>\n</blockquote>","frontmatter":{"title":"JVM (Java Virtual Machine)","date":"January 04, 2022","category":"java","thumbnail":null}}},"pageContext":{"slug":"/java/jvm/","previous":{"fields":{"slug":"/java/java-python-oop/"},"frontmatter":{"title":"OOP: Java vs Python","category":"java","draft":false}},"next":{"fields":{"slug":"/android/components/"},"frontmatter":{"title":"Android Application Components","category":"android","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}
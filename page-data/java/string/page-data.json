{"componentChunkName":"component---src-templates-blog-post-js","path":"/java/string/","result":{"data":{"site":{"siteMetadata":{"title":"hong_devlog","author":"hongdev","siteUrl":"https://hong-dev.github.io","comment":{"disqusShortName":"","utterances":"hong-dev/hong-dev.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"d0aa0b4b-0661-5349-bfe2-b0e0274414c0","excerpt":"String Immutable 변경되지 않으므로 데이터 불일치에 대한 우려가 없고, multi-threaded 환경에서 사용하기에 적합하다. String은 변경이 되지 않으므로, String으로 정의된 변수를 바꾸면 기존의 값은 GC(Garbage Collection)의 대상이 되고 새로운 값이 생성된다. 계속 변경되는 값을 String으로 지정하면 heap에 GC 대상이 되는 값들이 늘어나서, heap memory에 문제가 생길 수 있다. string…","html":"<h1 id=\"string\" style=\"position:relative;\"><a href=\"#string\" aria-label=\"string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String</h1>\n<h3 id=\"immutable\" style=\"position:relative;\"><a href=\"#immutable\" aria-label=\"immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Immutable</h3>\n<ul>\n<li>변경되지 않으므로 데이터 불일치에 대한 우려가 없고, multi-threaded 환경에서 사용하기에 적합하다.</li>\n<li>String은 변경이 되지 않으므로, String으로 정의된 변수를 바꾸면 기존의 값은 GC(Garbage Collection)의 대상이 되고 새로운 값이 생성된다.</li>\n<li>계속 변경되는 값을 String으로 지정하면 heap에 GC 대상이 되는 값들이 늘어나서, heap memory에 문제가 생길 수 있다.</li>\n<li>string이 프로그램 전체에서 일정하게 유지될 경우에, String class object를 사용한다.</li>\n<li>String concatenation operator(문자열 연결 연산자 <code class=\"language-text\">+</code>)를 String class에서 사용하게 되면, 기존의 값들은 버리고 연결된 문자열이 새롭게 생성된다. 따라서 문자열 연결 연사자의 경우에는 내부적으로 StringBuffer 또는 StringBuilder class를 사용한다.</li>\n</ul>\n<br>\n<h1 id=\"stringbuilder\" style=\"position:relative;\"><a href=\"#stringbuilder\" aria-label=\"stringbuilder permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>StringBuilder</h1>\n<h3 id=\"mutable--not-synchronized\" style=\"position:relative;\"><a href=\"#mutable--not-synchronized\" aria-label=\"mutable  not synchronized permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutable / Not synchronized</h3>\n<ul>\n<li>StringBuilder와 StringBuffer는 정의된 변수 자체의 값을 변경할 수 있다.</li>\n<li>string이 변경될 수 있고, <strong>single thread</strong>에서만 access 할 수 있는 경우 사용한다.</li>\n<li>Thread-safety를 원하지 않는 경우에 사용할 수 있다.</li>\n<li>Performance 측면에서 StringBuffer보다 <strong>빠르고</strong> 효율적이다.</li>\n<li>append(), insert(), delete(), substring()과 같은 methods를 제공한다.</li>\n</ul>\n<br>    \n<h1 id=\"stringbuffer\" style=\"position:relative;\"><a href=\"#stringbuffer\" aria-label=\"stringbuffer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>StringBuffer</h1>\n<h3 id=\"mutable--synchronized\" style=\"position:relative;\"><a href=\"#mutable--synchronized\" aria-label=\"mutable  synchronized permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutable / Synchronized</h3>\n<ul>\n<li>StringBuilder와 마찬가지로, 정의된 변수 자체의 값을 변경할 수 있다.</li>\n<li>\n<p>동기식이므로 thread-safety를 보장한다.</p>\n<p>(<strong>Thread-safety</strong>: Multi-thread programming에서 어떤 함수나 변수, 객체가 여러 threads로부터 동시에 접근이 이루어져도 프로그램의 실행에 문제가 없음을 뜻한다.)</p>\n</li>\n<li>string이 변경될 수 있고, <strong>multiple threads</strong>에서 access 할 경우 사용한다.</li>\n<li>Performance 측면에서 StringBuilder보다 <strong>느리고</strong> 덜 효율적이다.</li>\n<li>append(), insert(), delete(), substring()과 같은 methods를 제공한다.</li>\n</ul>\n<br>\n<br>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Reference</em></h3>\n<blockquote>\n<p><a href=\"https://www.journaldev.com/538/string-vs-stringbuffer-vs-stringbuilder\"><em>String vs StringBuffer vs StringBuilder</em></a></p>\n</blockquote>","frontmatter":{"title":"String vs StringBuilder vs StringBuffer","date":"January 13, 2022","category":"java","thumbnail":null}}},"pageContext":{"slug":"/java/string/","previous":{"fields":{"slug":"/java/collection-framework/"},"frontmatter":{"title":"Java Collection Framework","category":"java","draft":false}},"next":{"fields":{"slug":"/leetcode/best-time-to-buy-and-sell-stock/"},"frontmatter":{"title":"[Array] #121 Best Time to Buy and Sell Stock","category":"leetcode","draft":false}}}},"staticQueryHashes":["2353110810","3128451518"]}